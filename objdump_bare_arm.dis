
out/test_ac6/HP/debug/test_ac6.axf:     file format elf32-littlearm
architecture: armv3m, flags 0x00000012:
EXEC_P, HAS_SYMS
start address 0x8020358d

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 M55_HP_ROM    00005f5c  80200000  80200000  00000040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 RW_RAM        00000648  20000000  20000000  00005fa0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 RW_RAM        00000a70  20000648  20000648  000065e8  2**3
                  ALLOC
  3 ARM_LIB_HEAP  00004000  20004000  20004000  000065e8  2**0
                  ALLOC
  4 APP_HEAP      00008000  20008000  20008000  000065e8  2**0
                  ALLOC
  5 ARM_LIB_STACK 00002000  200fe000  200fe000  000065e8  2**0
                  ALLOC
  6 PADDING       00000010  60040000  60040000  000065f0  2**4
                  CONTENTS, ALLOC, LOAD, DATA
  7 .debug_abbrev 00001343  00000000  00000000  00006600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_frame  0000465c  00000000  00000000  00007943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0000d1df  00000000  00000000  0000bf9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_line   00008ca6  00000000  00000000  0001917e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00001290  00000000  00000000  00021e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_str    0000c7be  00000000  00000000  000230b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .note         0000002c  00000000  00000000  00039740  2**2
                  CONTENTS, READONLY
 14 .comment      00000698  00000000  00000000  0003976c  2**0
                  CONTENTS, READONLY

Disassembly of section M55_HP_ROM:

80200000 <__Vectors>:
__tagsym$$used.1():
80200000:	00 00 10 20 8d 35 20 80 3d 27 20 80 dd 30 20 80     ... .5 .=' ..0 .
80200010:	99 34 20 80 35 27 20 80 e9 3a 20 80 e1 36 20 80     .4 .5' ..: ..6 .
	...
8020002c:	3d 27 20 80 3d 27 20 80 00 00 00 00 3d 27 20 80     =' .=' .....=' .
8020003c:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
8020004c:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
8020005c:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
8020006c:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
8020007c:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
8020008c:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
8020009c:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
802000ac:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
802000bc:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
802000cc:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
802000dc:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
802000ec:	3d 27 20 80 3d 27 20 80 00 00 00 00 00 00 00 00     =' .=' .........
	...
8020011c:	3d 27 20 80 3d 27 20 80 3d 27 20 80 15 32 20 80     =' .=' .=' ..2 .
8020012c:	00 00 00 00 3d 27 20 80 3d 27 20 80 3d 27 20 80     ....=' .=' .=' .
8020013c:	3d 27 20 80 00 00 00 00 00 00 00 00 00 00 00 00     =' .............
8020014c:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
8020015c:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
	...
802001c0:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
802001d0:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
802001e0:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
802001f0:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200200:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200210:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200220:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200230:	21 39 20 80 31 39 20 80 41 39 20 80 51 39 20 80     !9 .19 .A9 .Q9 .
80200240:	61 39 20 80 71 39 20 80 81 39 20 80 91 39 20 80     a9 .q9 ..9 ..9 .
80200250:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200260:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200270:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200280:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200290:	3d 27 20 80 3d 27 20 80 00 00 00 00 3d 27 20 80     =' .=' .....=' .
802002a0:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
802002b0:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
802002c0:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
802002d0:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
802002e0:	3d 27 20 80 3d 27 20 80 3d 27 20 80 e5 30 20 80     =' .=' .=' ..0 .
802002f0:	f9 30 20 80 0d 31 20 80 21 31 20 80 35 31 20 80     .0 ..1 .!1 .51 .
80200300:	49 31 20 80 5d 31 20 80 71 31 20 80 41 27 20 80     I1 .]1 .q1 .A' .
80200310:	55 27 20 80 69 27 20 80 7d 27 20 80 91 27 20 80     U' .i' .}' ..' .
80200320:	a5 27 20 80 b9 27 20 80 cd 27 20 80 01 2b 20 80     .' ..' ..' ..+ .
80200330:	15 2b 20 80 29 2b 20 80 3d 2b 20 80 51 2b 20 80     .+ .)+ .=+ .Q+ .
80200340:	65 2b 20 80 79 2b 20 80 8d 2b 20 80 a1 2b 20 80     e+ .y+ ..+ ..+ .
80200350:	b5 2b 20 80 c9 2b 20 80 dd 2b 20 80 f1 2b 20 80     .+ ..+ ..+ ..+ .
80200360:	05 2c 20 80 19 2c 20 80 2d 2c 20 80 41 2c 20 80     ., .., .-, .A, .
80200370:	55 2c 20 80 69 2c 20 80 7d 2c 20 80 91 2c 20 80     U, .i, .}, .., .
80200380:	a5 2c 20 80 b9 2c 20 80 cd 2c 20 80 e1 2c 20 80     ., .., .., .., .
80200390:	f5 2c 20 80 09 2d 20 80 1d 2d 20 80 31 2d 20 80     ., ..- ..- .1- .
802003a0:	45 2d 20 80 59 2d 20 80 6d 2d 20 80 81 2d 20 80     E- .Y- .m- ..- .
802003b0:	95 2d 20 80 a9 2d 20 80 bd 2d 20 80 d1 2d 20 80     .- ..- ..- ..- .
802003c0:	e5 2d 20 80 f9 2d 20 80 0d 2e 20 80 21 2e 20 80     .- ..- ... .!. .
802003d0:	35 2e 20 80 49 2e 20 80 5d 2e 20 80 71 2e 20 80     5. .I. .]. .q. .
802003e0:	85 2e 20 80 99 2e 20 80 ad 2e 20 80 c1 2e 20 80     .. ... ... ... .
802003f0:	d5 2e 20 80 e9 2e 20 80 fd 2e 20 80 11 2f 20 80     .. ... ... ../ .
80200400:	25 2f 20 80 39 2f 20 80 4d 2f 20 80 61 2f 20 80     %/ .9/ .M/ .a/ .
80200410:	75 2f 20 80 89 2f 20 80 9d 2f 20 80 b1 2f 20 80     u/ ../ ../ ../ .
80200420:	c5 2f 20 80 d9 2f 20 80 ed 2f 20 80 01 30 20 80     ./ ../ ../ ..0 .
80200430:	15 30 20 80 29 30 20 80 3d 30 20 80 51 30 20 80     .0 .)0 .=0 .Q0 .
80200440:	65 30 20 80 79 30 20 80 8d 30 20 80 e1 27 20 80     e0 .y0 ..0 ..' .
80200450:	f5 27 20 80 09 28 20 80 1d 28 20 80 31 28 20 80     .' ..( ..( .1( .
80200460:	45 28 20 80 59 28 20 80 6d 28 20 80 81 28 20 80     E( .Y( .m( ..( .
80200470:	95 28 20 80 a9 28 20 80 bd 28 20 80 d1 28 20 80     .( ..( ..( ..( .
80200480:	e5 28 20 80 f9 28 20 80 0d 29 20 80 21 29 20 80     .( ..( ..) .!) .
80200490:	35 29 20 80 49 29 20 80 5d 29 20 80 71 29 20 80     5) .I) .]) .q) .
802004a0:	85 29 20 80 99 29 20 80 ad 29 20 80 c1 29 20 80     .) ..) ..) ..) .
802004b0:	d5 29 20 80 e9 29 20 80 fd 29 20 80 11 2a 20 80     .) ..) ..) ..* .
802004c0:	25 2a 20 80 39 2a 20 80 4d 2a 20 80 61 2a 20 80     %* .9* .M* .a* .
802004d0:	75 2a 20 80 89 2a 20 80 9d 2a 20 80 b1 2a 20 80     u* ..* ..* ..* .
802004e0:	c5 2a 20 80 d9 2a 20 80 ed 2a 20 80 3d 27 20 80     .* ..* ..* .=' .
802004f0:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200500:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200510:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200520:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200530:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200540:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200550:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200560:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200570:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200580:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200590:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
802005a0:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
802005b0:	3d 27 20 80 3d 27 20 80 15 32 20 80 00 00 00 00     =' .=' ..2 .....
	...
80200604:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200614:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200624:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200634:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200644:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200654:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200664:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200674:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200684:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200694:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
802006a4:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
802006b4:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
802006c4:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
802006d4:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
802006e4:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
802006f4:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200704:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200714:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200724:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200734:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200744:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200754:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200764:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200774:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200784:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
80200794:	3d 27 20 80 3d 27 20 80 3d 27 20 80 3d 27 20 80     =' .=' .=' .=' .
	...

802007c0 <__main>:
__main():
802007c0:	f000 f802 	bl	802007c8 <__scatterload_rt2>
802007c4:	f000 f8b4 	bl	80200930 <__rt_entry>

802007c8 <__scatterload_rt2>:
__scatterload():
802007c8:	a614      	add	r6, pc, #80	@ (adr r6, 8020081c <__scatterload_loop+0x4a>)
__scatterload_rt2():
802007ca:	e896 0c00 	ldmia.w	r6, {sl, fp}
802007ce:	44b2      	add	sl, r6
802007d0:	44b3      	add	fp, r6

802007d2 <__scatterload_loop>:
__scatterload_loop():
802007d2:	45da      	cmp	sl, fp
802007d4:	d101      	bne.n	802007da <__scatterload_loop+0x8>
802007d6:	f000 f8ab 	bl	80200930 <__rt_entry>
802007da:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
802007de:	a60f      	add	r6, pc, #60	@ (adr r6, 8020081c <__scatterload_loop+0x4a>)
802007e0:	e896 0030 	ldmia.w	r6, {r4, r5}
802007e4:	eba5 0504 	sub.w	r5, r5, r4
802007e8:	eb04 0706 	add.w	r7, r4, r6
802007ec:	ebaa 0407 	sub.w	r4, sl, r7
802007f0:	f1a7 0701 	sub.w	r7, r7, #1
802007f4:	ea4f 1515 	mov.w	r5, r5, lsr #4
802007f8:	ea4f 1434 	mov.w	r4, r4, ror #4
802007fc:	f1a4 0401 	sub.w	r4, r4, #1
80200800:	42ac      	cmp	r4, r5
80200802:	d301      	bcc.n	80200808 <__scatterload_loop+0x36>
80200804:	f000 f894 	bl	80200930 <__rt_entry>
80200808:	f013 0f01 	tst.w	r3, #1
8020080c:	bf18      	it	ne
8020080e:	1afb      	subne	r3, r7, r3
80200810:	f043 0301 	orr.w	r3, r3, #1
80200814:	f000 f801 	bl	8020081a <__scatterload_loop+0x48>
80200818:	e7db      	b.n	802007d2 <__scatterload_loop>
8020081a:	4718      	bx	r3
8020081c:	000055a0 	.word	0x000055a0
80200820:	000055c0 	.word	0x000055c0

80200824 <__scatterload_copy>:
__scatterload_copy():
80200824:	3a10      	subs	r2, #16
80200826:	bf24      	itt	cs
80200828:	c878      	ldmiacs	r0!, {r3, r4, r5, r6}
8020082a:	c178      	stmiacs	r1!, {r3, r4, r5, r6}
8020082c:	d8fa      	bhi.n	80200824 <__scatterload_copy>
8020082e:	0752      	lsls	r2, r2, #29
80200830:	bf24      	itt	cs
80200832:	c830      	ldmiacs	r0!, {r4, r5}
80200834:	c130      	stmiacs	r1!, {r4, r5}
80200836:	bf44      	itt	mi
80200838:	6804      	ldrmi	r4, [r0, #0]
8020083a:	600c      	strmi	r4, [r1, #0]
8020083c:	4770      	bx	lr
	...

80200840 <__scatterload_null>:
__scatterload_null():
80200840:	4770      	bx	lr
	...

80200844 <__scatterload_zeroinit>:
__scatterload_zeroinit():
80200844:	2300      	movs	r3, #0
80200846:	2400      	movs	r4, #0
80200848:	2500      	movs	r5, #0
8020084a:	2600      	movs	r6, #0
8020084c:	3a10      	subs	r2, #16
8020084e:	bf28      	it	cs
80200850:	c178      	stmiacs	r1!, {r3, r4, r5, r6}
80200852:	d8fb      	bhi.n	8020084c <__scatterload_zeroinit+0x8>
80200854:	0752      	lsls	r2, r2, #29
80200856:	bf28      	it	cs
80200858:	c130      	stmiacs	r1!, {r4, r5}
8020085a:	bf48      	it	mi
8020085c:	600b      	strmi	r3, [r1, #0]
8020085e:	4770      	bx	lr

80200860 <_printf_n>:
_printf_n():
80200860:	296e      	cmp	r1, #110	@ 0x6e
80200862:	f000 8215 	beq.w	80200c90 <_printf_charcount>

80200866 <_printf_p>:
_printf_p():
80200866:	2970      	cmp	r1, #112	@ 0x70
80200868:	f000 834b 	beq.w	80200f02 <_printf_hex_ptr>

8020086c <_printf_f>:
_printf_f():
8020086c:	2966      	cmp	r1, #102	@ 0x66
8020086e:	f004 86fe 	beq.w	8020566e <_printf_fp_dec>

80200872 <_printf_e>:
_printf_e():
80200872:	2965      	cmp	r1, #101	@ 0x65
80200874:	f004 86fb 	beq.w	8020566e <_printf_fp_dec>

80200878 <_printf_g>:
_printf_g():
80200878:	2967      	cmp	r1, #103	@ 0x67
8020087a:	f004 86f8 	beq.w	8020566e <_printf_fp_dec>

8020087e <_printf_a>:
_printf_a():
8020087e:	2961      	cmp	r1, #97	@ 0x61
80200880:	f004 86f7 	beq.w	80205672 <_printf_fp_hex>

80200884 <_printf_ll>:
_printf_ll():
80200884:	6803      	ldr	r3, [r0, #0]
80200886:	0a1b      	lsrs	r3, r3, #8
80200888:	bf28      	it	cs
8020088a:	f041 0180 	orrcs.w	r1, r1, #128	@ 0x80

8020088e <_printf_i>:
_printf_i():
8020088e:	2969      	cmp	r1, #105	@ 0x69
80200890:	f000 81c2 	beq.w	80200c18 <_printf_int_dec>

80200894 <_printf_d>:
_printf_d():
80200894:	2964      	cmp	r1, #100	@ 0x64
80200896:	f000 81bf 	beq.w	80200c18 <_printf_int_dec>

8020089a <_printf_u>:
_printf_u():
8020089a:	2975      	cmp	r1, #117	@ 0x75
8020089c:	f000 81bc 	beq.w	80200c18 <_printf_int_dec>

802008a0 <_printf_o>:
_printf_o():
802008a0:	296f      	cmp	r1, #111	@ 0x6f
802008a2:	f000 82d9 	beq.w	80200e58 <_printf_int_oct>

802008a6 <_printf_x>:
_printf_x():
802008a6:	2978      	cmp	r1, #120	@ 0x78
802008a8:	f000 8317 	beq.w	80200eda <_printf_int_hex>

802008ac <_printf_lli>:
_printf_lli():
802008ac:	29e9      	cmp	r1, #233	@ 0xe9
802008ae:	f000 8273 	beq.w	80200d98 <_printf_longlong_dec>

802008b2 <_printf_lld>:
_printf_lld():
802008b2:	29e4      	cmp	r1, #228	@ 0xe4
802008b4:	f000 8270 	beq.w	80200d98 <_printf_longlong_dec>

802008b8 <_printf_llu>:
_printf_llu():
802008b8:	29f5      	cmp	r1, #245	@ 0xf5
802008ba:	f000 826d 	beq.w	80200d98 <_printf_longlong_dec>

802008be <_printf_llo>:
_printf_llo():
802008be:	29ef      	cmp	r1, #239	@ 0xef
802008c0:	f000 82d6 	beq.w	80200e70 <_printf_ll_oct>

802008c4 <_printf_llx>:
_printf_llx():
802008c4:	29f8      	cmp	r1, #248	@ 0xf8
802008c6:	f000 8316 	beq.w	80200ef6 <_printf_ll_hex>

802008ca <_printf_l>:
_printf_l():
802008ca:	6803      	ldr	r3, [r0, #0]
802008cc:	09db      	lsrs	r3, r3, #7
802008ce:	bf28      	it	cs
802008d0:	f041 0180 	orrcs.w	r1, r1, #128	@ 0x80

802008d4 <_printf_c>:
_printf_c():
802008d4:	2963      	cmp	r1, #99	@ 0x63
802008d6:	f001 8345 	beq.w	80201f64 <_printf_char>

802008da <_printf_s>:
_printf_s():
802008da:	2973      	cmp	r1, #115	@ 0x73
802008dc:	f001 834a 	beq.w	80201f74 <_printf_string>

802008e0 <_printf_lc>:
_printf_lc():
802008e0:	29e3      	cmp	r1, #227	@ 0xe3
802008e2:	f001 8355 	beq.w	80201f90 <_printf_wchar>

802008e6 <_printf_ls>:
_printf_ls():
802008e6:	29f3      	cmp	r1, #243	@ 0xf3
802008e8:	f001 835a 	beq.w	80201fa0 <_printf_wstring>

802008ec <_printf_percent_end>:
_printf_percent_end():
802008ec:	2000      	movs	r0, #0
802008ee:	4770      	bx	lr

802008f0 <__rt_lib_init>:
__rt_lib_init():
802008f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}

802008f2 <__rt_lib_init_fp_1>:
__rt_lib_init_fp_1():
802008f2:	f004 fead 	bl	80205650 <_fp_init>

802008f6 <__rt_lib_init_heap_2>:
__rt_lib_init_heap_2():
802008f6:	480a      	ldr	r0, [pc, #40]	@ (80200920 <__lit__00000000>)
802008f8:	490a      	ldr	r1, [pc, #40]	@ (80200924 <__lit__00000001>)
802008fa:	f001 fc93 	bl	80202224 <_init_alloc>

802008fe <__rt_lib_init_heap_1>:
__rt_lib_init_heap_1():
802008fe:	f001 fc71 	bl	802021e4 <__rt_locale>
80200902:	0004      	movs	r4, r0

80200904 <__rt_lib_init_lc_collate_1>:
__rt_lib_init_lc_collate_1():
80200904:	2000      	movs	r0, #0
80200906:	2100      	movs	r1, #0
80200908:	f004 fe8c 	bl	80205624 <_get_lc_ctype>
8020090c:	1c40      	adds	r0, r0, #1
8020090e:	6060      	str	r0, [r4, #4]

80200910 <__rt_lib_init_lc_ctype_1>:
__rt_lib_init_lc_ctype_1():
80200910:	2000      	movs	r0, #0
80200912:	2100      	movs	r1, #0
80200914:	f004 fe70 	bl	802055f8 <_get_lc_numeric>
80200918:	60e0      	str	r0, [r4, #12]

8020091a <__rt_lib_init_atexit_1>:
__rt_lib_init_atexit_1():
8020091a:	f000 fdb3 	bl	80201484 <_initio>

8020091e <__rt_lib_init_alloca_1>:
__rt_lib_init_alloca_1():
8020091e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

80200920 <__lit__00000000>:
80200920:	4000 2000                                   .@. 

80200924 <__lit__00000001>:
80200924:	8000 2000                                   ... 

80200928 <__rt_lib_shutdown>:
__rt_lib_shutdown():
80200928:	b510      	push	{r4, lr}

8020092a <__rt_lib_shutdown_cpp_1>:
__rt_lib_shutdown_cpp_1():
8020092a:	f000 fe14 	bl	80201556 <_terminateio>

8020092e <__rt_lib_shutdown_fp_trap_1>:
__rt_lib_shutdown_fp_trap_1():
8020092e:	bd10      	pop	{r4, pc}

80200930 <__rt_entry>:
__rt_entry():
80200930:	f003 fa6a 	bl	80203e08 <_platform_pre_stackheap_init>

80200934 <__rt_entry_sh>:
__rt_entry_sh():
80200934:	f8df d00c 	ldr.w	sp, [pc, #12]	@ 80200944 <__lit__00000000>

80200938 <__rt_entry_li>:
__rt_entry_li():
80200938:	f7ff ffda 	bl	802008f0 <__rt_lib_init>

8020093c <__rt_entry_main>:
__rt_entry_main():
8020093c:	f003 fc02 	bl	80204144 <main>
80200940:	f001 fd58 	bl	802023f4 <exit>

80200944 <__lit__00000000>:
80200944:	0000 2010                                   ... 

80200948 <__rt_exit>:
__rt_exit():
80200948:	b403      	push	{r0, r1}

8020094a <__rt_exit_ls>:
__rt_exit_ls():
8020094a:	f7ff ffed 	bl	80200928 <__rt_lib_shutdown>

8020094e <__rt_exit_exit>:
__rt_exit_exit():
8020094e:	bc03      	pop	{r0, r1}
80200950:	f001 fd78 	bl	80202444 <_sys_exit>

80200954 <printf>:
printf():
80200954:	b40f      	push	{r0, r1, r2, r3}
80200956:	4904      	ldr	r1, [pc, #16]	@ (80200968 <printf+0x14>)
80200958:	b510      	push	{r4, lr}
8020095a:	aa03      	add	r2, sp, #12
8020095c:	9802      	ldr	r0, [sp, #8]
8020095e:	f000 f9ab 	bl	80200cb8 <_printf_char_file>
80200962:	bc10      	pop	{r4}
80200964:	f85d fb14 	ldr.w	pc, [sp], #20
80200968:	2000069c 	.word	0x2000069c

8020096c <_do_fflush>:
_do_fflush():
8020096c:	b570      	push	{r4, r5, r6, lr}
8020096e:	4604      	mov	r4, r0
80200970:	68c0      	ldr	r0, [r0, #12]
80200972:	0781      	lsls	r1, r0, #30
80200974:	d013      	beq.n	8020099e <_do_fflush+0x32>
80200976:	0680      	lsls	r0, r0, #26
80200978:	d501      	bpl.n	8020097e <_do_fflush+0x12>
8020097a:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
8020097c:	e004      	b.n	80200988 <_do_fflush+0x1c>
8020097e:	69a1      	ldr	r1, [r4, #24]
80200980:	6860      	ldr	r0, [r4, #4]
80200982:	4408      	add	r0, r1
80200984:	6921      	ldr	r1, [r4, #16]
80200986:	1a45      	subs	r5, r0, r1
80200988:	4620      	mov	r0, r4
8020098a:	f000 fd37 	bl	802013fc <_fflush>
8020098e:	2200      	movs	r2, #0
80200990:	4606      	mov	r6, r0
80200992:	4629      	mov	r1, r5
80200994:	4620      	mov	r0, r4
80200996:	f000 fc75 	bl	80201284 <_fseek>
8020099a:	4630      	mov	r0, r6
8020099c:	bd70      	pop	{r4, r5, r6, pc}
8020099e:	2000      	movs	r0, #0
802009a0:	bd70      	pop	{r4, r5, r6, pc}

802009a2 <fflush>:
fflush():
802009a2:	b570      	push	{r4, r5, r6, lr}
802009a4:	b110      	cbz	r0, 802009ac <fflush+0xa>
802009a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
802009aa:	e7df      	b.n	8020096c <_do_fflush>
802009ac:	2500      	movs	r5, #0
802009ae:	4c07      	ldr	r4, [pc, #28]	@ (802009cc <fflush+0x2a>)
802009b0:	1e6e      	subs	r6, r5, #1
802009b2:	e007      	b.n	802009c4 <fflush+0x22>
802009b4:	4620      	mov	r0, r4
802009b6:	f7ff ffd9 	bl	8020096c <_do_fflush>
802009ba:	b100      	cbz	r0, 802009be <fflush+0x1c>
802009bc:	4635      	mov	r5, r6
802009be:	6d20      	ldr	r0, [r4, #80]	@ 0x50
802009c0:	f020 0401 	bic.w	r4, r0, #1
802009c4:	2c00      	cmp	r4, #0
802009c6:	d1f5      	bne.n	802009b4 <fflush+0x12>
802009c8:	4628      	mov	r0, r5
802009ca:	bd70      	pop	{r4, r5, r6, pc}
802009cc:	20000648 	.word	0x20000648

802009d0 <putc>:
putc():
802009d0:	f004 be03 	b.w	802055da <fputc>

802009d4 <puts>:
puts():
802009d4:	b510      	push	{r4, lr}
802009d6:	4604      	mov	r4, r0
802009d8:	e003      	b.n	802009e2 <puts+0xe>
802009da:	f004 fdfe 	bl	802055da <fputc>
802009de:	1c40      	adds	r0, r0, #1
802009e0:	d009      	beq.n	802009f6 <puts+0x22>
802009e2:	f814 0b01 	ldrb.w	r0, [r4], #1
802009e6:	4905      	ldr	r1, [pc, #20]	@ (802009fc <puts+0x28>)
802009e8:	2800      	cmp	r0, #0
802009ea:	d1f6      	bne.n	802009da <puts+0x6>
802009ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
802009f0:	200a      	movs	r0, #10
802009f2:	f004 bdf2 	b.w	802055da <fputc>
802009f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
802009fa:	bd10      	pop	{r4, pc}
802009fc:	2000069c 	.word	0x2000069c

80200a00 <__rt_memcpy>:
__aeabi_memcpy():
80200a00:	2a03      	cmp	r2, #3
__rt_memcpy():
80200a02:	f240 8030 	bls.w	80200a66 <_memcpy_lastbytes>
80200a06:	f010 0c03 	ands.w	ip, r0, #3
80200a0a:	f000 8015 	beq.w	80200a38 <__rt_memcpy+0x38>
80200a0e:	f811 3b01 	ldrb.w	r3, [r1], #1
80200a12:	f1bc 0f02 	cmp.w	ip, #2
80200a16:	4462      	add	r2, ip
80200a18:	bf98      	it	ls
80200a1a:	f811 cb01 	ldrbls.w	ip, [r1], #1
80200a1e:	f800 3b01 	strb.w	r3, [r0], #1
80200a22:	bf38      	it	cc
80200a24:	f811 3b01 	ldrbcc.w	r3, [r1], #1
80200a28:	f1a2 0204 	sub.w	r2, r2, #4
80200a2c:	bf98      	it	ls
80200a2e:	f800 cb01 	strbls.w	ip, [r0], #1
80200a32:	bf38      	it	cc
80200a34:	f800 3b01 	strbcc.w	r3, [r0], #1
80200a38:	f011 0303 	ands.w	r3, r1, #3
80200a3c:	f000 85be 	beq.w	802015bc <__rt_memcpy_w>
80200a40:	3a08      	subs	r2, #8
80200a42:	f0c0 8008 	bcc.w	80200a56 <__rt_memcpy+0x56>
80200a46:	f851 3b04 	ldr.w	r3, [r1], #4
80200a4a:	3a08      	subs	r2, #8
80200a4c:	f851 cb04 	ldr.w	ip, [r1], #4
80200a50:	e8a0 1008 	stmia.w	r0!, {r3, ip}
80200a54:	e7f5      	b.n	80200a42 <__rt_memcpy+0x42>
80200a56:	1d12      	adds	r2, r2, #4
80200a58:	bf5c      	itt	pl
80200a5a:	f851 3b04 	ldrpl.w	r3, [r1], #4
80200a5e:	f840 3b04 	strpl.w	r3, [r0], #4
80200a62:	f3af 8000 	nop.w

80200a66 <_memcpy_lastbytes>:
_memcpy_lastbytes():
80200a66:	07d2      	lsls	r2, r2, #31
80200a68:	bf24      	itt	cs
80200a6a:	f811 3b01 	ldrbcs.w	r3, [r1], #1
80200a6e:	f811 cb01 	ldrbcs.w	ip, [r1], #1
80200a72:	bf48      	it	mi
80200a74:	f811 2b01 	ldrbmi.w	r2, [r1], #1
80200a78:	bf24      	itt	cs
80200a7a:	f800 3b01 	strbcs.w	r3, [r0], #1
80200a7e:	f800 cb01 	strbcs.w	ip, [r0], #1
80200a82:	bf48      	it	mi
80200a84:	f800 2b01 	strbmi.w	r2, [r0], #1
80200a88:	4770      	bx	lr

80200a8a <__aeabi_memclr4>:
__aeabi_memclr4():
80200a8a:	f04f 0200 	mov.w	r2, #0

80200a8e <_memset_w>:
_memset_w():
80200a8e:	b500      	push	{lr}
80200a90:	4613      	mov	r3, r2
80200a92:	4694      	mov	ip, r2
80200a94:	4696      	mov	lr, r2
80200a96:	3920      	subs	r1, #32
80200a98:	bf22      	ittt	cs
80200a9a:	e8a0 500c 	stmiacs.w	r0!, {r2, r3, ip, lr}
80200a9e:	e8a0 500c 	stmiacs.w	r0!, {r2, r3, ip, lr}
80200aa2:	f1b1 0120 	subscs.w	r1, r1, #32
80200aa6:	f4bf aff7 	bcs.w	80200a98 <_memset_w+0xa>
80200aaa:	0709      	lsls	r1, r1, #28
80200aac:	bf28      	it	cs
80200aae:	e8a0 500c 	stmiacs.w	r0!, {r2, r3, ip, lr}
80200ab2:	bf48      	it	mi
80200ab4:	c00c      	stmiami	r0!, {r2, r3}
80200ab6:	f85d eb04 	ldr.w	lr, [sp], #4
80200aba:	0089      	lsls	r1, r1, #2
80200abc:	bf28      	it	cs
80200abe:	f840 2b04 	strcs.w	r2, [r0], #4
80200ac2:	bf08      	it	eq
80200ac4:	4770      	bxeq	lr
80200ac6:	bf48      	it	mi
80200ac8:	f820 2b02 	strhmi.w	r2, [r0], #2
80200acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
80200ad0:	bf18      	it	ne
80200ad2:	f800 2b01 	strbne.w	r2, [r0], #1
80200ad6:	4770      	bx	lr

80200ad8 <strcmp>:
strcmp():
80200ad8:	b430      	push	{r4, r5}
80200ada:	f04f 3c01 	mov.w	ip, #16843009	@ 0x1010101
80200ade:	f850 2b04 	ldr.w	r2, [r0], #4
80200ae2:	f851 3b04 	ldr.w	r3, [r1], #4
80200ae6:	facc f452 	uqsub8	r4, ip, r2
80200aea:	1ad5      	subs	r5, r2, r3
80200aec:	d120      	bne.n	80200b30 <strcmp+0x58>
80200aee:	b9fc      	cbnz	r4, 80200b30 <strcmp+0x58>
80200af0:	f850 2b04 	ldr.w	r2, [r0], #4
80200af4:	f851 3b04 	ldr.w	r3, [r1], #4
80200af8:	facc f452 	uqsub8	r4, ip, r2
80200afc:	1ad5      	subs	r5, r2, r3
80200afe:	d117      	bne.n	80200b30 <strcmp+0x58>
80200b00:	b9b4      	cbnz	r4, 80200b30 <strcmp+0x58>
80200b02:	f850 2b04 	ldr.w	r2, [r0], #4
80200b06:	f851 3b04 	ldr.w	r3, [r1], #4
80200b0a:	facc f452 	uqsub8	r4, ip, r2
80200b0e:	1ad5      	subs	r5, r2, r3
80200b10:	d10e      	bne.n	80200b30 <strcmp+0x58>
80200b12:	b96c      	cbnz	r4, 80200b30 <strcmp+0x58>
80200b14:	f850 2b04 	ldr.w	r2, [r0], #4
80200b18:	f851 3b04 	ldr.w	r3, [r1], #4
80200b1c:	facc f452 	uqsub8	r4, ip, r2
80200b20:	1ad5      	subs	r5, r2, r3
80200b22:	d105      	bne.n	80200b30 <strcmp+0x58>
80200b24:	2c00      	cmp	r4, #0
80200b26:	d0da      	beq.n	80200ade <strcmp+0x6>
80200b28:	bc30      	pop	{r4, r5}
80200b2a:	f04f 0000 	mov.w	r0, #0
80200b2e:	4770      	bx	lr
80200b30:	ba29      	rev	r1, r5
80200b32:	fab1 f181 	clz	r1, r1
80200b36:	f011 0118 	ands.w	r1, r1, #24
80200b3a:	f1d1 0020 	rsbs	r0, r1, #32
80200b3e:	4084      	lsls	r4, r0
80200b40:	d1f2      	bne.n	80200b28 <strcmp+0x50>
80200b42:	40ca      	lsrs	r2, r1
80200b44:	40cb      	lsrs	r3, r1
80200b46:	f012 02ff 	ands.w	r2, r2, #255	@ 0xff
80200b4a:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
80200b4e:	bc30      	pop	{r4, r5}
80200b50:	1ad0      	subs	r0, r2, r3
80200b52:	4770      	bx	lr

80200b54 <_printf_pre_padding>:
_printf_pre_padding():
80200b54:	b570      	push	{r4, r5, r6, lr}
80200b56:	4604      	mov	r4, r0
80200b58:	6985      	ldr	r5, [r0, #24]
80200b5a:	6800      	ldr	r0, [r0, #0]
80200b5c:	06c1      	lsls	r1, r0, #27
80200b5e:	d501      	bpl.n	80200b64 <_printf_pre_padding+0x10>
80200b60:	2630      	movs	r6, #48	@ 0x30
80200b62:	e000      	b.n	80200b66 <_printf_pre_padding+0x12>
80200b64:	2620      	movs	r6, #32
80200b66:	07c0      	lsls	r0, r0, #31
80200b68:	d007      	beq.n	80200b7a <_printf_pre_padding+0x26>
80200b6a:	bd70      	pop	{r4, r5, r6, pc}
80200b6c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
80200b70:	4630      	mov	r0, r6
80200b72:	4790      	blx	r2
80200b74:	6a20      	ldr	r0, [r4, #32]
80200b76:	1c40      	adds	r0, r0, #1
80200b78:	6220      	str	r0, [r4, #32]
80200b7a:	1e6d      	subs	r5, r5, #1
80200b7c:	d5f6      	bpl.n	80200b6c <_printf_pre_padding+0x18>
80200b7e:	bd70      	pop	{r4, r5, r6, pc}

80200b80 <_printf_post_padding>:
_printf_post_padding():
80200b80:	b570      	push	{r4, r5, r6, lr}
80200b82:	4604      	mov	r4, r0
80200b84:	6985      	ldr	r5, [r0, #24]
80200b86:	7800      	ldrb	r0, [r0, #0]
80200b88:	07c0      	lsls	r0, r0, #31
80200b8a:	d107      	bne.n	80200b9c <_printf_post_padding+0x1c>
80200b8c:	bd70      	pop	{r4, r5, r6, pc}
80200b8e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
80200b92:	2020      	movs	r0, #32
80200b94:	4790      	blx	r2
80200b96:	6a20      	ldr	r0, [r4, #32]
80200b98:	1c40      	adds	r0, r0, #1
80200b9a:	6220      	str	r0, [r4, #32]
80200b9c:	1e6d      	subs	r5, r5, #1
80200b9e:	d5f6      	bpl.n	80200b8e <_printf_post_padding+0xe>
80200ba0:	bd70      	pop	{r4, r5, r6, pc}

80200ba2 <_printf_truncate_signed>:
_printf_truncate_signed():
80200ba2:	6809      	ldr	r1, [r1, #0]
80200ba4:	054a      	lsls	r2, r1, #21
80200ba6:	d501      	bpl.n	80200bac <_printf_truncate_signed+0xa>
80200ba8:	b240      	sxtb	r0, r0
80200baa:	4770      	bx	lr
80200bac:	05c9      	lsls	r1, r1, #23
80200bae:	d5fc      	bpl.n	80200baa <_printf_truncate_signed+0x8>
80200bb0:	b200      	sxth	r0, r0
80200bb2:	4770      	bx	lr

80200bb4 <_printf_truncate_unsigned>:
_printf_truncate_unsigned():
80200bb4:	6809      	ldr	r1, [r1, #0]
80200bb6:	054a      	lsls	r2, r1, #21
80200bb8:	d501      	bpl.n	80200bbe <_printf_truncate_unsigned+0xa>
80200bba:	b2c0      	uxtb	r0, r0
80200bbc:	4770      	bx	lr
80200bbe:	05c9      	lsls	r1, r1, #23
80200bc0:	d5fc      	bpl.n	80200bbc <_printf_truncate_unsigned+0x8>
80200bc2:	b280      	uxth	r0, r0
80200bc4:	4770      	bx	lr

80200bc6 <_printf_str>:
_printf_str():
80200bc6:	b570      	push	{r4, r5, r6, lr}
80200bc8:	460c      	mov	r4, r1
80200bca:	4605      	mov	r5, r0
80200bcc:	2a01      	cmp	r2, #1
80200bce:	d005      	beq.n	80200bdc <_printf_str+0x16>
80200bd0:	7828      	ldrb	r0, [r5, #0]
80200bd2:	0680      	lsls	r0, r0, #26
80200bd4:	d500      	bpl.n	80200bd8 <_printf_str+0x12>
80200bd6:	69ea      	ldr	r2, [r5, #28]
80200bd8:	2300      	movs	r3, #0
80200bda:	e002      	b.n	80200be2 <_printf_str+0x1c>
80200bdc:	2301      	movs	r3, #1
80200bde:	e005      	b.n	80200bec <_printf_str+0x26>
80200be0:	1c5b      	adds	r3, r3, #1
80200be2:	4293      	cmp	r3, r2
80200be4:	d202      	bcs.n	80200bec <_printf_str+0x26>
80200be6:	5ce0      	ldrb	r0, [r4, r3]
80200be8:	2800      	cmp	r0, #0
80200bea:	d1f9      	bne.n	80200be0 <_printf_str+0x1a>
80200bec:	69a8      	ldr	r0, [r5, #24]
80200bee:	18e6      	adds	r6, r4, r3
80200bf0:	1ac0      	subs	r0, r0, r3
80200bf2:	61a8      	str	r0, [r5, #24]
80200bf4:	6a28      	ldr	r0, [r5, #32]
80200bf6:	4418      	add	r0, r3
80200bf8:	6228      	str	r0, [r5, #32]
80200bfa:	4628      	mov	r0, r5
80200bfc:	f7ff ffaa 	bl	80200b54 <_printf_pre_padding>
80200c00:	e004      	b.n	80200c0c <_printf_str+0x46>
80200c02:	e9d5 2101 	ldrd	r2, r1, [r5, #4]
80200c06:	f814 0b01 	ldrb.w	r0, [r4], #1
80200c0a:	4790      	blx	r2
80200c0c:	42b4      	cmp	r4, r6
80200c0e:	d3f8      	bcc.n	80200c02 <_printf_str+0x3c>
80200c10:	4628      	mov	r0, r5
80200c12:	f7ff ffb5 	bl	80200b80 <_printf_post_padding>
80200c16:	bd70      	pop	{r4, r5, r6, pc}

80200c18 <_printf_int_dec>:
_printf_int_dec():
80200c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
80200c1c:	4606      	mov	r6, r0
80200c1e:	2400      	movs	r4, #0
80200c20:	6810      	ldr	r0, [r2, #0]
80200c22:	2975      	cmp	r1, #117	@ 0x75
80200c24:	4631      	mov	r1, r6
80200c26:	a516      	add	r5, pc, #88	@ (adr r5, 80200c80 <_printf_int_dec+0x68>)
80200c28:	d010      	beq.n	80200c4c <_printf_int_dec+0x34>
80200c2a:	f7ff ffba 	bl	80200ba2 <_printf_truncate_signed>
80200c2e:	2800      	cmp	r0, #0
80200c30:	da02      	bge.n	80200c38 <_printf_int_dec+0x20>
80200c32:	4240      	negs	r0, r0
80200c34:	a513      	add	r5, pc, #76	@ (adr r5, 80200c84 <_printf_int_dec+0x6c>)
80200c36:	e007      	b.n	80200c48 <_printf_int_dec+0x30>
80200c38:	6831      	ldr	r1, [r6, #0]
80200c3a:	078a      	lsls	r2, r1, #30
80200c3c:	d501      	bpl.n	80200c42 <_printf_int_dec+0x2a>
80200c3e:	a512      	add	r5, pc, #72	@ (adr r5, 80200c88 <_printf_int_dec+0x70>)
80200c40:	e002      	b.n	80200c48 <_printf_int_dec+0x30>
80200c42:	0749      	lsls	r1, r1, #29
80200c44:	d504      	bpl.n	80200c50 <_printf_int_dec+0x38>
80200c46:	a511      	add	r5, pc, #68	@ (adr r5, 80200c8c <_printf_int_dec+0x74>)
80200c48:	2401      	movs	r4, #1
80200c4a:	e001      	b.n	80200c50 <_printf_int_dec+0x38>
80200c4c:	f7ff ffb2 	bl	80200bb4 <_printf_truncate_unsigned>
80200c50:	2100      	movs	r1, #0
80200c52:	220a      	movs	r2, #10
80200c54:	f106 0724 	add.w	r7, r6, #36	@ 0x24
80200c58:	e009      	b.n	80200c6e <_printf_int_dec+0x56>
80200c5a:	fbb0 fcf2 	udiv	ip, r0, r2
80200c5e:	fbb0 f3f2 	udiv	r3, r0, r2
80200c62:	fb02 001c 	mls	r0, r2, ip, r0
80200c66:	3030      	adds	r0, #48	@ 0x30
80200c68:	5478      	strb	r0, [r7, r1]
80200c6a:	4618      	mov	r0, r3
80200c6c:	1c49      	adds	r1, r1, #1
80200c6e:	2800      	cmp	r0, #0
80200c70:	d1f3      	bne.n	80200c5a <_printf_int_dec+0x42>
80200c72:	4623      	mov	r3, r4
80200c74:	462a      	mov	r2, r5
80200c76:	4630      	mov	r0, r6
80200c78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
80200c7c:	f000 bd6b 	b.w	80201756 <_printf_int_common>
80200c80:	00000000 	.word	0x00000000
80200c84:	0000002d 	.word	0x0000002d
80200c88:	0000002b 	.word	0x0000002b
80200c8c:	00000020 	.word	0x00000020

80200c90 <_printf_charcount>:
_printf_charcount():
80200c90:	6811      	ldr	r1, [r2, #0]
80200c92:	6802      	ldr	r2, [r0, #0]
80200c94:	6a00      	ldr	r0, [r0, #32]
80200c96:	0553      	lsls	r3, r2, #21
80200c98:	d501      	bpl.n	80200c9e <_printf_charcount+0xe>
80200c9a:	7008      	strb	r0, [r1, #0]
80200c9c:	e00a      	b.n	80200cb4 <_printf_charcount+0x24>
80200c9e:	05d3      	lsls	r3, r2, #23
80200ca0:	d501      	bpl.n	80200ca6 <_printf_charcount+0x16>
80200ca2:	8008      	strh	r0, [r1, #0]
80200ca4:	e006      	b.n	80200cb4 <_printf_charcount+0x24>
80200ca6:	0613      	lsls	r3, r2, #24
80200ca8:	d503      	bpl.n	80200cb2 <_printf_charcount+0x22>
80200caa:	17c2      	asrs	r2, r0, #31
80200cac:	e9c1 0200 	strd	r0, r2, [r1]
80200cb0:	e000      	b.n	80200cb4 <_printf_charcount+0x24>
80200cb2:	6008      	str	r0, [r1, #0]
80200cb4:	2001      	movs	r0, #1
80200cb6:	4770      	bx	lr

80200cb8 <_printf_char_file>:
_printf_char_file():
80200cb8:	4b07      	ldr	r3, [pc, #28]	@ (80200cd8 <_printf_char_file+0x20>)
80200cba:	b570      	push	{r4, r5, r6, lr}
80200cbc:	460d      	mov	r5, r1
80200cbe:	447b      	add	r3, pc
80200cc0:	f001 f933 	bl	80201f2a <_printf_char_common>
80200cc4:	4604      	mov	r4, r0
80200cc6:	4628      	mov	r0, r5
80200cc8:	f001 f96e 	bl	80201fa8 <ferror>
80200ccc:	b110      	cbz	r0, 80200cd4 <_printf_char_file+0x1c>
80200cce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
80200cd2:	bd70      	pop	{r4, r5, r6, pc}
80200cd4:	4620      	mov	r0, r4
80200cd6:	bd70      	pop	{r4, r5, r6, pc}
80200cd8:	00004919 	.word	0x00004919

80200cdc <_printf_wctomb>:
_printf_wctomb():
80200cdc:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
80200ce0:	4615      	mov	r5, r2
80200ce2:	468a      	mov	sl, r1
80200ce4:	4604      	mov	r4, r0
80200ce6:	f8df 80ac 	ldr.w	r8, [pc, #172]	@ 80200d94 <_printf_wctomb+0xb8>
80200cea:	44f8      	add	r8, pc
80200cec:	2700      	movs	r7, #0
80200cee:	e9d8 1000 	ldrd	r1, r0, [r8]
80200cf2:	463e      	mov	r6, r7
80200cf4:	e9cd 1000 	strd	r1, r0, [sp]
80200cf8:	e010      	b.n	80200d1c <_printf_wctomb+0x40>
80200cfa:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
80200cfe:	466a      	mov	r2, sp
80200d00:	a802      	add	r0, sp, #8
80200d02:	f001 fa37 	bl	80202174 <_c32rtomb>
80200d06:	1c41      	adds	r1, r0, #1
80200d08:	d007      	beq.n	80200d1a <_printf_wctomb+0x3e>
80200d0a:	7821      	ldrb	r1, [r4, #0]
80200d0c:	0689      	lsls	r1, r1, #26
80200d0e:	d503      	bpl.n	80200d18 <_printf_wctomb+0x3c>
80200d10:	69e2      	ldr	r2, [r4, #28]
80200d12:	1839      	adds	r1, r7, r0
80200d14:	4291      	cmp	r1, r2
80200d16:	d80d      	bhi.n	80200d34 <_printf_wctomb+0x58>
80200d18:	4407      	add	r7, r0
80200d1a:	1c76      	adds	r6, r6, #1
80200d1c:	7820      	ldrb	r0, [r4, #0]
80200d1e:	0680      	lsls	r0, r0, #26
80200d20:	d502      	bpl.n	80200d28 <_printf_wctomb+0x4c>
80200d22:	69e0      	ldr	r0, [r4, #28]
80200d24:	42b8      	cmp	r0, r7
80200d26:	dd05      	ble.n	80200d34 <_printf_wctomb+0x58>
80200d28:	42ae      	cmp	r6, r5
80200d2a:	dbe6      	blt.n	80200cfa <_printf_wctomb+0x1e>
80200d2c:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
80200d30:	2800      	cmp	r0, #0
80200d32:	d1e2      	bne.n	80200cfa <_printf_wctomb+0x1e>
80200d34:	69a0      	ldr	r0, [r4, #24]
80200d36:	1bc0      	subs	r0, r0, r7
80200d38:	61a0      	str	r0, [r4, #24]
80200d3a:	4620      	mov	r0, r4
80200d3c:	f7ff ff0a 	bl	80200b54 <_printf_pre_padding>
80200d40:	e9d8 1000 	ldrd	r1, r0, [r8]
80200d44:	e9cd 1000 	strd	r1, r0, [sp]
80200d48:	2000      	movs	r0, #0
80200d4a:	e017      	b.n	80200d7c <_printf_wctomb+0xa0>
80200d4c:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
80200d50:	466a      	mov	r2, sp
80200d52:	a802      	add	r0, sp, #8
80200d54:	f001 fa0e 	bl	80202174 <_c32rtomb>
80200d58:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
80200d5c:	4681      	mov	r9, r0
80200d5e:	d00b      	beq.n	80200d78 <_printf_wctomb+0x9c>
80200d60:	2500      	movs	r5, #0
80200d62:	f10d 0b08 	add.w	fp, sp, #8
80200d66:	e005      	b.n	80200d74 <_printf_wctomb+0x98>
80200d68:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
80200d6c:	f81b 0005 	ldrb.w	r0, [fp, r5]
80200d70:	4790      	blx	r2
80200d72:	1c6d      	adds	r5, r5, #1
80200d74:	454d      	cmp	r5, r9
80200d76:	d3f7      	bcc.n	80200d68 <_printf_wctomb+0x8c>
80200d78:	f108 0001 	add.w	r0, r8, #1
80200d7c:	42b0      	cmp	r0, r6
80200d7e:	4680      	mov	r8, r0
80200d80:	dbe4      	blt.n	80200d4c <_printf_wctomb+0x70>
80200d82:	6a20      	ldr	r0, [r4, #32]
80200d84:	4438      	add	r0, r7
80200d86:	6220      	str	r0, [r4, #32]
80200d88:	4620      	mov	r0, r4
80200d8a:	f7ff fef9 	bl	80200b80 <_printf_post_padding>
80200d8e:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
80200d92:	0000      	.short	0x0000
80200d94:	00004996 	.word	0x00004996

80200d98 <_printf_longlong_dec>:
_printf_longlong_dec():
80200d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
80200d9c:	4680      	mov	r8, r0
80200d9e:	1dd2      	adds	r2, r2, #7
80200da0:	f022 0207 	bic.w	r2, r2, #7
80200da4:	2500      	movs	r5, #0
80200da6:	e9d2 0200 	ldrd	r0, r2, [r2]
80200daa:	29f5      	cmp	r1, #245	@ 0xf5
80200dac:	a615      	add	r6, pc, #84	@ (adr r6, 80200e04 <_printf_longlong_dec+0x6c>)
80200dae:	d014      	beq.n	80200dda <_printf_longlong_dec+0x42>
80200db0:	1e01      	subs	r1, r0, #0
80200db2:	f172 0100 	sbcs.w	r1, r2, #0
80200db6:	da06      	bge.n	80200dc6 <_printf_longlong_dec+0x2e>
80200db8:	2300      	movs	r3, #0
80200dba:	ebd0 0003 	rsbs	r0, r0, r3
80200dbe:	eb63 0202 	sbc.w	r2, r3, r2
80200dc2:	a611      	add	r6, pc, #68	@ (adr r6, 80200e08 <_printf_longlong_dec+0x70>)
80200dc4:	e008      	b.n	80200dd8 <_printf_longlong_dec+0x40>
80200dc6:	f8d8 1000 	ldr.w	r1, [r8]
80200dca:	078b      	lsls	r3, r1, #30
80200dcc:	d501      	bpl.n	80200dd2 <_printf_longlong_dec+0x3a>
80200dce:	a60f      	add	r6, pc, #60	@ (adr r6, 80200e0c <_printf_longlong_dec+0x74>)
80200dd0:	e002      	b.n	80200dd8 <_printf_longlong_dec+0x40>
80200dd2:	0749      	lsls	r1, r1, #29
80200dd4:	d501      	bpl.n	80200dda <_printf_longlong_dec+0x42>
80200dd6:	a60e      	add	r6, pc, #56	@ (adr r6, 80200e10 <_printf_longlong_dec+0x78>)
80200dd8:	2501      	movs	r5, #1
80200dda:	4611      	mov	r1, r2
80200ddc:	2400      	movs	r4, #0
80200dde:	f108 0724 	add.w	r7, r8, #36	@ 0x24
80200de2:	e004      	b.n	80200dee <_printf_longlong_dec+0x56>
80200de4:	f000 fc72 	bl	802016cc <_ll_udiv10>
80200de8:	3230      	adds	r2, #48	@ 0x30
80200dea:	553a      	strb	r2, [r7, r4]
80200dec:	1c64      	adds	r4, r4, #1
80200dee:	ea50 0201 	orrs.w	r2, r0, r1
80200df2:	d1f7      	bne.n	80200de4 <_printf_longlong_dec+0x4c>
80200df4:	462b      	mov	r3, r5
80200df6:	4632      	mov	r2, r6
80200df8:	4621      	mov	r1, r4
80200dfa:	4640      	mov	r0, r8
80200dfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
80200e00:	f000 bca9 	b.w	80201756 <_printf_int_common>
80200e04:	00000000 	.word	0x00000000
80200e08:	0000002d 	.word	0x0000002d
80200e0c:	0000002b 	.word	0x0000002b
80200e10:	00000020 	.word	0x00000020

80200e14 <_printf_longlong_oct>:
_printf_longlong_oct_internal():
80200e14:	b430      	push	{r4, r5}
_printf_longlong_oct():
80200e16:	2100      	movs	r1, #0
80200e18:	f100 0424 	add.w	r4, r0, #36	@ 0x24
80200e1c:	e008      	b.n	80200e30 <_printf_longlong_oct+0x1c>
80200e1e:	f002 0507 	and.w	r5, r2, #7
80200e22:	08d2      	lsrs	r2, r2, #3
80200e24:	3530      	adds	r5, #48	@ 0x30
80200e26:	ea42 7243 	orr.w	r2, r2, r3, lsl #29
80200e2a:	08db      	lsrs	r3, r3, #3
80200e2c:	5465      	strb	r5, [r4, r1]
80200e2e:	1c49      	adds	r1, r1, #1
80200e30:	ea52 0503 	orrs.w	r5, r2, r3
80200e34:	d1f3      	bne.n	80200e1e <_printf_longlong_oct+0xa>
80200e36:	6804      	ldr	r4, [r0, #0]
80200e38:	2300      	movs	r3, #0
80200e3a:	a210      	add	r2, pc, #64	@ (adr r2, 80200e7c <_printf_ll_oct+0xc>)
80200e3c:	0725      	lsls	r5, r4, #28
80200e3e:	d508      	bpl.n	80200e52 <_printf_longlong_oct+0x3e>
80200e40:	f004 0420 	and.w	r4, r4, #32
80200e44:	430c      	orrs	r4, r1
80200e46:	d004      	beq.n	80200e52 <_printf_longlong_oct+0x3e>
80200e48:	69c4      	ldr	r4, [r0, #28]
80200e4a:	2301      	movs	r3, #1
80200e4c:	a20c      	add	r2, pc, #48	@ (adr r2, 80200e80 <_printf_ll_oct+0x10>)
80200e4e:	1e64      	subs	r4, r4, #1
80200e50:	61c4      	str	r4, [r0, #28]
80200e52:	bc30      	pop	{r4, r5}
80200e54:	f000 bc7f 	b.w	80201756 <_printf_int_common>

80200e58 <_printf_int_oct>:
_printf_int_oct():
80200e58:	b510      	push	{r4, lr}
80200e5a:	4604      	mov	r4, r0
80200e5c:	4621      	mov	r1, r4
80200e5e:	6810      	ldr	r0, [r2, #0]
80200e60:	f7ff fea8 	bl	80200bb4 <_printf_truncate_unsigned>
80200e64:	4602      	mov	r2, r0
80200e66:	4620      	mov	r0, r4
80200e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
80200e6c:	2300      	movs	r3, #0
80200e6e:	e7d1      	b.n	80200e14 <_printf_longlong_oct>

80200e70 <_printf_ll_oct>:
_printf_ll_oct():
80200e70:	1dd2      	adds	r2, r2, #7
80200e72:	f022 0107 	bic.w	r1, r2, #7
80200e76:	e9d1 2300 	ldrd	r2, r3, [r1]
80200e7a:	e7cb      	b.n	80200e14 <_printf_longlong_oct>
80200e7c:	00000000 	.word	0x00000000
80200e80:	00000030 	.word	0x00000030

80200e84 <_printf_longlong_hex>:
_printf_hex_common():
80200e84:	b4f0      	push	{r4, r5, r6, r7}
_printf_longlong_hex():
80200e86:	460d      	mov	r5, r1
80200e88:	8801      	ldrh	r1, [r0, #0]
80200e8a:	0509      	lsls	r1, r1, #20
80200e8c:	d502      	bpl.n	80200e94 <_printf_longlong_hex+0x10>
80200e8e:	4c21      	ldr	r4, [pc, #132]	@ (80200f14 <_printf_hex_ptr+0x12>)
80200e90:	447c      	add	r4, pc
80200e92:	e002      	b.n	80200e9a <_printf_longlong_hex+0x16>
80200e94:	4c1f      	ldr	r4, [pc, #124]	@ (80200f14 <_printf_hex_ptr+0x12>)
80200e96:	447c      	add	r4, pc
80200e98:	340e      	adds	r4, #14
80200e9a:	2100      	movs	r1, #0
80200e9c:	f100 0624 	add.w	r6, r0, #36	@ 0x24
80200ea0:	e008      	b.n	80200eb4 <_printf_longlong_hex+0x30>
80200ea2:	f002 070f 	and.w	r7, r2, #15
80200ea6:	0912      	lsrs	r2, r2, #4
80200ea8:	5de7      	ldrb	r7, [r4, r7]
80200eaa:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
80200eae:	091b      	lsrs	r3, r3, #4
80200eb0:	5477      	strb	r7, [r6, r1]
80200eb2:	1c49      	adds	r1, r1, #1
80200eb4:	ea52 0703 	orrs.w	r7, r2, r3
80200eb8:	d1f3      	bne.n	80200ea2 <_printf_longlong_hex+0x1e>
80200eba:	7802      	ldrb	r2, [r0, #0]
80200ebc:	2300      	movs	r3, #0
80200ebe:	0712      	lsls	r2, r2, #28
80200ec0:	d504      	bpl.n	80200ecc <_printf_longlong_hex+0x48>
80200ec2:	2d70      	cmp	r5, #112	@ 0x70
80200ec4:	d006      	beq.n	80200ed4 <_printf_longlong_hex+0x50>
80200ec6:	b109      	cbz	r1, 80200ecc <_printf_longlong_hex+0x48>
80200ec8:	2302      	movs	r3, #2
80200eca:	3411      	adds	r4, #17
80200ecc:	4622      	mov	r2, r4
80200ece:	bcf0      	pop	{r4, r5, r6, r7}
80200ed0:	f000 bc41 	b.w	80201756 <_printf_int_common>
80200ed4:	2301      	movs	r3, #1
80200ed6:	3410      	adds	r4, #16
80200ed8:	e7f8      	b.n	80200ecc <_printf_longlong_hex+0x48>

80200eda <_printf_int_hex>:
_printf_int_hex():
80200eda:	b570      	push	{r4, r5, r6, lr}
80200edc:	4604      	mov	r4, r0
80200ede:	460d      	mov	r5, r1
80200ee0:	4621      	mov	r1, r4
80200ee2:	6810      	ldr	r0, [r2, #0]
80200ee4:	f7ff fe66 	bl	80200bb4 <_printf_truncate_unsigned>
80200ee8:	4602      	mov	r2, r0
80200eea:	4629      	mov	r1, r5
80200eec:	4620      	mov	r0, r4
80200eee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
80200ef2:	2300      	movs	r3, #0
80200ef4:	e7c6      	b.n	80200e84 <_printf_longlong_hex>

80200ef6 <_printf_ll_hex>:
_printf_ll_hex():
80200ef6:	1dd2      	adds	r2, r2, #7
80200ef8:	f022 0307 	bic.w	r3, r2, #7
80200efc:	e9d3 2300 	ldrd	r2, r3, [r3]
80200f00:	e7c0      	b.n	80200e84 <_printf_longlong_hex>

80200f02 <_printf_hex_ptr>:
_printf_hex_ptr():
80200f02:	6803      	ldr	r3, [r0, #0]
80200f04:	6812      	ldr	r2, [r2, #0]
80200f06:	f043 0320 	orr.w	r3, r3, #32
80200f0a:	6003      	str	r3, [r0, #0]
80200f0c:	2308      	movs	r3, #8
80200f0e:	61c3      	str	r3, [r0, #28]
80200f10:	2300      	movs	r3, #0
80200f12:	e7b7      	b.n	80200e84 <_printf_longlong_hex>
80200f14:	000047f8 	.word	0x000047f8

80200f18 <__printf>:
__printf():
80200f18:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
80200f1c:	4689      	mov	r9, r1
80200f1e:	4604      	mov	r4, r0
80200f20:	f04f 0a00 	mov.w	sl, #0
80200f24:	f8df b174 	ldr.w	fp, [pc, #372]	@ 8020109c <__printf+0x184>
80200f28:	44fb      	add	fp, pc
80200f2a:	f8c0 a020 	str.w	sl, [r0, #32]
80200f2e:	4620      	mov	r0, r4
80200f30:	68e1      	ldr	r1, [r4, #12]
80200f32:	4788      	blx	r1
80200f34:	2800      	cmp	r0, #0
80200f36:	d074      	beq.n	80201022 <__printf+0x10a>
80200f38:	2825      	cmp	r0, #37	@ 0x25
80200f3a:	d006      	beq.n	80200f4a <__printf+0x32>
80200f3c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
80200f40:	4790      	blx	r2
80200f42:	6a20      	ldr	r0, [r4, #32]
80200f44:	1c40      	adds	r0, r0, #1
80200f46:	6220      	str	r0, [r4, #32]
80200f48:	e7f1      	b.n	80200f2e <__printf+0x16>
80200f4a:	2600      	movs	r6, #0
80200f4c:	465f      	mov	r7, fp
80200f4e:	4620      	mov	r0, r4
80200f50:	68e1      	ldr	r1, [r4, #12]
80200f52:	4788      	blx	r1
80200f54:	2820      	cmp	r0, #32
80200f56:	4605      	mov	r5, r0
80200f58:	db07      	blt.n	80200f6a <__printf+0x52>
80200f5a:	2d31      	cmp	r5, #49	@ 0x31
80200f5c:	d205      	bcs.n	80200f6a <__printf+0x52>
80200f5e:	1978      	adds	r0, r7, r5
80200f60:	f810 0c20 	ldrb.w	r0, [r0, #-32]
80200f64:	b108      	cbz	r0, 80200f6a <__printf+0x52>
80200f66:	4306      	orrs	r6, r0
80200f68:	e7f1      	b.n	80200f4e <__printf+0x36>
80200f6a:	07b0      	lsls	r0, r6, #30
80200f6c:	d501      	bpl.n	80200f72 <__printf+0x5a>
80200f6e:	f026 0604 	bic.w	r6, r6, #4
80200f72:	f8c4 a01c 	str.w	sl, [r4, #28]
80200f76:	2700      	movs	r7, #0
80200f78:	f8c4 a018 	str.w	sl, [r4, #24]
80200f7c:	2d2a      	cmp	r5, #42	@ 0x2a
80200f7e:	d009      	beq.n	80200f94 <__printf+0x7c>
80200f80:	4628      	mov	r0, r5
80200f82:	f004 fb23 	bl	802055cc <_is_digit>
80200f86:	b338      	cbz	r0, 80200fd8 <__printf+0xc0>
80200f88:	eb04 0887 	add.w	r8, r4, r7, lsl #2
80200f8c:	3d30      	subs	r5, #48	@ 0x30
80200f8e:	f8c8 5018 	str.w	r5, [r8, #24]
80200f92:	e019      	b.n	80200fc8 <__printf+0xb0>
80200f94:	f859 1b04 	ldr.w	r1, [r9], #4
80200f98:	4620      	mov	r0, r4
80200f9a:	eb04 0287 	add.w	r2, r4, r7, lsl #2
80200f9e:	6191      	str	r1, [r2, #24]
80200fa0:	68e1      	ldr	r1, [r4, #12]
80200fa2:	4788      	blx	r1
80200fa4:	2f01      	cmp	r7, #1
80200fa6:	4605      	mov	r5, r0
80200fa8:	d118      	bne.n	80200fdc <__printf+0xc4>
80200faa:	69e0      	ldr	r0, [r4, #28]
80200fac:	2800      	cmp	r0, #0
80200fae:	da20      	bge.n	80200ff2 <__printf+0xda>
80200fb0:	f026 0620 	bic.w	r6, r6, #32
80200fb4:	e01d      	b.n	80200ff2 <__printf+0xda>
80200fb6:	f8d8 0018 	ldr.w	r0, [r8, #24]
80200fba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
80200fbe:	eb05 0040 	add.w	r0, r5, r0, lsl #1
80200fc2:	3830      	subs	r0, #48	@ 0x30
80200fc4:	f8c8 0018 	str.w	r0, [r8, #24]
80200fc8:	4620      	mov	r0, r4
80200fca:	68e1      	ldr	r1, [r4, #12]
80200fcc:	4788      	blx	r1
80200fce:	4605      	mov	r5, r0
80200fd0:	f004 fafc 	bl	802055cc <_is_digit>
80200fd4:	2800      	cmp	r0, #0
80200fd6:	d1ee      	bne.n	80200fb6 <__printf+0x9e>
80200fd8:	2f01      	cmp	r7, #1
80200fda:	d00a      	beq.n	80200ff2 <__printf+0xda>
80200fdc:	2d2e      	cmp	r5, #46	@ 0x2e
80200fde:	d108      	bne.n	80200ff2 <__printf+0xda>
80200fe0:	4620      	mov	r0, r4
80200fe2:	68e1      	ldr	r1, [r4, #12]
80200fe4:	4788      	blx	r1
80200fe6:	1c7f      	adds	r7, r7, #1
80200fe8:	4605      	mov	r5, r0
80200fea:	2f02      	cmp	r7, #2
80200fec:	f046 0620 	orr.w	r6, r6, #32
80200ff0:	dbc4      	blt.n	80200f7c <__printf+0x64>
80200ff2:	69a0      	ldr	r0, [r4, #24]
80200ff4:	2800      	cmp	r0, #0
80200ff6:	da03      	bge.n	80201000 <__printf+0xe8>
80200ff8:	4240      	negs	r0, r0
80200ffa:	f046 0601 	orr.w	r6, r6, #1
80200ffe:	61a0      	str	r0, [r4, #24]
80201000:	07f0      	lsls	r0, r6, #31
80201002:	d001      	beq.n	80201008 <__printf+0xf0>
80201004:	f026 0610 	bic.w	r6, r6, #16
80201008:	2d6c      	cmp	r5, #108	@ 0x6c
8020100a:	d00b      	beq.n	80201024 <__printf+0x10c>
8020100c:	2d68      	cmp	r5, #104	@ 0x68
8020100e:	d009      	beq.n	80201024 <__printf+0x10c>
80201010:	2d4c      	cmp	r5, #76	@ 0x4c
80201012:	d039      	beq.n	80201088 <__printf+0x170>
80201014:	2d6a      	cmp	r5, #106	@ 0x6a
80201016:	d035      	beq.n	80201084 <__printf+0x16c>
80201018:	2d74      	cmp	r5, #116	@ 0x74
8020101a:	d035      	beq.n	80201088 <__printf+0x170>
8020101c:	2d7a      	cmp	r5, #122	@ 0x7a
8020101e:	d033      	beq.n	80201088 <__printf+0x170>
80201020:	e016      	b.n	80201050 <__printf+0x138>
80201022:	e038      	b.n	80201096 <__printf+0x17e>
80201024:	68e1      	ldr	r1, [r4, #12]
80201026:	462f      	mov	r7, r5
80201028:	4620      	mov	r0, r4
8020102a:	4788      	blx	r1
8020102c:	42b8      	cmp	r0, r7
8020102e:	4605      	mov	r5, r0
80201030:	d109      	bne.n	80201046 <__printf+0x12e>
80201032:	2f6c      	cmp	r7, #108	@ 0x6c
80201034:	d026      	beq.n	80201084 <__printf+0x16c>
80201036:	f44f 6080 	mov.w	r0, #1024	@ 0x400
8020103a:	68e1      	ldr	r1, [r4, #12]
8020103c:	4306      	orrs	r6, r0
8020103e:	4620      	mov	r0, r4
80201040:	4788      	blx	r1
80201042:	4605      	mov	r5, r0
80201044:	e004      	b.n	80201050 <__printf+0x138>
80201046:	2f6c      	cmp	r7, #108	@ 0x6c
80201048:	d01a      	beq.n	80201080 <__printf+0x168>
8020104a:	f44f 7080 	mov.w	r0, #256	@ 0x100
8020104e:	4306      	orrs	r6, r0
80201050:	b30d      	cbz	r5, 80201096 <__printf+0x17e>
80201052:	f1a5 0041 	sub.w	r0, r5, #65	@ 0x41
80201056:	2819      	cmp	r0, #25
80201058:	d802      	bhi.n	80201060 <__printf+0x148>
8020105a:	3520      	adds	r5, #32
8020105c:	f446 6600 	orr.w	r6, r6, #2048	@ 0x800
80201060:	464a      	mov	r2, r9
80201062:	4629      	mov	r1, r5
80201064:	4620      	mov	r0, r4
80201066:	6026      	str	r6, [r4, #0]
80201068:	464e      	mov	r6, r9
8020106a:	f7ff fbf9 	bl	80200860 <_printf_n>
8020106e:	b180      	cbz	r0, 80201092 <__printf+0x17a>
80201070:	2801      	cmp	r0, #1
80201072:	d00b      	beq.n	8020108c <__printf+0x174>
80201074:	1df6      	adds	r6, r6, #7
80201076:	f026 0007 	bic.w	r0, r6, #7
8020107a:	f100 0908 	add.w	r9, r0, #8
8020107e:	e756      	b.n	80200f2e <__printf+0x16>
80201080:	2040      	movs	r0, #64	@ 0x40
80201082:	e7e4      	b.n	8020104e <__printf+0x136>
80201084:	2080      	movs	r0, #128	@ 0x80
80201086:	e7d8      	b.n	8020103a <__printf+0x122>
80201088:	2000      	movs	r0, #0
8020108a:	e7d6      	b.n	8020103a <__printf+0x122>
8020108c:	f106 0904 	add.w	r9, r6, #4
80201090:	e74d      	b.n	80200f2e <__printf+0x16>
80201092:	4628      	mov	r0, r5
80201094:	e752      	b.n	80200f3c <__printf+0x24>
80201096:	6a20      	ldr	r0, [r4, #32]
80201098:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
8020109c:	00004788 	.word	0x00004788

802010a0 <__flsbuf>:
__flsbuf_byte():
802010a0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
__flsbuf():
802010a4:	4605      	mov	r5, r0
802010a6:	4617      	mov	r7, r2
802010a8:	460c      	mov	r4, r1
802010aa:	68c8      	ldr	r0, [r1, #12]
802010ac:	f420 1020 	bic.w	r0, r0, #2621440	@ 0x280000
802010b0:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
802010b4:	60c8      	str	r0, [r1, #12]
802010b6:	0680      	lsls	r0, r0, #26
802010b8:	d502      	bpl.n	802010c0 <__flsbuf+0x20>
802010ba:	4608      	mov	r0, r1
802010bc:	f000 f9c1 	bl	80201442 <_deferredlazyseek>
802010c0:	68e0      	ldr	r0, [r4, #12]
802010c2:	f241 0182 	movw	r1, #4226	@ 0x1082
802010c6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
802010ca:	4001      	ands	r1, r0
802010cc:	2902      	cmp	r1, #2
802010ce:	d003      	beq.n	802010d8 <__flsbuf+0x38>
802010d0:	4620      	mov	r0, r4
802010d2:	f000 f953 	bl	8020137c <_seterr>
802010d6:	e0b9      	b.n	8020124c <__flsbuf+0x1ac>
802010d8:	f400 4120 	and.w	r1, r0, #40960	@ 0xa000
802010dc:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
802010e0:	d10f      	bne.n	80201102 <__flsbuf+0x62>
802010e2:	03c0      	lsls	r0, r0, #15
802010e4:	d506      	bpl.n	802010f4 <__flsbuf+0x54>
802010e6:	6861      	ldr	r1, [r4, #4]
802010e8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
802010ea:	4288      	cmp	r0, r1
802010ec:	d800      	bhi.n	802010f0 <__flsbuf+0x50>
802010ee:	4608      	mov	r0, r1
802010f0:	6060      	str	r0, [r4, #4]
802010f2:	e006      	b.n	80201102 <__flsbuf+0x62>
802010f4:	6920      	ldr	r0, [r4, #16]
802010f6:	62e0      	str	r0, [r4, #44]	@ 0x2c
802010f8:	6060      	str	r0, [r4, #4]
802010fa:	6960      	ldr	r0, [r4, #20]
802010fc:	f002 feda 	bl	80203eb4 <_sys_flen>
80201100:	61a0      	str	r0, [r4, #24]
80201102:	68a0      	ldr	r0, [r4, #8]
80201104:	2200      	movs	r2, #0
80201106:	b2ee      	uxtb	r6, r5
80201108:	2800      	cmp	r0, #0
8020110a:	da0d      	bge.n	80201128 <__flsbuf+0x88>
8020110c:	68e1      	ldr	r1, [r4, #12]
8020110e:	058b      	lsls	r3, r1, #22
80201110:	d40a      	bmi.n	80201128 <__flsbuf+0x88>
80201112:	43c0      	mvns	r0, r0
80201114:	60a0      	str	r0, [r4, #8]
80201116:	f441 3090 	orr.w	r0, r1, #73728	@ 0x12000
8020111a:	6022      	str	r2, [r4, #0]
8020111c:	60e0      	str	r0, [r4, #12]
8020111e:	6860      	ldr	r0, [r4, #4]
80201120:	1c41      	adds	r1, r0, #1
80201122:	6061      	str	r1, [r4, #4]
80201124:	7006      	strb	r6, [r0, #0]
80201126:	e0aa      	b.n	8020127e <__flsbuf+0x1de>
80201128:	68e0      	ldr	r0, [r4, #12]
8020112a:	4691      	mov	r9, r2
8020112c:	6022      	str	r2, [r4, #0]
8020112e:	f440 5000 	orr.w	r0, r0, #8192	@ 0x2000
80201132:	60e0      	str	r0, [r4, #12]
80201134:	6920      	ldr	r0, [r4, #16]
80201136:	bb78      	cbnz	r0, 80201198 <__flsbuf+0xf8>
80201138:	6960      	ldr	r0, [r4, #20]
8020113a:	f002 fec1 	bl	80203ec0 <_sys_istty>
8020113e:	f104 0524 	add.w	r5, r4, #36	@ 0x24
80201142:	f04f 0801 	mov.w	r8, #1
80201146:	b1a8      	cbz	r0, 80201174 <__flsbuf+0xd4>
80201148:	89a0      	ldrh	r0, [r4, #12]
8020114a:	f410 7f40 	tst.w	r0, #768	@ 0x300
8020114e:	d008      	beq.n	80201162 <__flsbuf+0xc2>
80201150:	69e0      	ldr	r0, [r4, #28]
80201152:	f000 fa65 	bl	80201620 <malloc>
80201156:	6120      	str	r0, [r4, #16]
80201158:	b118      	cbz	r0, 80201162 <__flsbuf+0xc2>
8020115a:	68e0      	ldr	r0, [r4, #12]
8020115c:	f440 6000 	orr.w	r0, r0, #2048	@ 0x800
80201160:	e017      	b.n	80201192 <__flsbuf+0xf2>
80201162:	f8c4 801c 	str.w	r8, [r4, #28]
80201166:	6125      	str	r5, [r4, #16]
80201168:	68e0      	ldr	r0, [r4, #12]
8020116a:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
8020116e:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
80201172:	e00e      	b.n	80201192 <__flsbuf+0xf2>
80201174:	69e0      	ldr	r0, [r4, #28]
80201176:	f000 fa53 	bl	80201620 <malloc>
8020117a:	2800      	cmp	r0, #0
8020117c:	6120      	str	r0, [r4, #16]
8020117e:	d0f0      	beq.n	80201162 <__flsbuf+0xc2>
80201180:	68e0      	ldr	r0, [r4, #12]
80201182:	f440 6000 	orr.w	r0, r0, #2048	@ 0x800
80201186:	f410 7f40 	tst.w	r0, #768	@ 0x300
8020118a:	60e0      	str	r0, [r4, #12]
8020118c:	d102      	bne.n	80201194 <__flsbuf+0xf4>
8020118e:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
80201192:	60e0      	str	r0, [r4, #12]
80201194:	6920      	ldr	r0, [r4, #16]
80201196:	6060      	str	r0, [r4, #4]
80201198:	68e0      	ldr	r0, [r4, #12]
8020119a:	6925      	ldr	r5, [r4, #16]
8020119c:	f06f 0b01 	mvn.w	fp, #1
802011a0:	05c1      	lsls	r1, r0, #23
802011a2:	d51e      	bpl.n	802011e2 <__flsbuf+0x142>
802011a4:	6861      	ldr	r1, [r4, #4]
802011a6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
802011a8:	4288      	cmp	r0, r1
802011aa:	d800      	bhi.n	802011ae <__flsbuf+0x10e>
802011ac:	4608      	mov	r0, r1
802011ae:	1b41      	subs	r1, r0, r5
802011b0:	d004      	beq.n	802011bc <__flsbuf+0x11c>
802011b2:	4622      	mov	r2, r4
802011b4:	4628      	mov	r0, r5
802011b6:	f000 f8eb 	bl	80201390 <_writebuf>
802011ba:	bbe8      	cbnz	r0, 80201238 <__flsbuf+0x198>
802011bc:	b11f      	cbz	r7, 802011c6 <__flsbuf+0x126>
802011be:	62e5      	str	r5, [r4, #44]	@ 0x2c
802011c0:	e9c4 5901 	strd	r5, r9, [r4, #4]
802011c4:	e059      	b.n	8020127a <__flsbuf+0x1da>
802011c6:	1c68      	adds	r0, r5, #1
802011c8:	62e0      	str	r0, [r4, #44]	@ 0x2c
802011ca:	6060      	str	r0, [r4, #4]
802011cc:	69e0      	ldr	r0, [r4, #28]
802011ce:	1e40      	subs	r0, r0, #1
802011d0:	60a0      	str	r0, [r4, #8]
802011d2:	68e0      	ldr	r0, [r4, #12]
802011d4:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
802011d8:	60e0      	str	r0, [r4, #12]
802011da:	4630      	mov	r0, r6
802011dc:	702e      	strb	r6, [r5, #0]
802011de:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
802011e2:	b117      	cbz	r7, 802011ea <__flsbuf+0x14a>
802011e4:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
802011e8:	e00a      	b.n	80201200 <__flsbuf+0x160>
802011ea:	6860      	ldr	r0, [r4, #4]
802011ec:	1c41      	adds	r1, r0, #1
802011ee:	6061      	str	r1, [r4, #4]
802011f0:	7006      	strb	r6, [r0, #0]
802011f2:	68e0      	ldr	r0, [r4, #12]
802011f4:	2e0a      	cmp	r6, #10
802011f6:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
802011fa:	60e0      	str	r0, [r4, #12]
802011fc:	d006      	beq.n	8020120c <__flsbuf+0x16c>
802011fe:	2200      	movs	r2, #0
80201200:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
80201202:	6860      	ldr	r0, [r4, #4]
80201204:	4281      	cmp	r1, r0
80201206:	d903      	bls.n	80201210 <__flsbuf+0x170>
80201208:	460b      	mov	r3, r1
8020120a:	e002      	b.n	80201212 <__flsbuf+0x172>
8020120c:	2201      	movs	r2, #1
8020120e:	e7f7      	b.n	80201200 <__flsbuf+0x160>
80201210:	4603      	mov	r3, r0
80201212:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
80201216:	1b5b      	subs	r3, r3, r5
80201218:	ea5f 5c4c 	movs.w	ip, ip, lsl #21
8020121c:	d404      	bmi.n	80201228 <__flsbuf+0x188>
8020121e:	f8d4 c01c 	ldr.w	ip, [r4, #28]
80201222:	459c      	cmp	ip, r3
80201224:	dd00      	ble.n	80201228 <__flsbuf+0x188>
80201226:	b302      	cbz	r2, 8020126a <__flsbuf+0x1ca>
80201228:	4281      	cmp	r1, r0
8020122a:	d800      	bhi.n	8020122e <__flsbuf+0x18e>
8020122c:	4601      	mov	r1, r0
8020122e:	2b00      	cmp	r3, #0
80201230:	eba1 0800 	sub.w	r8, r1, r0
80201234:	62e5      	str	r5, [r4, #44]	@ 0x2c
80201236:	e000      	b.n	8020123a <__flsbuf+0x19a>
80201238:	e008      	b.n	8020124c <__flsbuf+0x1ac>
8020123a:	e9c4 5901 	strd	r5, r9, [r4, #4]
8020123e:	dd07      	ble.n	80201250 <__flsbuf+0x1b0>
80201240:	4622      	mov	r2, r4
80201242:	4619      	mov	r1, r3
80201244:	4628      	mov	r0, r5
80201246:	f000 f8a3 	bl	80201390 <_writebuf>
8020124a:	b108      	cbz	r0, 80201250 <__flsbuf+0x1b0>
8020124c:	4650      	mov	r0, sl
8020124e:	e7c6      	b.n	802011de <__flsbuf+0x13e>
80201250:	f1b8 0f00 	cmp.w	r8, #0
80201254:	d009      	beq.n	8020126a <__flsbuf+0x1ca>
80201256:	69a1      	ldr	r1, [r4, #24]
80201258:	62e5      	str	r5, [r4, #44]	@ 0x2c
8020125a:	6065      	str	r5, [r4, #4]
8020125c:	eba1 0008 	sub.w	r0, r1, r8
80201260:	61a0      	str	r0, [r4, #24]
80201262:	68e0      	ldr	r0, [r4, #12]
80201264:	f040 0010 	orr.w	r0, r0, #16
80201268:	60e0      	str	r0, [r4, #12]
8020126a:	b147      	cbz	r7, 8020127e <__flsbuf+0x1de>
8020126c:	6861      	ldr	r1, [r4, #4]
8020126e:	69a0      	ldr	r0, [r4, #24]
80201270:	62e5      	str	r5, [r4, #44]	@ 0x2c
80201272:	1b49      	subs	r1, r1, r5
80201274:	4408      	add	r0, r1
80201276:	6065      	str	r5, [r4, #4]
80201278:	61a0      	str	r0, [r4, #24]
8020127a:	4658      	mov	r0, fp
8020127c:	e7af      	b.n	802011de <__flsbuf+0x13e>
8020127e:	4630      	mov	r0, r6
80201280:	e7ad      	b.n	802011de <__flsbuf+0x13e>
	...

80201284 <_fseek>:
fseek():
80201284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
_fseek():
80201288:	4604      	mov	r4, r0
8020128a:	4616      	mov	r6, r2
8020128c:	460d      	mov	r5, r1
8020128e:	6947      	ldr	r7, [r0, #20]
80201290:	7b00      	ldrb	r0, [r0, #12]
80201292:	0780      	lsls	r0, r0, #30
80201294:	d02e      	beq.n	802012f4 <_fseek+0x70>
80201296:	4638      	mov	r0, r7
80201298:	f002 fe12 	bl	80203ec0 <_sys_istty>
8020129c:	bb50      	cbnz	r0, 802012f4 <_fseek+0x70>
8020129e:	b33e      	cbz	r6, 802012f0 <_fseek+0x6c>
802012a0:	2e01      	cmp	r6, #1
802012a2:	d002      	beq.n	802012aa <_fseek+0x26>
802012a4:	2e02      	cmp	r6, #2
802012a6:	d125      	bne.n	802012f4 <_fseek+0x70>
802012a8:	e004      	b.n	802012b4 <_fseek+0x30>
802012aa:	4620      	mov	r0, r4
802012ac:	f000 fe80 	bl	80201fb0 <_ftell_internal>
802012b0:	4405      	add	r5, r0
802012b2:	e01d      	b.n	802012f0 <_fseek+0x6c>
802012b4:	4638      	mov	r0, r7
802012b6:	f002 fdfd 	bl	80203eb4 <_sys_flen>
802012ba:	68e1      	ldr	r1, [r4, #12]
802012bc:	2800      	cmp	r0, #0
802012be:	f041 0110 	orr.w	r1, r1, #16
802012c2:	60e1      	str	r1, [r4, #12]
802012c4:	da05      	bge.n	802012d2 <_fseek+0x4e>
802012c6:	4620      	mov	r0, r4
802012c8:	f000 f858 	bl	8020137c <_seterr>
802012cc:	2001      	movs	r0, #1
802012ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
802012d2:	03c9      	lsls	r1, r1, #15
802012d4:	d50b      	bpl.n	802012ee <_fseek+0x6a>
802012d6:	6862      	ldr	r2, [r4, #4]
802012d8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
802012da:	4291      	cmp	r1, r2
802012dc:	d800      	bhi.n	802012e0 <_fseek+0x5c>
802012de:	4611      	mov	r1, r2
802012e0:	69a2      	ldr	r2, [r4, #24]
802012e2:	4411      	add	r1, r2
802012e4:	6922      	ldr	r2, [r4, #16]
802012e6:	1a89      	subs	r1, r1, r2
802012e8:	4281      	cmp	r1, r0
802012ea:	dd00      	ble.n	802012ee <_fseek+0x6a>
802012ec:	4608      	mov	r0, r1
802012ee:	4405      	add	r5, r0
802012f0:	2d00      	cmp	r5, #0
802012f2:	da01      	bge.n	802012f8 <_fseek+0x74>
802012f4:	2002      	movs	r0, #2
802012f6:	e7ea      	b.n	802012ce <_fseek+0x4a>
802012f8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
802012fa:	6860      	ldr	r0, [r4, #4]
802012fc:	68e2      	ldr	r2, [r4, #12]
802012fe:	4281      	cmp	r1, r0
80201300:	d206      	bcs.n	80201310 <_fseek+0x8c>
80201302:	0391      	lsls	r1, r2, #14
80201304:	62e0      	str	r0, [r4, #44]	@ 0x2c
80201306:	d503      	bpl.n	80201310 <_fseek+0x8c>
80201308:	f422 3100 	bic.w	r1, r2, #131072	@ 0x20000
8020130c:	f041 0210 	orr.w	r2, r1, #16
80201310:	69a6      	ldr	r6, [r4, #24]
80201312:	2700      	movs	r7, #0
80201314:	42ae      	cmp	r6, r5
80201316:	dc13      	bgt.n	80201340 <_fseek+0xbc>
80201318:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
8020131a:	4281      	cmp	r1, r0
8020131c:	d901      	bls.n	80201322 <_fseek+0x9e>
8020131e:	460b      	mov	r3, r1
80201320:	e000      	b.n	80201324 <_fseek+0xa0>
80201322:	4603      	mov	r3, r0
80201324:	eb03 0c06 	add.w	ip, r3, r6
80201328:	6923      	ldr	r3, [r4, #16]
8020132a:	ebac 0c03 	sub.w	ip, ip, r3
8020132e:	45ac      	cmp	ip, r5
80201330:	dd06      	ble.n	80201340 <_fseek+0xbc>
80201332:	4281      	cmp	r1, r0
80201334:	d901      	bls.n	8020133a <_fseek+0xb6>
80201336:	468c      	mov	ip, r1
80201338:	e000      	b.n	8020133c <_fseek+0xb8>
8020133a:	4684      	mov	ip, r0
8020133c:	459c      	cmp	ip, r3
8020133e:	d105      	bne.n	8020134c <_fseek+0xc8>
80201340:	60a7      	str	r7, [r4, #8]
80201342:	6027      	str	r7, [r4, #0]
80201344:	f042 0020 	orr.w	r0, r2, #32
80201348:	62a5      	str	r5, [r4, #40]	@ 0x28
8020134a:	e00d      	b.n	80201368 <_fseek+0xe4>
8020134c:	1bad      	subs	r5, r5, r6
8020134e:	69e6      	ldr	r6, [r4, #28]
80201350:	1bae      	subs	r6, r5, r6
80201352:	4281      	cmp	r1, r0
80201354:	60a6      	str	r6, [r4, #8]
80201356:	d900      	bls.n	8020135a <_fseek+0xd6>
80201358:	4608      	mov	r0, r1
8020135a:	1ac0      	subs	r0, r0, r3
8020135c:	1a28      	subs	r0, r5, r0
8020135e:	6020      	str	r0, [r4, #0]
80201360:	1958      	adds	r0, r3, r5
80201362:	6060      	str	r0, [r4, #4]
80201364:	f022 0020 	bic.w	r0, r2, #32
80201368:	4903      	ldr	r1, [pc, #12]	@ (80201378 <_fseek+0xf4>)
8020136a:	4008      	ands	r0, r1
8020136c:	60e0      	str	r0, [r4, #12]
8020136e:	2000      	movs	r0, #0
80201370:	f884 7048 	strb.w	r7, [r4, #72]	@ 0x48
80201374:	e7ab      	b.n	802012ce <_fseek+0x4a>
80201376:	0000      	.short	0x0000
80201378:	ffd7cfbf 	.word	0xffd7cfbf

8020137c <_seterr>:
_seterr():
8020137c:	68c1      	ldr	r1, [r0, #12]
8020137e:	f421 1100 	bic.w	r1, r1, #2097152	@ 0x200000
80201382:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
80201386:	60c1      	str	r1, [r0, #12]
80201388:	2100      	movs	r1, #0
8020138a:	6081      	str	r1, [r0, #8]
8020138c:	6001      	str	r1, [r0, #0]
8020138e:	4770      	bx	lr

80201390 <_writebuf>:
_writebuf():
80201390:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
80201394:	4615      	mov	r5, r2
80201396:	460c      	mov	r4, r1
80201398:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
8020139c:	4838      	ldr	r0, [pc, #224]	@ (80201480 <_deferredlazyseek+0x3e>)
8020139e:	68d7      	ldr	r7, [r2, #12]
802013a0:	f8d2 a014 	ldr.w	sl, [r2, #20]
802013a4:	4207      	tst	r7, r0
802013a6:	d009      	beq.n	802013bc <_writebuf+0x2c>
802013a8:	4650      	mov	r0, sl
802013aa:	69a9      	ldr	r1, [r5, #24]
802013ac:	f002 fdbc 	bl	80203f28 <_sys_seek>
802013b0:	2800      	cmp	r0, #0
802013b2:	db19      	blt.n	802013e8 <_writebuf+0x58>
802013b4:	4832      	ldr	r0, [pc, #200]	@ (80201480 <_deferredlazyseek+0x3e>)
802013b6:	43c0      	mvns	r0, r0
802013b8:	4007      	ands	r7, r0
802013ba:	60ef      	str	r7, [r5, #12]
802013bc:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
802013c0:	f06f 4800 	mvn.w	r8, #2147483648	@ 0x80000000
802013c4:	454c      	cmp	r4, r9
802013c6:	d301      	bcc.n	802013cc <_writebuf+0x3c>
802013c8:	4646      	mov	r6, r8
802013ca:	e000      	b.n	802013ce <_writebuf+0x3e>
802013cc:	4626      	mov	r6, r4
802013ce:	9900      	ldr	r1, [sp, #0]
802013d0:	463b      	mov	r3, r7
802013d2:	4650      	mov	r0, sl
802013d4:	4632      	mov	r2, r6
802013d6:	f002 fdad 	bl	80203f34 <_sys_write>
802013da:	69a9      	ldr	r1, [r5, #24]
802013dc:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
802013e0:	1ab2      	subs	r2, r6, r2
802013e2:	4411      	add	r1, r2
802013e4:	61a9      	str	r1, [r5, #24]
802013e6:	b128      	cbz	r0, 802013f4 <_writebuf+0x64>
802013e8:	4628      	mov	r0, r5
802013ea:	f7ff ffc7 	bl	8020137c <_seterr>
802013ee:	4658      	mov	r0, fp
802013f0:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
802013f4:	1ba4      	subs	r4, r4, r6
802013f6:	d1e5      	bne.n	802013c4 <_writebuf+0x34>
802013f8:	2000      	movs	r0, #0
802013fa:	e7f9      	b.n	802013f0 <_writebuf+0x60>

802013fc <_fflush>:
_fflush():
802013fc:	b570      	push	{r4, r5, r6, lr}
802013fe:	4604      	mov	r4, r0
80201400:	6905      	ldr	r5, [r0, #16]
80201402:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
80201404:	6861      	ldr	r1, [r4, #4]
80201406:	4288      	cmp	r0, r1
80201408:	d800      	bhi.n	8020140c <_fflush+0x10>
8020140a:	4608      	mov	r0, r1
8020140c:	68e1      	ldr	r1, [r4, #12]
8020140e:	f421 1120 	bic.w	r1, r1, #2621440	@ 0x280000
80201412:	60e1      	str	r1, [r4, #12]
80201414:	03c9      	lsls	r1, r1, #15
80201416:	d512      	bpl.n	8020143e <_fflush+0x42>
80201418:	42a8      	cmp	r0, r5
8020141a:	d008      	beq.n	8020142e <_fflush+0x32>
8020141c:	4622      	mov	r2, r4
8020141e:	1b41      	subs	r1, r0, r5
80201420:	4628      	mov	r0, r5
80201422:	f7ff ffb5 	bl	80201390 <_writebuf>
80201426:	b110      	cbz	r0, 8020142e <_fflush+0x32>
80201428:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
8020142c:	bd70      	pop	{r4, r5, r6, pc}
8020142e:	2000      	movs	r0, #0
80201430:	62e5      	str	r5, [r4, #44]	@ 0x2c
80201432:	e9c4 5001 	strd	r5, r0, [r4, #4]
80201436:	68e0      	ldr	r0, [r4, #12]
80201438:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
8020143c:	60e0      	str	r0, [r4, #12]
8020143e:	2000      	movs	r0, #0
80201440:	bd70      	pop	{r4, r5, r6, pc}

80201442 <_deferredlazyseek>:
_deferredlazyseek():
80201442:	b510      	push	{r4, lr}
80201444:	4604      	mov	r4, r0
80201446:	68c0      	ldr	r0, [r0, #12]
80201448:	f020 0020 	bic.w	r0, r0, #32
8020144c:	60e0      	str	r0, [r4, #12]
8020144e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
80201450:	69a0      	ldr	r0, [r4, #24]
80201452:	4288      	cmp	r0, r1
80201454:	d00d      	beq.n	80201472 <_deferredlazyseek+0x30>
80201456:	4620      	mov	r0, r4
80201458:	f7ff ffd0 	bl	802013fc <_fflush>
8020145c:	68e0      	ldr	r0, [r4, #12]
8020145e:	f420 5040 	bic.w	r0, r0, #12288	@ 0x3000
80201462:	f040 0010 	orr.w	r0, r0, #16
80201466:	60e0      	str	r0, [r4, #12]
80201468:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
8020146a:	61a0      	str	r0, [r4, #24]
8020146c:	6920      	ldr	r0, [r4, #16]
8020146e:	62e0      	str	r0, [r4, #44]	@ 0x2c
80201470:	6060      	str	r0, [r4, #4]
80201472:	f244 0140 	movw	r1, #16448	@ 0x4040
80201476:	68e0      	ldr	r0, [r4, #12]
80201478:	4388      	bics	r0, r1
8020147a:	60e0      	str	r0, [r4, #12]
8020147c:	bd10      	pop	{r4, pc}
8020147e:	0000      	.short	0x0000
80201480:	00020010 	.word	0x00020010

80201484 <_initio>:
_initio():
80201484:	b510      	push	{r4, lr}
80201486:	4842      	ldr	r0, [pc, #264]	@ (80201590 <_terminateio+0x3a>)
80201488:	2154      	movs	r1, #84	@ 0x54
8020148a:	f7ff fafe 	bl	80200a8a <__aeabi_memclr4>
8020148e:	4841      	ldr	r0, [pc, #260]	@ (80201594 <_terminateio+0x3e>)
80201490:	2154      	movs	r1, #84	@ 0x54
80201492:	f7ff fafa 	bl	80200a8a <__aeabi_memclr4>
80201496:	4840      	ldr	r0, [pc, #256]	@ (80201598 <_terminateio+0x42>)
80201498:	2154      	movs	r1, #84	@ 0x54
8020149a:	f7ff faf6 	bl	80200a8a <__aeabi_memclr4>
8020149e:	493f      	ldr	r1, [pc, #252]	@ (8020159c <_terminateio+0x46>)
802014a0:	483b      	ldr	r0, [pc, #236]	@ (80201590 <_terminateio+0x3a>)
802014a2:	4a3c      	ldr	r2, [pc, #240]	@ (80201594 <_terminateio+0x3e>)
802014a4:	4b3f      	ldr	r3, [pc, #252]	@ (802015a4 <_terminateio+0x4e>)
802014a6:	6008      	str	r0, [r1, #0]
802014a8:	493d      	ldr	r1, [pc, #244]	@ (802015a0 <_terminateio+0x4a>)
802014aa:	600a      	str	r2, [r1, #0]
802014ac:	493a      	ldr	r1, [pc, #232]	@ (80201598 <_terminateio+0x42>)
802014ae:	6019      	str	r1, [r3, #0]
802014b0:	1c53      	adds	r3, r2, #1
802014b2:	6503      	str	r3, [r0, #80]	@ 0x50
802014b4:	1c48      	adds	r0, r1, #1
802014b6:	6510      	str	r0, [r2, #80]	@ 0x50
802014b8:	2001      	movs	r0, #1
802014ba:	6508      	str	r0, [r1, #80]	@ 0x50
802014bc:	483b      	ldr	r0, [pc, #236]	@ (802015ac <_terminateio+0x56>)
802014be:	4a34      	ldr	r2, [pc, #208]	@ (80201590 <_terminateio+0x3a>)
802014c0:	a139      	add	r1, pc, #228	@ (adr r1, 802015a8 <_terminateio+0x52>)
802014c2:	4478      	add	r0, pc
802014c4:	f000 fdb8 	bl	80202038 <freopen>
802014c8:	b920      	cbnz	r0, 802014d4 <_initio+0x50>
802014ca:	4838      	ldr	r0, [pc, #224]	@ (802015ac <_terminateio+0x56>)
802014cc:	4478      	add	r0, pc
802014ce:	380a      	subs	r0, #10
802014d0:	f000 fe74 	bl	802021bc <__rt_SIGRTRED>
802014d4:	4837      	ldr	r0, [pc, #220]	@ (802015b4 <_terminateio+0x5e>)
802014d6:	4a2f      	ldr	r2, [pc, #188]	@ (80201594 <_terminateio+0x3e>)
802014d8:	a135      	add	r1, pc, #212	@ (adr r1, 802015b0 <_terminateio+0x5a>)
802014da:	4478      	add	r0, pc
802014dc:	f000 fdac 	bl	80202038 <freopen>
802014e0:	b920      	cbnz	r0, 802014ec <_initio+0x68>
802014e2:	4834      	ldr	r0, [pc, #208]	@ (802015b4 <_terminateio+0x5e>)
802014e4:	4478      	add	r0, pc
802014e6:	380a      	subs	r0, #10
802014e8:	f000 fe68 	bl	802021bc <__rt_SIGRTRED>
802014ec:	4832      	ldr	r0, [pc, #200]	@ (802015b8 <_terminateio+0x62>)
802014ee:	4a2a      	ldr	r2, [pc, #168]	@ (80201598 <_terminateio+0x42>)
802014f0:	a12f      	add	r1, pc, #188	@ (adr r1, 802015b0 <_terminateio+0x5a>)
802014f2:	4478      	add	r0, pc
802014f4:	f000 fda0 	bl	80202038 <freopen>
802014f8:	b920      	cbnz	r0, 80201504 <_initio+0x80>
802014fa:	482f      	ldr	r0, [pc, #188]	@ (802015b8 <_terminateio+0x62>)
802014fc:	4478      	add	r0, pc
802014fe:	380a      	subs	r0, #10
80201500:	f000 fe5c 	bl	802021bc <__rt_SIGRTRED>
80201504:	2340      	movs	r3, #64	@ 0x40
80201506:	4822      	ldr	r0, [pc, #136]	@ (80201590 <_terminateio+0x3a>)
80201508:	00dc      	lsls	r4, r3, #3
8020150a:	2100      	movs	r1, #0
8020150c:	4622      	mov	r2, r4
8020150e:	f000 fd70 	bl	80201ff2 <setvbuf>
80201512:	b120      	cbz	r0, 8020151e <_initio+0x9a>
80201514:	4825      	ldr	r0, [pc, #148]	@ (802015ac <_terminateio+0x56>)
80201516:	4478      	add	r0, pc
80201518:	3854      	subs	r0, #84	@ 0x54
8020151a:	f000 fe4f 	bl	802021bc <__rt_SIGRTRED>
8020151e:	481d      	ldr	r0, [pc, #116]	@ (80201594 <_terminateio+0x3e>)
80201520:	4622      	mov	r2, r4
80201522:	2340      	movs	r3, #64	@ 0x40
80201524:	2100      	movs	r1, #0
80201526:	f000 fd64 	bl	80201ff2 <setvbuf>
8020152a:	b120      	cbz	r0, 80201536 <_initio+0xb2>
8020152c:	4821      	ldr	r0, [pc, #132]	@ (802015b4 <_terminateio+0x5e>)
8020152e:	4478      	add	r0, pc
80201530:	3854      	subs	r0, #84	@ 0x54
80201532:	f000 fe43 	bl	802021bc <__rt_SIGRTRED>
80201536:	4818      	ldr	r0, [pc, #96]	@ (80201598 <_terminateio+0x42>)
80201538:	4622      	mov	r2, r4
8020153a:	2310      	movs	r3, #16
8020153c:	2100      	movs	r1, #0
8020153e:	f000 fd58 	bl	80201ff2 <setvbuf>
80201542:	2800      	cmp	r0, #0
80201544:	d006      	beq.n	80201554 <_initio+0xd0>
80201546:	481c      	ldr	r0, [pc, #112]	@ (802015b8 <_terminateio+0x62>)
80201548:	4478      	add	r0, pc
8020154a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
8020154e:	3856      	subs	r0, #86	@ 0x56
80201550:	f000 be34 	b.w	802021bc <__rt_SIGRTRED>
80201554:	bd10      	pop	{r4, pc}

80201556 <_terminateio>:
_terminateio():
80201556:	4810      	ldr	r0, [pc, #64]	@ (80201598 <_terminateio+0x42>)
80201558:	b570      	push	{r4, r5, r6, lr}
8020155a:	6d00      	ldr	r0, [r0, #80]	@ 0x50
8020155c:	f020 0401 	bic.w	r4, r0, #1
80201560:	480b      	ldr	r0, [pc, #44]	@ (80201590 <_terminateio+0x3a>)
80201562:	f000 fde1 	bl	80202128 <_fclose_internal>
80201566:	480b      	ldr	r0, [pc, #44]	@ (80201594 <_terminateio+0x3e>)
80201568:	f000 fdde 	bl	80202128 <_fclose_internal>
8020156c:	480a      	ldr	r0, [pc, #40]	@ (80201598 <_terminateio+0x42>)
8020156e:	f000 fddb 	bl	80202128 <_fclose_internal>
80201572:	e009      	b.n	80201588 <_terminateio+0x32>
80201574:	6d20      	ldr	r0, [r4, #80]	@ 0x50
80201576:	f020 0501 	bic.w	r5, r0, #1
8020157a:	4620      	mov	r0, r4
8020157c:	f000 fdd4 	bl	80202128 <_fclose_internal>
80201580:	4620      	mov	r0, r4
80201582:	f000 f87c 	bl	8020167e <free>
80201586:	462c      	mov	r4, r5
80201588:	2c00      	cmp	r4, #0
8020158a:	d1f3      	bne.n	80201574 <_terminateio+0x1e>
8020158c:	bd70      	pop	{r4, r5, r6, pc}
8020158e:	0000      	.short	0x0000
80201590:	20000648 	.word	0x20000648
80201594:	2000069c 	.word	0x2000069c
80201598:	200006f0 	.word	0x200006f0
8020159c:	20000000 	.word	0x20000000
802015a0:	20000004 	.word	0x20000004
802015a4:	20000008 	.word	0x20000008
802015a8:	00000072 	.word	0x00000072
802015ac:	000041b0 	.word	0x000041b0
802015b0:	00000077 	.word	0x00000077
802015b4:	0000419c 	.word	0x0000419c
802015b8:	00004188 	.word	0x00004188

802015bc <__rt_memcpy_w>:
__aeabi_memcpy4():
802015bc:	b510      	push	{r4, lr}
__rt_memcpy_w():
802015be:	3a20      	subs	r2, #32
802015c0:	f0c0 800b 	bcc.w	802015da <__rt_memcpy_w+0x1e>
802015c4:	e8b1 5018 	ldmia.w	r1!, {r3, r4, ip, lr}
802015c8:	e8a0 5018 	stmia.w	r0!, {r3, r4, ip, lr}
802015cc:	e8b1 5018 	ldmia.w	r1!, {r3, r4, ip, lr}
802015d0:	e8a0 5018 	stmia.w	r0!, {r3, r4, ip, lr}
802015d4:	3a20      	subs	r2, #32
802015d6:	f4bf aff5 	bcs.w	802015c4 <__rt_memcpy_w+0x8>
802015da:	ea5f 7c02 	movs.w	ip, r2, lsl #28
802015de:	bf24      	itt	cs
802015e0:	e8b1 5018 	ldmiacs.w	r1!, {r3, r4, ip, lr}
802015e4:	e8a0 5018 	stmiacs.w	r0!, {r3, r4, ip, lr}
802015e8:	bf44      	itt	mi
802015ea:	c918      	ldmiami	r1!, {r3, r4}
802015ec:	c018      	stmiami	r0!, {r3, r4}
802015ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
802015f2:	ea5f 7c82 	movs.w	ip, r2, lsl #30
802015f6:	bf24      	itt	cs
802015f8:	f851 3b04 	ldrcs.w	r3, [r1], #4
802015fc:	f840 3b04 	strcs.w	r3, [r0], #4
80201600:	bf08      	it	eq
80201602:	4770      	bxeq	lr

80201604 <_memcpy_lastbytes_aligned>:
_memcpy_lastbytes_aligned():
80201604:	07d2      	lsls	r2, r2, #31
80201606:	bf28      	it	cs
80201608:	f831 3b02 	ldrhcs.w	r3, [r1], #2
8020160c:	bf48      	it	mi
8020160e:	f811 2b01 	ldrbmi.w	r2, [r1], #1
80201612:	bf28      	it	cs
80201614:	f820 3b02 	strhcs.w	r3, [r0], #2
80201618:	bf48      	it	mi
8020161a:	f800 2b01 	strbmi.w	r2, [r0], #1
8020161e:	4770      	bx	lr

80201620 <malloc>:
malloc():
80201620:	b570      	push	{r4, r5, r6, lr}
80201622:	4606      	mov	r6, r0
80201624:	f000 fdda 	bl	802021dc <__rt_heap_descriptor>
80201628:	6805      	ldr	r5, [r0, #0]
8020162a:	f106 000b 	add.w	r0, r6, #11
8020162e:	f020 0407 	bic.w	r4, r0, #7
80201632:	42b4      	cmp	r4, r6
80201634:	bf9c      	itt	ls
80201636:	2000      	movls	r0, #0
80201638:	bd70      	popls	{r4, r5, r6, pc}
8020163a:	462b      	mov	r3, r5
8020163c:	686a      	ldr	r2, [r5, #4]
8020163e:	b1ba      	cbz	r2, 80201670 <malloc+0x50>
80201640:	6810      	ldr	r0, [r2, #0]
80201642:	42a0      	cmp	r0, r4
80201644:	d310      	bcc.n	80201668 <malloc+0x48>
80201646:	f104 0108 	add.w	r1, r4, #8
8020164a:	4288      	cmp	r0, r1
8020164c:	bf3c      	itt	cc
8020164e:	6850      	ldrcc	r0, [r2, #4]
80201650:	6058      	strcc	r0, [r3, #4]
80201652:	d307      	bcc.n	80201664 <malloc+0x44>
80201654:	6851      	ldr	r1, [r2, #4]
80201656:	1910      	adds	r0, r2, r4
80201658:	6041      	str	r1, [r0, #4]
8020165a:	6811      	ldr	r1, [r2, #0]
8020165c:	1b09      	subs	r1, r1, r4
8020165e:	6001      	str	r1, [r0, #0]
80201660:	6058      	str	r0, [r3, #4]
80201662:	6014      	str	r4, [r2, #0]
80201664:	1d10      	adds	r0, r2, #4
80201666:	bd70      	pop	{r4, r5, r6, pc}
80201668:	4613      	mov	r3, r2
8020166a:	6852      	ldr	r2, [r2, #4]
8020166c:	2a00      	cmp	r2, #0
8020166e:	d1e7      	bne.n	80201640 <malloc+0x20>
80201670:	4621      	mov	r1, r4
80201672:	4628      	mov	r0, r5
80201674:	f000 fdc2 	bl	802021fc <__Heap_Full>
80201678:	2800      	cmp	r0, #0
8020167a:	d1de      	bne.n	8020163a <malloc+0x1a>
8020167c:	bd70      	pop	{r4, r5, r6, pc}

8020167e <free>:
free():
8020167e:	b570      	push	{r4, r5, r6, lr}
80201680:	4604      	mov	r4, r0
80201682:	1f05      	subs	r5, r0, #4
80201684:	f000 fdaa 	bl	802021dc <__rt_heap_descriptor>
80201688:	6800      	ldr	r0, [r0, #0]
8020168a:	2c00      	cmp	r4, #0
8020168c:	bf14      	ite	ne
8020168e:	6844      	ldrne	r4, [r0, #4]
80201690:	bd70      	popeq	{r4, r5, r6, pc}
80201692:	2c00      	cmp	r4, #0
80201694:	bf18      	it	ne
80201696:	42ac      	cmpne	r4, r5
80201698:	bf3c      	itt	cc
8020169a:	4620      	movcc	r0, r4
8020169c:	6864      	ldrcc	r4, [r4, #4]
8020169e:	d3f8      	bcc.n	80201692 <free+0x14>
802016a0:	6801      	ldr	r1, [r0, #0]
802016a2:	180a      	adds	r2, r1, r0
802016a4:	42aa      	cmp	r2, r5
802016a6:	bf18      	it	ne
802016a8:	6045      	strne	r5, [r0, #4]
802016aa:	d103      	bne.n	802016b4 <free+0x36>
802016ac:	682a      	ldr	r2, [r5, #0]
802016ae:	4605      	mov	r5, r0
802016b0:	4411      	add	r1, r2
802016b2:	6001      	str	r1, [r0, #0]
802016b4:	6828      	ldr	r0, [r5, #0]
802016b6:	1941      	adds	r1, r0, r5
802016b8:	42a1      	cmp	r1, r4
802016ba:	bf1c      	itt	ne
802016bc:	606c      	strne	r4, [r5, #4]
802016be:	bd70      	popne	{r4, r5, r6, pc}
802016c0:	6861      	ldr	r1, [r4, #4]
802016c2:	6069      	str	r1, [r5, #4]
802016c4:	6821      	ldr	r1, [r4, #0]
802016c6:	4408      	add	r0, r1
802016c8:	6028      	str	r0, [r5, #0]
802016ca:	bd70      	pop	{r4, r5, r6, pc}

802016cc <_ll_udiv10>:
_ll_udiv10():
802016cc:	b530      	push	{r4, r5, lr}
802016ce:	f1b0 020a 	subs.w	r2, r0, #10
802016d2:	f171 0300 	sbcs.w	r3, r1, #0
802016d6:	ea4f 0e90 	mov.w	lr, r0, lsr #2
802016da:	ea4e 7e81 	orr.w	lr, lr, r1, lsl #30
802016de:	ebb0 000e 	subs.w	r0, r0, lr
802016e2:	eb61 0191 	sbc.w	r1, r1, r1, lsr #2
802016e6:	ea4f 1e10 	mov.w	lr, r0, lsr #4
802016ea:	ea4e 7e01 	orr.w	lr, lr, r1, lsl #28
802016ee:	eb10 000e 	adds.w	r0, r0, lr
802016f2:	eb41 1111 	adc.w	r1, r1, r1, lsr #4
802016f6:	ea4f 2e10 	mov.w	lr, r0, lsr #8
802016fa:	ea4e 6e01 	orr.w	lr, lr, r1, lsl #24
802016fe:	eb10 000e 	adds.w	r0, r0, lr
80201702:	eb41 2111 	adc.w	r1, r1, r1, lsr #8
80201706:	ea4f 4e10 	mov.w	lr, r0, lsr #16
8020170a:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
8020170e:	eb10 000e 	adds.w	r0, r0, lr
80201712:	eb41 4111 	adc.w	r1, r1, r1, lsr #16
80201716:	1840      	adds	r0, r0, r1
80201718:	f141 0100 	adc.w	r1, r1, #0
8020171c:	ea4f 00d0 	mov.w	r0, r0, lsr #3
80201720:	ea40 7041 	orr.w	r0, r0, r1, lsl #29
80201724:	ea4f 01d1 	mov.w	r1, r1, lsr #3
80201728:	ea4f 0481 	mov.w	r4, r1, lsl #2
8020172c:	ea44 7490 	orr.w	r4, r4, r0, lsr #30
80201730:	eb10 0580 	adds.w	r5, r0, r0, lsl #2
80201734:	eb44 0401 	adc.w	r4, r4, r1
80201738:	196d      	adds	r5, r5, r5
8020173a:	eb44 0404 	adc.w	r4, r4, r4
8020173e:	1b52      	subs	r2, r2, r5
80201740:	41a3      	sbcs	r3, r4
80201742:	f04f 0300 	mov.w	r3, #0
80201746:	bf48      	it	mi
80201748:	320a      	addmi	r2, #10
8020174a:	d500      	bpl.n	8020174e <_ll_udiv10+0x82>
8020174c:	bd30      	pop	{r4, r5, pc}
8020174e:	1c40      	adds	r0, r0, #1
80201750:	f141 0100 	adc.w	r1, r1, #0
80201754:	bd30      	pop	{r4, r5, pc}

80201756 <_printf_int_common>:
_printf_int_common():
80201756:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
8020175a:	460d      	mov	r5, r1
8020175c:	4699      	mov	r9, r3
8020175e:	4692      	mov	sl, r2
80201760:	4604      	mov	r4, r0
80201762:	f100 0824 	add.w	r8, r0, #36	@ 0x24
80201766:	6801      	ldr	r1, [r0, #0]
80201768:	0688      	lsls	r0, r1, #26
8020176a:	d504      	bpl.n	80201776 <_printf_int_common+0x20>
8020176c:	69e0      	ldr	r0, [r4, #28]
8020176e:	f021 0110 	bic.w	r1, r1, #16
80201772:	6021      	str	r1, [r4, #0]
80201774:	e000      	b.n	80201778 <_printf_int_common+0x22>
80201776:	2001      	movs	r0, #1
80201778:	42a8      	cmp	r0, r5
8020177a:	dd01      	ble.n	80201780 <_printf_int_common+0x2a>
8020177c:	1b47      	subs	r7, r0, r5
8020177e:	e000      	b.n	80201782 <_printf_int_common+0x2c>
80201780:	2700      	movs	r7, #0
80201782:	69a1      	ldr	r1, [r4, #24]
80201784:	197a      	adds	r2, r7, r5
80201786:	eb02 0009 	add.w	r0, r2, r9
8020178a:	1a08      	subs	r0, r1, r0
8020178c:	61a0      	str	r0, [r4, #24]
8020178e:	7820      	ldrb	r0, [r4, #0]
80201790:	06c0      	lsls	r0, r0, #27
80201792:	d402      	bmi.n	8020179a <_printf_int_common+0x44>
80201794:	4620      	mov	r0, r4
80201796:	f7ff f9dd 	bl	80200b54 <_printf_pre_padding>
8020179a:	2600      	movs	r6, #0
8020179c:	e008      	b.n	802017b0 <_printf_int_common+0x5a>
8020179e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
802017a2:	f81a 0006 	ldrb.w	r0, [sl, r6]
802017a6:	4790      	blx	r2
802017a8:	6a20      	ldr	r0, [r4, #32]
802017aa:	1c40      	adds	r0, r0, #1
802017ac:	1c76      	adds	r6, r6, #1
802017ae:	6220      	str	r0, [r4, #32]
802017b0:	454e      	cmp	r6, r9
802017b2:	dbf4      	blt.n	8020179e <_printf_int_common+0x48>
802017b4:	7820      	ldrb	r0, [r4, #0]
802017b6:	06c0      	lsls	r0, r0, #27
802017b8:	d50a      	bpl.n	802017d0 <_printf_int_common+0x7a>
802017ba:	4620      	mov	r0, r4
802017bc:	f7ff f9ca 	bl	80200b54 <_printf_pre_padding>
802017c0:	e006      	b.n	802017d0 <_printf_int_common+0x7a>
802017c2:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
802017c6:	2030      	movs	r0, #48	@ 0x30
802017c8:	4790      	blx	r2
802017ca:	6a20      	ldr	r0, [r4, #32]
802017cc:	1c40      	adds	r0, r0, #1
802017ce:	6220      	str	r0, [r4, #32]
802017d0:	1e38      	subs	r0, r7, #0
802017d2:	f1a7 0701 	sub.w	r7, r7, #1
802017d6:	dcf4      	bgt.n	802017c2 <_printf_int_common+0x6c>
802017d8:	e007      	b.n	802017ea <_printf_int_common+0x94>
802017da:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
802017de:	f818 0005 	ldrb.w	r0, [r8, r5]
802017e2:	4790      	blx	r2
802017e4:	6a20      	ldr	r0, [r4, #32]
802017e6:	1c40      	adds	r0, r0, #1
802017e8:	6220      	str	r0, [r4, #32]
802017ea:	1e28      	subs	r0, r5, #0
802017ec:	f1a5 0501 	sub.w	r5, r5, #1
802017f0:	dcf3      	bgt.n	802017da <_printf_int_common+0x84>
802017f2:	4620      	mov	r0, r4
802017f4:	f7ff f9c4 	bl	80200b80 <_printf_post_padding>
802017f8:	7820      	ldrb	r0, [r4, #0]
802017fa:	0600      	lsls	r0, r0, #24
802017fc:	d502      	bpl.n	80201804 <_printf_int_common+0xae>
802017fe:	2002      	movs	r0, #2
80201800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
80201804:	2001      	movs	r0, #1
80201806:	e7fb      	b.n	80201800 <_printf_int_common+0xaa>

80201808 <_fp_digits>:
_fp_digits():
80201808:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
8020180c:	460c      	mov	r4, r1
8020180e:	461e      	mov	r6, r3
80201810:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
80201814:	b08b      	sub	sp, #44	@ 0x2c
80201816:	e9d2 0100 	ldrd	r0, r1, [r2]
8020181a:	f8dd 8060 	ldr.w	r8, [sp, #96]	@ 0x60
8020181e:	900a      	str	r0, [sp, #40]	@ 0x28
80201820:	468a      	mov	sl, r1
80201822:	f3c1 550a 	ubfx	r5, r1, #20, #11
80201826:	b905      	cbnz	r5, 8020182a <_fp_digits+0x22>
80201828:	463d      	mov	r5, r7
8020182a:	2100      	movs	r1, #0
8020182c:	4608      	mov	r0, r1
8020182e:	f04f 0000 	mov.w	r0, #0
80201832:	f1ba 0f00 	cmp.w	sl, #0
80201836:	f400 0040 	and.w	r0, r0, #12582912	@ 0xc00000
8020183a:	da05      	bge.n	80201848 <_fp_digits+0x40>
8020183c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
80201840:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
80201844:	ea01 0050 	and.w	r0, r1, r0, lsr #1
80201848:	ea4f 5990 	mov.w	r9, r0, lsr #22
8020184c:	f1b9 0f01 	cmp.w	r9, #1
80201850:	dd00      	ble.n	80201854 <_fp_digits+0x4c>
80201852:	46b9      	mov	r9, r7
80201854:	980a      	ldr	r0, [sp, #40]	@ 0x28
80201856:	ea50 004a 	orrs.w	r0, r0, sl, lsl #1
8020185a:	d00e      	beq.n	8020187a <_fp_digits+0x72>
8020185c:	f644 5010 	movw	r0, #19728	@ 0x4d10
80201860:	f2a5 35ff 	subw	r5, r5, #1023	@ 0x3ff
80201864:	4345      	muls	r5, r0
80201866:	142f      	asrs	r7, r5, #16
80201868:	f1b8 0f00 	cmp.w	r8, #0
8020186c:	d01e      	beq.n	802018ac <_fp_digits+0xa4>
8020186e:	4275      	negs	r5, r6
80201870:	1e29      	subs	r1, r5, #0
80201872:	dd1e      	ble.n	802018b2 <_fp_digits+0xaa>
80201874:	f1c9 0200 	rsb	r2, r9, #0
80201878:	e01c      	b.n	802018b4 <_fp_digits+0xac>
8020187a:	f1b8 0f01 	cmp.w	r8, #1
8020187e:	f04f 0000 	mov.w	r0, #0
80201882:	d001      	beq.n	80201888 <_fp_digits+0x80>
80201884:	2130      	movs	r1, #48	@ 0x30
80201886:	e003      	b.n	80201890 <_fp_digits+0x88>
80201888:	43f2      	mvns	r2, r6
8020188a:	e005      	b.n	80201898 <_fp_digits+0x90>
8020188c:	5421      	strb	r1, [r4, r0]
8020188e:	1c40      	adds	r0, r0, #1
80201890:	42b0      	cmp	r0, r6
80201892:	dbfb      	blt.n	8020188c <_fp_digits+0x84>
80201894:	4630      	mov	r0, r6
80201896:	2200      	movs	r2, #0
80201898:	2100      	movs	r1, #0
8020189a:	5421      	strb	r1, [r4, r0]
8020189c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
8020189e:	f8c1 8008 	str.w	r8, [r1, #8]
802018a2:	e9c1 2000 	strd	r2, r0, [r1]
802018a6:	b00f      	add	sp, #60	@ 0x3c
802018a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
802018ac:	1bbd      	subs	r5, r7, r6
802018ae:	1c6d      	adds	r5, r5, #1
802018b0:	e7de      	b.n	80201870 <_fp_digits+0x68>
802018b2:	464a      	mov	r2, r9
802018b4:	da00      	bge.n	802018b8 <_fp_digits+0xb0>
802018b6:	4269      	negs	r1, r5
802018b8:	a806      	add	r0, sp, #24
802018ba:	f000 fd29 	bl	80202310 <_btod_etento>
802018be:	ab06      	add	r3, sp, #24
802018c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
802018c4:	ab03      	add	r3, sp, #12
802018c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
802018ca:	4650      	mov	r0, sl
802018cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
802018ce:	f003 fa9d 	bl	80204e0c <_btod_d2e>
802018d2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
802018d6:	f5a0 5000 	sub.w	r0, r0, #8192	@ 0x2000
802018da:	381f      	subs	r0, #31
802018dc:	9000      	str	r0, [sp, #0]
802018de:	9803      	ldr	r0, [sp, #12]
802018e0:	2d00      	cmp	r5, #0
802018e2:	dd0a      	ble.n	802018fa <_fp_digits+0xf2>
802018e4:	f242 011f 	movw	r1, #8223	@ 0x201f
802018e8:	464a      	mov	r2, r9
802018ea:	4408      	add	r0, r1
802018ec:	2300      	movs	r3, #0
802018ee:	a903      	add	r1, sp, #12
802018f0:	9003      	str	r0, [sp, #12]
802018f2:	4668      	mov	r0, sp
802018f4:	f003 fd06 	bl	80205304 <_btod_ediv>
802018f8:	e009      	b.n	8020190e <_fp_digits+0x106>
802018fa:	f5a0 5000 	sub.w	r0, r0, #8192	@ 0x2000
802018fe:	464a      	mov	r2, r9
80201900:	381f      	subs	r0, #31
80201902:	2300      	movs	r3, #0
80201904:	a903      	add	r1, sp, #12
80201906:	9003      	str	r0, [sp, #12]
80201908:	4668      	mov	r0, sp
8020190a:	f003 fd10 	bl	8020532e <_btod_emul>
8020190e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
80201912:	0400      	lsls	r0, r0, #16
80201914:	0c00      	lsrs	r0, r0, #16
80201916:	d003      	beq.n	80201920 <_fp_digits+0x118>
80201918:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
8020191c:	0841      	lsrs	r1, r0, #1
8020191e:	e000      	b.n	80201922 <_fp_digits+0x11a>
80201920:	4610      	mov	r0, r2
80201922:	f1b8 0f00 	cmp.w	r8, #0
80201926:	d003      	beq.n	80201930 <_fp_digits+0x128>
80201928:	2200      	movs	r2, #0
8020192a:	9200      	str	r2, [sp, #0]
8020192c:	4615      	mov	r5, r2
8020192e:	e01e      	b.n	8020196e <_fp_digits+0x166>
80201930:	1e75      	subs	r5, r6, #1
80201932:	d405      	bmi.n	80201940 <_fp_digits+0x138>
80201934:	f7ff feca 	bl	802016cc <_ll_udiv10>
80201938:	3230      	adds	r2, #48	@ 0x30
8020193a:	5562      	strb	r2, [r4, r5]
8020193c:	1e6d      	subs	r5, r5, #1
8020193e:	d5f9      	bpl.n	80201934 <_fp_digits+0x12c>
80201940:	46b3      	mov	fp, r6
80201942:	2201      	movs	r2, #1
80201944:	4308      	orrs	r0, r1
80201946:	d002      	beq.n	8020194e <_fp_digits+0x146>
80201948:	2200      	movs	r2, #0
8020194a:	1c7f      	adds	r7, r7, #1
8020194c:	e004      	b.n	80201958 <_fp_digits+0x150>
8020194e:	7820      	ldrb	r0, [r4, #0]
80201950:	2830      	cmp	r0, #48	@ 0x30
80201952:	d101      	bne.n	80201958 <_fp_digits+0x150>
80201954:	2200      	movs	r2, #0
80201956:	1e7f      	subs	r7, r7, #1
80201958:	2a00      	cmp	r2, #0
8020195a:	9709      	str	r7, [sp, #36]	@ 0x24
8020195c:	d084      	beq.n	80201868 <_fp_digits+0x60>
8020195e:	e01d      	b.n	8020199c <_fp_digits+0x194>
80201960:	2d11      	cmp	r5, #17
80201962:	da07      	bge.n	80201974 <_fp_digits+0x16c>
80201964:	f7ff feb2 	bl	802016cc <_ll_udiv10>
80201968:	3230      	adds	r2, #48	@ 0x30
8020196a:	5562      	strb	r2, [r4, r5]
8020196c:	1c6d      	adds	r5, r5, #1
8020196e:	ea50 0201 	orrs.w	r2, r0, r1
80201972:	d1f5      	bne.n	80201960 <_fp_digits+0x158>
80201974:	4308      	orrs	r0, r1
80201976:	d002      	beq.n	8020197e <_fp_digits+0x176>
80201978:	9800      	ldr	r0, [sp, #0]
8020197a:	b1c8      	cbz	r0, 802019b0 <_fp_digits+0x1a8>
8020197c:	e00e      	b.n	8020199c <_fp_digits+0x194>
8020197e:	2100      	movs	r1, #0
80201980:	1e68      	subs	r0, r5, #1
80201982:	e005      	b.n	80201990 <_fp_digits+0x188>
80201984:	5c23      	ldrb	r3, [r4, r0]
80201986:	5c62      	ldrb	r2, [r4, r1]
80201988:	5463      	strb	r3, [r4, r1]
8020198a:	5422      	strb	r2, [r4, r0]
8020198c:	1e40      	subs	r0, r0, #1
8020198e:	1c49      	adds	r1, r1, #1
80201990:	4281      	cmp	r1, r0
80201992:	dbf7      	blt.n	80201984 <_fp_digits+0x17c>
80201994:	46ab      	mov	fp, r5
80201996:	1ba8      	subs	r0, r5, r6
80201998:	1e40      	subs	r0, r0, #1
8020199a:	9009      	str	r0, [sp, #36]	@ 0x24
8020199c:	2000      	movs	r0, #0
8020199e:	f804 000b 	strb.w	r0, [r4, fp]
802019a2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
802019a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
802019a6:	f8c0 8008 	str.w	r8, [r0, #8]
802019aa:	e9c0 2b00 	strd	r2, fp, [r0]
802019ae:	e77a      	b.n	802018a6 <_fp_digits+0x9e>
802019b0:	2611      	movs	r6, #17
802019b2:	f04f 0800 	mov.w	r8, #0
802019b6:	e757      	b.n	80201868 <_fp_digits+0x60>

802019b8 <_printf_fp_dec_real>:
_printf_fp_dec_real():
802019b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
802019bc:	4688      	mov	r8, r1
802019be:	4604      	mov	r4, r0
802019c0:	1dd2      	adds	r2, r2, #7
802019c2:	f022 0107 	bic.w	r1, r2, #7
802019c6:	b091      	sub	sp, #68	@ 0x44
802019c8:	e9d1 0100 	ldrd	r0, r1, [r1]
802019cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
802019d0:	f003 fde4 	bl	8020559c <__ARM_fpclassify>
802019d4:	4602      	mov	r2, r0
802019d6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
802019d8:	0fc0      	lsrs	r0, r0, #31
802019da:	d001      	beq.n	802019e0 <_printf_fp_dec_real+0x28>
802019dc:	202d      	movs	r0, #45	@ 0x2d
802019de:	e007      	b.n	802019f0 <_printf_fp_dec_real+0x38>
802019e0:	6820      	ldr	r0, [r4, #0]
802019e2:	0781      	lsls	r1, r0, #30
802019e4:	d501      	bpl.n	802019ea <_printf_fp_dec_real+0x32>
802019e6:	202b      	movs	r0, #43	@ 0x2b
802019e8:	e002      	b.n	802019f0 <_printf_fp_dec_real+0x38>
802019ea:	2120      	movs	r1, #32
802019ec:	ea01 00c0 	and.w	r0, r1, r0, lsl #3
802019f0:	2a03      	cmp	r2, #3
802019f2:	9009      	str	r0, [sp, #36]	@ 0x24
802019f4:	d001      	beq.n	802019fa <_printf_fp_dec_real+0x42>
802019f6:	2a07      	cmp	r2, #7
802019f8:	db05      	blt.n	80201a06 <_printf_fp_dec_real+0x4e>
802019fa:	4603      	mov	r3, r0
802019fc:	4641      	mov	r1, r8
802019fe:	4620      	mov	r0, r4
80201a00:	f000 fc46 	bl	80202290 <_printf_fp_infnan>
80201a04:	e10b      	b.n	80201c1e <_printf_fp_dec_real+0x266>
80201a06:	7820      	ldrb	r0, [r4, #0]
80201a08:	0680      	lsls	r0, r0, #26
80201a0a:	d501      	bpl.n	80201a10 <_printf_fp_dec_real+0x58>
80201a0c:	69e0      	ldr	r0, [r4, #28]
80201a0e:	e000      	b.n	80201a12 <_printf_fp_dec_real+0x5a>
80201a10:	2006      	movs	r0, #6
80201a12:	f1b8 0f65 	cmp.w	r8, #101	@ 0x65
80201a16:	4681      	mov	r9, r0
80201a18:	d006      	beq.n	80201a28 <_printf_fp_dec_real+0x70>
80201a1a:	f1b8 0f66 	cmp.w	r8, #102	@ 0x66
80201a1e:	d018      	beq.n	80201a52 <_printf_fp_dec_real+0x9a>
80201a20:	f1b8 0f67 	cmp.w	r8, #103	@ 0x67
80201a24:	d170      	bne.n	80201b08 <_printf_fp_dec_real+0x150>
80201a26:	e031      	b.n	80201a8c <_printf_fp_dec_real+0xd4>
80201a28:	2000      	movs	r0, #0
80201a2a:	f1b9 0f11 	cmp.w	r9, #17
80201a2e:	9000      	str	r0, [sp, #0]
80201a30:	db01      	blt.n	80201a36 <_printf_fp_dec_real+0x7e>
80201a32:	2311      	movs	r3, #17
80201a34:	e001      	b.n	80201a3a <_printf_fp_dec_real+0x82>
80201a36:	f109 0301 	add.w	r3, r9, #1
80201a3a:	aa0a      	add	r2, sp, #40	@ 0x28
80201a3c:	a901      	add	r1, sp, #4
80201a3e:	a80c      	add	r0, sp, #48	@ 0x30
80201a40:	f7ff fee2 	bl	80201808 <_fp_digits>
80201a44:	e9dd 700c 	ldrd	r7, r0, [sp, #48]	@ 0x30
80201a48:	2600      	movs	r6, #0
80201a4a:	f109 0501 	add.w	r5, r9, #1
80201a4e:	4683      	mov	fp, r0
80201a50:	e047      	b.n	80201ae2 <_printf_fp_dec_real+0x12a>
80201a52:	2001      	movs	r0, #1
80201a54:	464b      	mov	r3, r9
80201a56:	9000      	str	r0, [sp, #0]
80201a58:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
80201a5c:	aa0a      	add	r2, sp, #40	@ 0x28
80201a5e:	a901      	add	r1, sp, #4
80201a60:	a80c      	add	r0, sp, #48	@ 0x30
80201a62:	f7ff fed1 	bl	80201808 <_fp_digits>
80201a66:	e9dd b00d 	ldrd	fp, r0, [sp, #52]	@ 0x34
80201a6a:	990c      	ldr	r1, [sp, #48]	@ 0x30
80201a6c:	465d      	mov	r5, fp
80201a6e:	2600      	movs	r6, #0
80201a70:	b910      	cbnz	r0, 80201a78 <_printf_fp_dec_real+0xc0>
80201a72:	f109 0001 	add.w	r0, r9, #1
80201a76:	180d      	adds	r5, r1, r0
80201a78:	ebb9 0005 	subs.w	r0, r9, r5
80201a7c:	d403      	bmi.n	80201a86 <_printf_fp_dec_real+0xce>
80201a7e:	f1c0 36ff 	rsb	r6, r0, #4294967295	@ 0xffffffff
80201a82:	f109 0501 	add.w	r5, r9, #1
80201a86:	eba5 0009 	sub.w	r0, r5, r9
80201a8a:	e02b      	b.n	80201ae4 <_printf_fp_dec_real+0x12c>
80201a8c:	f1b9 0f01 	cmp.w	r9, #1
80201a90:	da01      	bge.n	80201a96 <_printf_fp_dec_real+0xde>
80201a92:	f04f 0901 	mov.w	r9, #1
80201a96:	2000      	movs	r0, #0
80201a98:	f1b9 0f11 	cmp.w	r9, #17
80201a9c:	9000      	str	r0, [sp, #0]
80201a9e:	4648      	mov	r0, r9
80201aa0:	dd01      	ble.n	80201aa6 <_printf_fp_dec_real+0xee>
80201aa2:	2311      	movs	r3, #17
80201aa4:	e000      	b.n	80201aa8 <_printf_fp_dec_real+0xf0>
80201aa6:	4603      	mov	r3, r0
80201aa8:	aa0a      	add	r2, sp, #40	@ 0x28
80201aaa:	a901      	add	r1, sp, #4
80201aac:	a80c      	add	r0, sp, #48	@ 0x30
80201aae:	f7ff feab 	bl	80201808 <_fp_digits>
80201ab2:	e9dd 700c 	ldrd	r7, r0, [sp, #48]	@ 0x30
80201ab6:	464d      	mov	r5, r9
80201ab8:	2600      	movs	r6, #0
80201aba:	4683      	mov	fp, r0
80201abc:	7820      	ldrb	r0, [r4, #0]
80201abe:	0700      	lsls	r0, r0, #28
80201ac0:	d40a      	bmi.n	80201ad8 <_printf_fp_dec_real+0x120>
80201ac2:	45ab      	cmp	fp, r5
80201ac4:	da00      	bge.n	80201ac8 <_printf_fp_dec_real+0x110>
80201ac6:	465d      	mov	r5, fp
80201ac8:	a801      	add	r0, sp, #4
80201aca:	2d01      	cmp	r5, #1
80201acc:	dd04      	ble.n	80201ad8 <_printf_fp_dec_real+0x120>
80201ace:	1941      	adds	r1, r0, r5
80201ad0:	f811 1c01 	ldrb.w	r1, [r1, #-1]
80201ad4:	2930      	cmp	r1, #48	@ 0x30
80201ad6:	d007      	beq.n	80201ae8 <_printf_fp_dec_real+0x130>
80201ad8:	454f      	cmp	r7, r9
80201ada:	da02      	bge.n	80201ae2 <_printf_fp_dec_real+0x12a>
80201adc:	f117 0f04 	cmn.w	r7, #4
80201ae0:	da04      	bge.n	80201aec <_printf_fp_dec_real+0x134>
80201ae2:	2001      	movs	r0, #1
80201ae4:	4682      	mov	sl, r0
80201ae6:	e00f      	b.n	80201b08 <_printf_fp_dec_real+0x150>
80201ae8:	1e6d      	subs	r5, r5, #1
80201aea:	e7ee      	b.n	80201aca <_printf_fp_dec_real+0x112>
80201aec:	2f00      	cmp	r7, #0
80201aee:	dc02      	bgt.n	80201af6 <_printf_fp_dec_real+0x13e>
80201af0:	1bed      	subs	r5, r5, r7
80201af2:	443e      	add	r6, r7
80201af4:	e003      	b.n	80201afe <_printf_fp_dec_real+0x146>
80201af6:	1c78      	adds	r0, r7, #1
80201af8:	42a8      	cmp	r0, r5
80201afa:	dd00      	ble.n	80201afe <_printf_fp_dec_real+0x146>
80201afc:	1c7d      	adds	r5, r7, #1
80201afe:	1bb8      	subs	r0, r7, r6
80201b00:	f100 0a01 	add.w	sl, r0, #1
80201b04:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
80201b08:	7820      	ldrb	r0, [r4, #0]
80201b0a:	0700      	lsls	r0, r0, #28
80201b0c:	d403      	bmi.n	80201b16 <_printf_fp_dec_real+0x15e>
80201b0e:	45aa      	cmp	sl, r5
80201b10:	db01      	blt.n	80201b16 <_printf_fp_dec_real+0x15e>
80201b12:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
80201b16:	2100      	movs	r1, #0
80201b18:	f1b7 4f00 	cmp.w	r7, #2147483648	@ 0x80000000
80201b1c:	f10d 0843 	add.w	r8, sp, #67	@ 0x43
80201b20:	f88d 1043 	strb.w	r1, [sp, #67]	@ 0x43
80201b24:	d024      	beq.n	80201b70 <_printf_fp_dec_real+0x1b8>
80201b26:	2002      	movs	r0, #2
80201b28:	232b      	movs	r3, #43	@ 0x2b
80201b2a:	2f00      	cmp	r7, #0
80201b2c:	da01      	bge.n	80201b32 <_printf_fp_dec_real+0x17a>
80201b2e:	427f      	negs	r7, r7
80201b30:	232d      	movs	r3, #45	@ 0x2d
80201b32:	210a      	movs	r1, #10
80201b34:	1e02      	subs	r2, r0, #0
80201b36:	f1a0 0001 	sub.w	r0, r0, #1
80201b3a:	dc00      	bgt.n	80201b3e <_printf_fp_dec_real+0x186>
80201b3c:	b15f      	cbz	r7, 80201b56 <_printf_fp_dec_real+0x19e>
80201b3e:	fb97 fcf1 	sdiv	ip, r7, r1
80201b42:	fb97 f2f1 	sdiv	r2, r7, r1
80201b46:	fb01 7c1c 	mls	ip, r1, ip, r7
80201b4a:	4617      	mov	r7, r2
80201b4c:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
80201b50:	f808 cd01 	strb.w	ip, [r8, #-1]!
80201b54:	e7ee      	b.n	80201b34 <_printf_fp_dec_real+0x17c>
80201b56:	f1a8 0001 	sub.w	r0, r8, #1
80201b5a:	7003      	strb	r3, [r0, #0]
80201b5c:	8821      	ldrh	r1, [r4, #0]
80201b5e:	0509      	lsls	r1, r1, #20
80201b60:	d501      	bpl.n	80201b66 <_printf_fp_dec_real+0x1ae>
80201b62:	2145      	movs	r1, #69	@ 0x45
80201b64:	e000      	b.n	80201b68 <_printf_fp_dec_real+0x1b0>
80201b66:	2165      	movs	r1, #101	@ 0x65
80201b68:	f1a0 0801 	sub.w	r8, r0, #1
80201b6c:	f800 1c01 	strb.w	r1, [r0, #-1]
80201b70:	9809      	ldr	r0, [sp, #36]	@ 0x24
80201b72:	a90f      	add	r1, sp, #60	@ 0x3c
80201b74:	eba1 0708 	sub.w	r7, r1, r8
80201b78:	1dff      	adds	r7, r7, #7
80201b7a:	b100      	cbz	r0, 80201b7e <_printf_fp_dec_real+0x1c6>
80201b7c:	2001      	movs	r0, #1
80201b7e:	1941      	adds	r1, r0, r5
80201b80:	eb01 70ea 	add.w	r0, r1, sl, asr #31
80201b84:	69a1      	ldr	r1, [r4, #24]
80201b86:	4438      	add	r0, r7
80201b88:	1a08      	subs	r0, r1, r0
80201b8a:	1e40      	subs	r0, r0, #1
80201b8c:	61a0      	str	r0, [r4, #24]
80201b8e:	7820      	ldrb	r0, [r4, #0]
80201b90:	06c0      	lsls	r0, r0, #27
80201b92:	d402      	bmi.n	80201b9a <_printf_fp_dec_real+0x1e2>
80201b94:	4620      	mov	r0, r4
80201b96:	f7fe ffdd 	bl	80200b54 <_printf_pre_padding>
80201b9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
80201b9c:	b128      	cbz	r0, 80201baa <_printf_fp_dec_real+0x1f2>
80201b9e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
80201ba2:	4790      	blx	r2
80201ba4:	6a20      	ldr	r0, [r4, #32]
80201ba6:	1c40      	adds	r0, r0, #1
80201ba8:	6220      	str	r0, [r4, #32]
80201baa:	7820      	ldrb	r0, [r4, #0]
80201bac:	06c0      	lsls	r0, r0, #27
80201bae:	d522      	bpl.n	80201bf6 <_printf_fp_dec_real+0x23e>
80201bb0:	4620      	mov	r0, r4
80201bb2:	f7fe ffcf 	bl	80200b54 <_printf_pre_padding>
80201bb6:	e01e      	b.n	80201bf6 <_printf_fp_dec_real+0x23e>
80201bb8:	2e00      	cmp	r6, #0
80201bba:	db04      	blt.n	80201bc6 <_printf_fp_dec_real+0x20e>
80201bbc:	45b3      	cmp	fp, r6
80201bbe:	dd02      	ble.n	80201bc6 <_printf_fp_dec_real+0x20e>
80201bc0:	a801      	add	r0, sp, #4
80201bc2:	5d80      	ldrb	r0, [r0, r6]
80201bc4:	e000      	b.n	80201bc8 <_printf_fp_dec_real+0x210>
80201bc6:	2030      	movs	r0, #48	@ 0x30
80201bc8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
80201bcc:	4790      	blx	r2
80201bce:	6a20      	ldr	r0, [r4, #32]
80201bd0:	1c40      	adds	r0, r0, #1
80201bd2:	6220      	str	r0, [r4, #32]
80201bd4:	1c76      	adds	r6, r6, #1
80201bd6:	f1aa 0001 	sub.w	r0, sl, #1
80201bda:	ea5f 0a00 	movs.w	sl, r0
80201bde:	d10a      	bne.n	80201bf6 <_printf_fp_dec_real+0x23e>
80201be0:	f000 fb00 	bl	802021e4 <__rt_locale>
80201be4:	68c0      	ldr	r0, [r0, #12]
80201be6:	6801      	ldr	r1, [r0, #0]
80201be8:	5c40      	ldrb	r0, [r0, r1]
80201bea:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
80201bee:	4790      	blx	r2
80201bf0:	6a20      	ldr	r0, [r4, #32]
80201bf2:	1c40      	adds	r0, r0, #1
80201bf4:	6220      	str	r0, [r4, #32]
80201bf6:	1e28      	subs	r0, r5, #0
80201bf8:	f1a5 0501 	sub.w	r5, r5, #1
80201bfc:	dcdc      	bgt.n	80201bb8 <_printf_fp_dec_real+0x200>
80201bfe:	e007      	b.n	80201c10 <_printf_fp_dec_real+0x258>
80201c00:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
80201c04:	f818 0b01 	ldrb.w	r0, [r8], #1
80201c08:	4790      	blx	r2
80201c0a:	6a20      	ldr	r0, [r4, #32]
80201c0c:	1c40      	adds	r0, r0, #1
80201c0e:	6220      	str	r0, [r4, #32]
80201c10:	1e38      	subs	r0, r7, #0
80201c12:	f1a7 0701 	sub.w	r7, r7, #1
80201c16:	dcf3      	bgt.n	80201c00 <_printf_fp_dec_real+0x248>
80201c18:	4620      	mov	r0, r4
80201c1a:	f7fe ffb1 	bl	80200b80 <_printf_post_padding>
80201c1e:	2003      	movs	r0, #3
80201c20:	b011      	add	sp, #68	@ 0x44
80201c22:	e641      	b.n	802018a8 <_fp_digits+0xa0>

80201c24 <_printf_fp_hex_real>:
_printf_fp_hex_real():
80201c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
80201c28:	4604      	mov	r4, r0
80201c2a:	460d      	mov	r5, r1
80201c2c:	1dd2      	adds	r2, r2, #7
80201c2e:	f022 0007 	bic.w	r0, r2, #7
80201c32:	b089      	sub	sp, #36	@ 0x24
80201c34:	e9d0 9700 	ldrd	r9, r7, [r0]
80201c38:	4648      	mov	r0, r9
80201c3a:	4639      	mov	r1, r7
80201c3c:	f003 fcae 	bl	8020559c <__ARM_fpclassify>
80201c40:	4602      	mov	r2, r0
80201c42:	0ff8      	lsrs	r0, r7, #31
80201c44:	d001      	beq.n	80201c4a <_printf_fp_hex_real+0x26>
80201c46:	232d      	movs	r3, #45	@ 0x2d
80201c48:	e007      	b.n	80201c5a <_printf_fp_hex_real+0x36>
80201c4a:	6820      	ldr	r0, [r4, #0]
80201c4c:	0781      	lsls	r1, r0, #30
80201c4e:	d501      	bpl.n	80201c54 <_printf_fp_hex_real+0x30>
80201c50:	232b      	movs	r3, #43	@ 0x2b
80201c52:	e002      	b.n	80201c5a <_printf_fp_hex_real+0x36>
80201c54:	2120      	movs	r1, #32
80201c56:	ea01 03c0 	and.w	r3, r1, r0, lsl #3
80201c5a:	f88d 3020 	strb.w	r3, [sp, #32]
80201c5e:	b10b      	cbz	r3, 80201c64 <_printf_fp_hex_real+0x40>
80201c60:	2001      	movs	r0, #1
80201c62:	e000      	b.n	80201c66 <_printf_fp_hex_real+0x42>
80201c64:	2000      	movs	r0, #0
80201c66:	2a03      	cmp	r2, #3
80201c68:	4682      	mov	sl, r0
80201c6a:	d001      	beq.n	80201c70 <_printf_fp_hex_real+0x4c>
80201c6c:	2a07      	cmp	r2, #7
80201c6e:	db04      	blt.n	80201c7a <_printf_fp_hex_real+0x56>
80201c70:	4629      	mov	r1, r5
80201c72:	4620      	mov	r0, r4
80201c74:	f000 fb0c 	bl	80202290 <_printf_fp_infnan>
80201c78:	e13f      	b.n	80201efa <_printf_fp_hex_real+0x2d6>
80201c7a:	7820      	ldrb	r0, [r4, #0]
80201c7c:	0680      	lsls	r0, r0, #26
80201c7e:	d401      	bmi.n	80201c84 <_printf_fp_hex_real+0x60>
80201c80:	250d      	movs	r5, #13
80201c82:	e000      	b.n	80201c86 <_printf_fp_hex_real+0x62>
80201c84:	69e5      	ldr	r5, [r4, #28]
80201c86:	f3c7 560a 	ubfx	r6, r7, #20, #11
80201c8a:	2d0d      	cmp	r5, #13
80201c8c:	da49      	bge.n	80201d22 <_printf_fp_hex_real+0xfe>
80201c8e:	2100      	movs	r1, #0
80201c90:	ea4f 5b17 	mov.w	fp, r7, lsr #20
80201c94:	4608      	mov	r0, r1
80201c96:	f04f 0000 	mov.w	r0, #0
80201c9a:	2f00      	cmp	r7, #0
80201c9c:	f400 0040 	and.w	r0, r0, #12582912	@ 0xc00000
80201ca0:	da07      	bge.n	80201cb2 <_printf_fp_hex_real+0x8e>
80201ca2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
80201ca6:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
80201caa:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
80201cae:	ea01 0060 	and.w	r0, r1, r0, asr #1
80201cb2:	1581      	asrs	r1, r0, #22
80201cb4:	2901      	cmp	r1, #1
80201cb6:	dd01      	ble.n	80201cbc <_printf_fp_hex_real+0x98>
80201cb8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
80201cbc:	2200      	movs	r2, #0
80201cbe:	ea4f 0c85 	mov.w	ip, r5, lsl #2
80201cc2:	f1bc 0f18 	cmp.w	ip, #24
80201cc6:	d306      	bcc.n	80201cd6 <_printf_fp_hex_real+0xb2>
80201cc8:	4613      	mov	r3, r2
80201cca:	f1ac 0018 	sub.w	r0, ip, #24
80201cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
80201cd2:	40c2      	lsrs	r2, r0
80201cd4:	e003      	b.n	80201cde <_printf_fp_hex_real+0xba>
80201cd6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
80201cda:	fa23 f30c 	lsr.w	r3, r3, ip
80201cde:	f10c 0c0c 	add.w	ip, ip, #12
80201ce2:	f1bc 0f20 	cmp.w	ip, #32
80201ce6:	d304      	bcc.n	80201cf2 <_printf_fp_hex_real+0xce>
80201ce8:	f1ac 0c20 	sub.w	ip, ip, #32
80201cec:	fa09 f00c 	lsl.w	r0, r9, ip
80201cf0:	e001      	b.n	80201cf6 <_printf_fp_hex_real+0xd2>
80201cf2:	fa07 f00c 	lsl.w	r0, r7, ip
80201cf6:	2900      	cmp	r1, #0
80201cf8:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
80201cfc:	dd01      	ble.n	80201d02 <_printf_fp_hex_real+0xde>
80201cfe:	b918      	cbnz	r0, 80201d08 <_printf_fp_hex_real+0xe4>
80201d00:	e00f      	b.n	80201d22 <_printf_fp_hex_real+0xfe>
80201d02:	d10e      	bne.n	80201d22 <_printf_fp_hex_real+0xfe>
80201d04:	4540      	cmp	r0, r8
80201d06:	d30c      	bcc.n	80201d22 <_printf_fp_hex_real+0xfe>
80201d08:	eb19 0902 	adds.w	r9, r9, r2
80201d0c:	415f      	adcs	r7, r3
80201d0e:	b921      	cbnz	r1, 80201d1a <_printf_fp_hex_real+0xf6>
80201d10:	4540      	cmp	r0, r8
80201d12:	d102      	bne.n	80201d1a <_printf_fp_hex_real+0xf6>
80201d14:	439f      	bics	r7, r3
80201d16:	ea29 0902 	bic.w	r9, r9, r2
80201d1a:	ebbb 5f17 	cmp.w	fp, r7, lsr #20
80201d1e:	d000      	beq.n	80201d22 <_printf_fp_hex_real+0xfe>
80201d20:	1c76      	adds	r6, r6, #1
80201d22:	8820      	ldrh	r0, [r4, #0]
80201d24:	0500      	lsls	r0, r0, #20
80201d26:	d502      	bpl.n	80201d2e <_printf_fp_hex_real+0x10a>
80201d28:	487b      	ldr	r0, [pc, #492]	@ (80201f18 <_printf_fp_hex_real+0x2f4>)
80201d2a:	4478      	add	r0, pc
80201d2c:	e002      	b.n	80201d34 <_printf_fp_hex_real+0x110>
80201d2e:	487a      	ldr	r0, [pc, #488]	@ (80201f18 <_printf_fp_hex_real+0x2f4>)
80201d30:	4478      	add	r0, pc
80201d32:	3819      	subs	r0, #25
80201d34:	aa08      	add	r2, sp, #32
80201d36:	2330      	movs	r3, #48	@ 0x30
80201d38:	f802 300a 	strb.w	r3, [r2, sl]
80201d3c:	7c03      	ldrb	r3, [r0, #16]
80201d3e:	f10a 0101 	add.w	r1, sl, #1
80201d42:	2e00      	cmp	r6, #0
80201d44:	f10a 0a02 	add.w	sl, sl, #2
80201d48:	5453      	strb	r3, [r2, r1]
80201d4a:	466a      	mov	r2, sp
80201d4c:	dc02      	bgt.n	80201d54 <_printf_fp_hex_real+0x130>
80201d4e:	f04f 0130 	mov.w	r1, #48	@ 0x30
80201d52:	e001      	b.n	80201d58 <_printf_fp_hex_real+0x134>
80201d54:	f04f 0131 	mov.w	r1, #49	@ 0x31
80201d58:	f04f 0801 	mov.w	r8, #1
80201d5c:	f88d 1000 	strb.w	r1, [sp]
80201d60:	d002      	beq.n	80201d68 <_printf_fp_hex_real+0x144>
80201d62:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
80201d66:	e003      	b.n	80201d70 <_printf_fp_hex_real+0x14c>
80201d68:	ea59 0147 	orrs.w	r1, r9, r7, lsl #1
80201d6c:	d000      	beq.n	80201d70 <_printf_fp_hex_real+0x14c>
80201d6e:	4e6b      	ldr	r6, [pc, #428]	@ (80201f1c <_printf_fp_hex_real+0x2f8>)
80201d70:	2d00      	cmp	r5, #0
80201d72:	dc02      	bgt.n	80201d7a <_printf_fp_hex_real+0x156>
80201d74:	7821      	ldrb	r1, [r4, #0]
80201d76:	0709      	lsls	r1, r1, #28
80201d78:	d504      	bpl.n	80201d84 <_printf_fp_hex_real+0x160>
80201d7a:	f04f 0802 	mov.w	r8, #2
80201d7e:	212e      	movs	r1, #46	@ 0x2e
80201d80:	f88d 1001 	strb.w	r1, [sp, #1]
80201d84:	46c4      	mov	ip, r8
80201d86:	2100      	movs	r1, #0
80201d88:	e00b      	b.n	80201da2 <_printf_fp_hex_real+0x17e>
80201d8a:	f3c7 4303 	ubfx	r3, r7, #16, #4
80201d8e:	013f      	lsls	r7, r7, #4
80201d90:	5cc3      	ldrb	r3, [r0, r3]
80201d92:	1c49      	adds	r1, r1, #1
80201d94:	1e6d      	subs	r5, r5, #1
80201d96:	f802 3008 	strb.w	r3, [r2, r8]
80201d9a:	2905      	cmp	r1, #5
80201d9c:	f108 0801 	add.w	r8, r8, #1
80201da0:	da01      	bge.n	80201da6 <_printf_fp_hex_real+0x182>
80201da2:	2d00      	cmp	r5, #0
80201da4:	dcf1      	bgt.n	80201d8a <_printf_fp_hex_real+0x166>
80201da6:	2100      	movs	r1, #0
80201da8:	e00c      	b.n	80201dc4 <_printf_fp_hex_real+0x1a0>
80201daa:	eb00 7319 	add.w	r3, r0, r9, lsr #28
80201dae:	1c49      	adds	r1, r1, #1
80201db0:	781b      	ldrb	r3, [r3, #0]
80201db2:	1e6d      	subs	r5, r5, #1
80201db4:	2908      	cmp	r1, #8
80201db6:	f802 3008 	strb.w	r3, [r2, r8]
80201dba:	ea4f 1909 	mov.w	r9, r9, lsl #4
80201dbe:	f108 0801 	add.w	r8, r8, #1
80201dc2:	da01      	bge.n	80201dc8 <_printf_fp_hex_real+0x1a4>
80201dc4:	2d00      	cmp	r5, #0
80201dc6:	dcf0      	bgt.n	80201daa <_printf_fp_hex_real+0x186>
80201dc8:	6821      	ldr	r1, [r4, #0]
80201dca:	068b      	lsls	r3, r1, #26
80201dcc:	d502      	bpl.n	80201dd4 <_printf_fp_hex_real+0x1b0>
80201dce:	e016      	b.n	80201dfe <_printf_fp_hex_real+0x1da>
80201dd0:	f1a8 0801 	sub.w	r8, r8, #1
80201dd4:	45e0      	cmp	r8, ip
80201dd6:	dd05      	ble.n	80201de4 <_printf_fp_hex_real+0x1c0>
80201dd8:	eb02 0308 	add.w	r3, r2, r8
80201ddc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
80201de0:	2b30      	cmp	r3, #48	@ 0x30
80201de2:	d0f5      	beq.n	80201dd0 <_printf_fp_hex_real+0x1ac>
80201de4:	f1b8 0f00 	cmp.w	r8, #0
80201de8:	dd09      	ble.n	80201dfe <_printf_fp_hex_real+0x1da>
80201dea:	eb02 0308 	add.w	r3, r2, r8
80201dee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
80201df2:	2b2e      	cmp	r3, #46	@ 0x2e
80201df4:	d103      	bne.n	80201dfe <_printf_fp_hex_real+0x1da>
80201df6:	0709      	lsls	r1, r1, #28
80201df8:	d401      	bmi.n	80201dfe <_printf_fp_hex_real+0x1da>
80201dfa:	f1a8 0801 	sub.w	r8, r8, #1
80201dfe:	2d00      	cmp	r5, #0
80201e00:	dd05      	ble.n	80201e0e <_printf_fp_hex_real+0x1ea>
80201e02:	213e      	movs	r1, #62	@ 0x3e
80201e04:	f802 1008 	strb.w	r1, [r2, r8]
80201e08:	1e6d      	subs	r5, r5, #1
80201e0a:	f108 0801 	add.w	r8, r8, #1
80201e0e:	7c40      	ldrb	r0, [r0, #17]
80201e10:	2e00      	cmp	r6, #0
80201e12:	f802 0008 	strb.w	r0, [r2, r8]
80201e16:	f108 0801 	add.w	r8, r8, #1
80201e1a:	da04      	bge.n	80201e26 <_printf_fp_hex_real+0x202>
80201e1c:	202d      	movs	r0, #45	@ 0x2d
80201e1e:	4276      	negs	r6, r6
80201e20:	f802 0008 	strb.w	r0, [r2, r8]
80201e24:	e002      	b.n	80201e2c <_printf_fp_hex_real+0x208>
80201e26:	202b      	movs	r0, #43	@ 0x2b
80201e28:	f802 0008 	strb.w	r0, [r2, r8]
80201e2c:	210a      	movs	r1, #10
80201e2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
80201e32:	4286      	cmp	r6, r0
80201e34:	f108 0801 	add.w	r8, r8, #1
80201e38:	db0b      	blt.n	80201e52 <_printf_fp_hex_real+0x22e>
80201e3a:	fb96 f3f0 	sdiv	r3, r6, r0
80201e3e:	3330      	adds	r3, #48	@ 0x30
80201e40:	f802 3008 	strb.w	r3, [r2, r8]
80201e44:	fb96 f3f0 	sdiv	r3, r6, r0
80201e48:	f108 0801 	add.w	r8, r8, #1
80201e4c:	fb00 6613 	mls	r6, r0, r3, r6
80201e50:	e001      	b.n	80201e56 <_printf_fp_hex_real+0x232>
80201e52:	2e64      	cmp	r6, #100	@ 0x64
80201e54:	db0c      	blt.n	80201e70 <_printf_fp_hex_real+0x24c>
80201e56:	2064      	movs	r0, #100	@ 0x64
80201e58:	fb96 f3f0 	sdiv	r3, r6, r0
80201e5c:	3330      	adds	r3, #48	@ 0x30
80201e5e:	f802 3008 	strb.w	r3, [r2, r8]
80201e62:	fb96 f3f0 	sdiv	r3, r6, r0
80201e66:	f108 0801 	add.w	r8, r8, #1
80201e6a:	fb00 6613 	mls	r6, r0, r3, r6
80201e6e:	e001      	b.n	80201e74 <_printf_fp_hex_real+0x250>
80201e70:	2e0a      	cmp	r6, #10
80201e72:	db06      	blt.n	80201e82 <_printf_fp_hex_real+0x25e>
80201e74:	fb96 f0f1 	sdiv	r0, r6, r1
80201e78:	3030      	adds	r0, #48	@ 0x30
80201e7a:	f802 0008 	strb.w	r0, [r2, r8]
80201e7e:	f108 0801 	add.w	r8, r8, #1
80201e82:	fb96 f0f1 	sdiv	r0, r6, r1
80201e86:	fb01 6010 	mls	r0, r1, r0, r6
80201e8a:	3030      	adds	r0, #48	@ 0x30
80201e8c:	f802 0008 	strb.w	r0, [r2, r8]
80201e90:	69a1      	ldr	r1, [r4, #24]
80201e92:	f108 0801 	add.w	r8, r8, #1
80201e96:	eb08 0205 	add.w	r2, r8, r5
80201e9a:	eb02 000a 	add.w	r0, r2, sl
80201e9e:	1a08      	subs	r0, r1, r0
80201ea0:	61a0      	str	r0, [r4, #24]
80201ea2:	7820      	ldrb	r0, [r4, #0]
80201ea4:	06c0      	lsls	r0, r0, #27
80201ea6:	d402      	bmi.n	80201eae <_printf_fp_hex_real+0x28a>
80201ea8:	4620      	mov	r0, r4
80201eaa:	f7fe fe53 	bl	80200b54 <_printf_pre_padding>
80201eae:	6a21      	ldr	r1, [r4, #32]
80201eb0:	ae08      	add	r6, sp, #32
80201eb2:	eb01 000a 	add.w	r0, r1, sl
80201eb6:	6220      	str	r0, [r4, #32]
80201eb8:	e004      	b.n	80201ec4 <_printf_fp_hex_real+0x2a0>
80201eba:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
80201ebe:	f816 0b01 	ldrb.w	r0, [r6], #1
80201ec2:	4790      	blx	r2
80201ec4:	f1ba 0a01 	subs.w	sl, sl, #1
80201ec8:	d2f7      	bcs.n	80201eba <_printf_fp_hex_real+0x296>
80201eca:	7820      	ldrb	r0, [r4, #0]
80201ecc:	06c0      	lsls	r0, r0, #27
80201ece:	d502      	bpl.n	80201ed6 <_printf_fp_hex_real+0x2b2>
80201ed0:	4620      	mov	r0, r4
80201ed2:	f7fe fe3f 	bl	80200b54 <_printf_pre_padding>
80201ed6:	466e      	mov	r6, sp
80201ed8:	e009      	b.n	80201eee <_printf_fp_hex_real+0x2ca>
80201eda:	f816 0b01 	ldrb.w	r0, [r6], #1
80201ede:	283e      	cmp	r0, #62	@ 0x3e
80201ee0:	d00f      	beq.n	80201f02 <_printf_fp_hex_real+0x2de>
80201ee2:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
80201ee6:	4790      	blx	r2
80201ee8:	6a20      	ldr	r0, [r4, #32]
80201eea:	1c40      	adds	r0, r0, #1
80201eec:	6220      	str	r0, [r4, #32]
80201eee:	f1b8 0801 	subs.w	r8, r8, #1
80201ef2:	d2f2      	bcs.n	80201eda <_printf_fp_hex_real+0x2b6>
80201ef4:	4620      	mov	r0, r4
80201ef6:	f7fe fe43 	bl	80200b80 <_printf_post_padding>
80201efa:	b009      	add	sp, #36	@ 0x24
80201efc:	2003      	movs	r0, #3
80201efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
80201f02:	6a20      	ldr	r0, [r4, #32]
80201f04:	4428      	add	r0, r5
80201f06:	6220      	str	r0, [r4, #32]
80201f08:	e003      	b.n	80201f12 <_printf_fp_hex_real+0x2ee>
80201f0a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
80201f0e:	2030      	movs	r0, #48	@ 0x30
80201f10:	4790      	blx	r2
80201f12:	1e6d      	subs	r5, r5, #1
80201f14:	d3eb      	bcc.n	80201eee <_printf_fp_hex_real+0x2ca>
80201f16:	e7f8      	b.n	80201f0a <_printf_fp_hex_real+0x2e6>
80201f18:	000039aa 	.word	0x000039aa
80201f1c:	fffffc02 	.word	0xfffffc02

80201f20 <_printf_input_char>:
_printf_input_char():
80201f20:	6901      	ldr	r1, [r0, #16]
80201f22:	1c4a      	adds	r2, r1, #1
80201f24:	6102      	str	r2, [r0, #16]
80201f26:	7808      	ldrb	r0, [r1, #0]
80201f28:	4770      	bx	lr

80201f2a <_printf_char_common>:
_printf_char_common():
80201f2a:	b500      	push	{lr}
80201f2c:	b08f      	sub	sp, #60	@ 0x3c
80201f2e:	e9cd 3101 	strd	r3, r1, [sp, #4]
80201f32:	2100      	movs	r1, #0
80201f34:	9105      	str	r1, [sp, #20]
80201f36:	4905      	ldr	r1, [pc, #20]	@ (80201f4c <_printf_char_common+0x22>)
80201f38:	4479      	add	r1, pc
80201f3a:	e9cd 1003 	strd	r1, r0, [sp, #12]
80201f3e:	4611      	mov	r1, r2
80201f40:	4668      	mov	r0, sp
80201f42:	f7fe ffe9 	bl	80200f18 <__printf>
80201f46:	b00f      	add	sp, #60	@ 0x3c
80201f48:	bd00      	pop	{pc}
80201f4a:	0000      	.short	0x0000
80201f4c:	ffffffe5 	.word	0xffffffe5

80201f50 <_printf_cs_common>:
_printf_cs_common():
80201f50:	b510      	push	{r4, lr}
80201f52:	6943      	ldr	r3, [r0, #20]
80201f54:	b113      	cbz	r3, 80201f5c <_printf_cs_common+0xc>
80201f56:	f3af 8000 	nop.w
80201f5a:	e001      	b.n	80201f60 <_printf_cs_common+0x10>
80201f5c:	f7fe fe33 	bl	80200bc6 <_printf_str>
80201f60:	2001      	movs	r0, #1
80201f62:	bd10      	pop	{r4, pc}

80201f64 <_printf_char>:
_printf_char():
80201f64:	7812      	ldrb	r2, [r2, #0]
80201f66:	f100 0124 	add.w	r1, r0, #36	@ 0x24
80201f6a:	700a      	strb	r2, [r1, #0]
80201f6c:	2200      	movs	r2, #0
80201f6e:	704a      	strb	r2, [r1, #1]
80201f70:	2201      	movs	r2, #1
80201f72:	e7ed      	b.n	80201f50 <_printf_cs_common>

80201f74 <_printf_string>:
_printf_string():
80201f74:	6811      	ldr	r1, [r2, #0]
80201f76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
80201f7a:	e7e9      	b.n	80201f50 <_printf_cs_common>

80201f7c <_printf_lcs_common>:
_printf_lcs_common():
80201f7c:	b510      	push	{r4, lr}
80201f7e:	6943      	ldr	r3, [r0, #20]
80201f80:	b113      	cbz	r3, 80201f88 <_printf_lcs_common+0xc>
80201f82:	f3af 8000 	nop.w
80201f86:	e001      	b.n	80201f8c <_printf_lcs_common+0x10>
80201f88:	f7fe fea8 	bl	80200cdc <_printf_wctomb>
80201f8c:	2001      	movs	r0, #1
80201f8e:	bd10      	pop	{r4, pc}

80201f90 <_printf_wchar>:
_printf_wchar():
80201f90:	6812      	ldr	r2, [r2, #0]
80201f92:	f100 0124 	add.w	r1, r0, #36	@ 0x24
80201f96:	6242      	str	r2, [r0, #36]	@ 0x24
80201f98:	2200      	movs	r2, #0
80201f9a:	6282      	str	r2, [r0, #40]	@ 0x28
80201f9c:	2201      	movs	r2, #1
80201f9e:	e7ed      	b.n	80201f7c <_printf_lcs_common>

80201fa0 <_printf_wstring>:
_printf_wstring():
80201fa0:	6811      	ldr	r1, [r2, #0]
80201fa2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
80201fa6:	e7e9      	b.n	80201f7c <_printf_lcs_common>

80201fa8 <ferror>:
ferror():
80201fa8:	7b00      	ldrb	r0, [r0, #12]
80201faa:	f000 0080 	and.w	r0, r0, #128	@ 0x80
80201fae:	4770      	bx	lr

80201fb0 <_ftell_internal>:
ftell():
80201fb0:	b510      	push	{r4, lr}
_ftell_internal():
80201fb2:	4601      	mov	r1, r0
80201fb4:	68c2      	ldr	r2, [r0, #12]
80201fb6:	0790      	lsls	r0, r2, #30
80201fb8:	d003      	beq.n	80201fc2 <_ftell_internal+0x12>
80201fba:	0690      	lsls	r0, r2, #26
80201fbc:	d507      	bpl.n	80201fce <_ftell_internal+0x1e>
80201fbe:	6a88      	ldr	r0, [r1, #40]	@ 0x28
80201fc0:	e00a      	b.n	80201fd8 <_ftell_internal+0x28>
80201fc2:	f000 f913 	bl	802021ec <__aeabi_errno_addr>
80201fc6:	2101      	movs	r1, #1
80201fc8:	6001      	str	r1, [r0, #0]
80201fca:	1e88      	subs	r0, r1, #2
80201fcc:	bd10      	pop	{r4, pc}
80201fce:	698b      	ldr	r3, [r1, #24]
80201fd0:	6848      	ldr	r0, [r1, #4]
80201fd2:	4418      	add	r0, r3
80201fd4:	690b      	ldr	r3, [r1, #16]
80201fd6:	1ac0      	subs	r0, r0, r3
80201fd8:	f891 3048 	ldrb.w	r3, [r1, #72]	@ 0x48
80201fdc:	b11b      	cbz	r3, 80201fe6 <_ftell_internal+0x36>
80201fde:	f891 1049 	ldrb.w	r1, [r1, #73]	@ 0x49
80201fe2:	1a40      	subs	r0, r0, r1
80201fe4:	bd10      	pop	{r4, pc}
80201fe6:	0311      	lsls	r1, r2, #12
80201fe8:	d5fc      	bpl.n	80201fe4 <_ftell_internal+0x34>
80201fea:	2800      	cmp	r0, #0
80201fec:	ddfa      	ble.n	80201fe4 <_ftell_internal+0x34>
80201fee:	1e40      	subs	r0, r0, #1
80201ff0:	bd10      	pop	{r4, pc}

80201ff2 <setvbuf>:
setvbuf():
80201ff2:	b570      	push	{r4, r5, r6, lr}
80201ff4:	68c4      	ldr	r4, [r0, #12]
80201ff6:	07a5      	lsls	r5, r4, #30
80201ff8:	d013      	beq.n	80202022 <setvbuf+0x30>
80201ffa:	0265      	lsls	r5, r4, #9
80201ffc:	d411      	bmi.n	80202022 <setvbuf+0x30>
80201ffe:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
80202002:	d009      	beq.n	80202018 <setvbuf+0x26>
80202004:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
80202008:	d006      	beq.n	80202018 <setvbuf+0x26>
8020200a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
8020200e:	d108      	bne.n	80202022 <setvbuf+0x30>
80202010:	2301      	movs	r3, #1
80202012:	f100 0124 	add.w	r1, r0, #36	@ 0x24
80202016:	e006      	b.n	80202026 <setvbuf+0x34>
80202018:	1e5d      	subs	r5, r3, #1
8020201a:	f06f 467f 	mvn.w	r6, #4278190080	@ 0xff000000
8020201e:	42b5      	cmp	r5, r6
80202020:	d301      	bcc.n	80202026 <setvbuf+0x34>
80202022:	2001      	movs	r0, #1
80202024:	bd70      	pop	{r4, r5, r6, pc}
80202026:	6101      	str	r1, [r0, #16]
80202028:	61c3      	str	r3, [r0, #28]
8020202a:	6041      	str	r1, [r0, #4]
8020202c:	f424 6170 	bic.w	r1, r4, #3840	@ 0xf00
80202030:	4311      	orrs	r1, r2
80202032:	60c1      	str	r1, [r0, #12]
80202034:	2000      	movs	r0, #0
80202036:	bd70      	pop	{r4, r5, r6, pc}

80202038 <freopen>:
_freopen_locked():
80202038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
freopen():
8020203c:	460c      	mov	r4, r1
8020203e:	4616      	mov	r6, r2
80202040:	0007      	movs	r7, r0
80202042:	d047      	beq.n	802020d4 <freopen+0x9c>
80202044:	4610      	mov	r0, r2
80202046:	f000 f86f 	bl	80202128 <_fclose_internal>
8020204a:	7820      	ldrb	r0, [r4, #0]
8020204c:	1c61      	adds	r1, r4, #1
8020204e:	2861      	cmp	r0, #97	@ 0x61
80202050:	d00a      	beq.n	80202068 <freopen+0x30>
80202052:	2872      	cmp	r0, #114	@ 0x72
80202054:	d002      	beq.n	8020205c <freopen+0x24>
80202056:	2877      	cmp	r0, #119	@ 0x77
80202058:	d13c      	bne.n	802020d4 <freopen+0x9c>
8020205a:	e002      	b.n	80202062 <freopen+0x2a>
8020205c:	2501      	movs	r5, #1
8020205e:	2400      	movs	r4, #0
80202060:	e005      	b.n	8020206e <freopen+0x36>
80202062:	2502      	movs	r5, #2
80202064:	2404      	movs	r4, #4
80202066:	e002      	b.n	8020206e <freopen+0x36>
80202068:	2408      	movs	r4, #8
8020206a:	f248 0502 	movw	r5, #32770	@ 0x8002
8020206e:	f811 0b01 	ldrb.w	r0, [r1], #1
80202072:	282b      	cmp	r0, #43	@ 0x2b
80202074:	d006      	beq.n	80202084 <freopen+0x4c>
80202076:	2862      	cmp	r0, #98	@ 0x62
80202078:	d009      	beq.n	8020208e <freopen+0x56>
8020207a:	f811 0c01 	ldrb.w	r0, [r1, #-1]
8020207e:	2874      	cmp	r0, #116	@ 0x74
80202080:	d00a      	beq.n	80202098 <freopen+0x60>
80202082:	e00b      	b.n	8020209c <freopen+0x64>
80202084:	f045 0503 	orr.w	r5, r5, #3
80202088:	f044 0402 	orr.w	r4, r4, #2
8020208c:	e7ef      	b.n	8020206e <freopen+0x36>
8020208e:	f045 0504 	orr.w	r5, r5, #4
80202092:	f044 0401 	orr.w	r4, r4, #1
80202096:	e7ea      	b.n	8020206e <freopen+0x36>
80202098:	f044 0410 	orr.w	r4, r4, #16
8020209c:	4638      	mov	r0, r7
8020209e:	4621      	mov	r1, r4
802020a0:	f001 ff1e 	bl	80203ee0 <_sys_open>
802020a4:	1c41      	adds	r1, r0, #1
802020a6:	d015      	beq.n	802020d4 <freopen+0x9c>
802020a8:	2100      	movs	r1, #0
802020aa:	6131      	str	r1, [r6, #16]
802020ac:	6071      	str	r1, [r6, #4]
802020ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
802020b2:	60f5      	str	r5, [r6, #12]
802020b4:	61f1      	str	r1, [r6, #28]
802020b6:	6170      	str	r0, [r6, #20]
802020b8:	0720      	lsls	r0, r4, #28
802020ba:	d504      	bpl.n	802020c6 <freopen+0x8e>
802020bc:	4630      	mov	r0, r6
802020be:	2202      	movs	r2, #2
802020c0:	2100      	movs	r1, #0
802020c2:	f7ff f8df 	bl	80201284 <_fseek>
802020c6:	6d30      	ldr	r0, [r6, #80]	@ 0x50
802020c8:	f040 0001 	orr.w	r0, r0, #1
802020cc:	6530      	str	r0, [r6, #80]	@ 0x50
802020ce:	4630      	mov	r0, r6
802020d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
802020d4:	2000      	movs	r0, #0
802020d6:	e7fb      	b.n	802020d0 <freopen+0x98>

802020d8 <fopen>:
fopen():
802020d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
802020dc:	460d      	mov	r5, r1
802020de:	4606      	mov	r6, r0
802020e0:	4c10      	ldr	r4, [pc, #64]	@ (80202124 <fopen+0x4c>)
802020e2:	6d20      	ldr	r0, [r4, #80]	@ 0x50
802020e4:	07c1      	lsls	r1, r0, #31
802020e6:	d004      	beq.n	802020f2 <fopen+0x1a>
802020e8:	0841      	lsrs	r1, r0, #1
802020ea:	d004      	beq.n	802020f6 <fopen+0x1e>
802020ec:	f020 0401 	bic.w	r4, r0, #1
802020f0:	e7f7      	b.n	802020e2 <fopen+0xa>
802020f2:	4622      	mov	r2, r4
802020f4:	e00e      	b.n	80202114 <fopen+0x3c>
802020f6:	2054      	movs	r0, #84	@ 0x54
802020f8:	f7ff fa92 	bl	80201620 <malloc>
802020fc:	0007      	movs	r7, r0
802020fe:	d00e      	beq.n	8020211e <fopen+0x46>
80202100:	6d20      	ldr	r0, [r4, #80]	@ 0x50
80202102:	f047 0101 	orr.w	r1, r7, #1
80202106:	4308      	orrs	r0, r1
80202108:	2154      	movs	r1, #84	@ 0x54
8020210a:	6520      	str	r0, [r4, #80]	@ 0x50
8020210c:	4638      	mov	r0, r7
8020210e:	f7fe fcbc 	bl	80200a8a <__aeabi_memclr4>
80202112:	463a      	mov	r2, r7
80202114:	4629      	mov	r1, r5
80202116:	4630      	mov	r0, r6
80202118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
8020211c:	e78c      	b.n	80202038 <freopen>
8020211e:	2000      	movs	r0, #0
80202120:	e7d6      	b.n	802020d0 <freopen+0x98>
80202122:	0000      	.short	0x0000
80202124:	20000648 	.word	0x20000648

80202128 <_fclose_internal>:
fclose():
80202128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
_fclose_internal():
8020212c:	4604      	mov	r4, r0
8020212e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
80202132:	2600      	movs	r6, #0
80202134:	68c5      	ldr	r5, [r0, #12]
80202136:	e9d4 9704 	ldrd	r9, r7, [r4, #16]
8020213a:	07a8      	lsls	r0, r5, #30
8020213c:	d018      	beq.n	80202170 <_fclose_internal+0x48>
8020213e:	4620      	mov	r0, r4
80202140:	f7ff f95c 	bl	802013fc <_fflush>
80202144:	4638      	mov	r0, r7
80202146:	f001 feaf 	bl	80203ea8 <_sys_close>
8020214a:	2800      	cmp	r0, #0
8020214c:	da00      	bge.n	80202150 <_fclose_internal+0x28>
8020214e:	4646      	mov	r6, r8
80202150:	0528      	lsls	r0, r5, #20
80202152:	d502      	bpl.n	8020215a <_fclose_internal+0x32>
80202154:	4648      	mov	r0, r9
80202156:	f7ff fa92 	bl	8020167e <free>
8020215a:	214c      	movs	r1, #76	@ 0x4c
8020215c:	4620      	mov	r0, r4
8020215e:	f7fe fc94 	bl	80200a8a <__aeabi_memclr4>
80202162:	6d20      	ldr	r0, [r4, #80]	@ 0x50
80202164:	f020 0001 	bic.w	r0, r0, #1
80202168:	6520      	str	r0, [r4, #80]	@ 0x50
8020216a:	4630      	mov	r0, r6
8020216c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
80202170:	4640      	mov	r0, r8
80202172:	e7fb      	b.n	8020216c <_fclose_internal+0x44>

80202174 <_c32rtomb>:
_wcrtomb():
80202174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
_c32rtomb():
80202178:	4616      	mov	r6, r2
8020217a:	460c      	mov	r4, r1
8020217c:	4605      	mov	r5, r0
8020217e:	f000 f825 	bl	802021cc <__rt_ctype_table>
80202182:	6803      	ldr	r3, [r0, #0]
80202184:	f893 0101 	ldrb.w	r0, [r3, #257]	@ 0x101
80202188:	2801      	cmp	r0, #1
8020218a:	d007      	beq.n	8020219c <_c32rtomb+0x28>
8020218c:	2cff      	cmp	r4, #255	@ 0xff
8020218e:	d812      	bhi.n	802021b6 <_c32rtomb+0x42>
80202190:	5d18      	ldrb	r0, [r3, r4]
80202192:	b180      	cbz	r0, 802021b6 <_c32rtomb+0x42>
80202194:	2001      	movs	r0, #1
80202196:	702c      	strb	r4, [r5, #0]
80202198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
8020219c:	f8d3 0107 	ldr.w	r0, [r3, #263]	@ 0x107
802021a0:	4632      	mov	r2, r6
802021a2:	4621      	mov	r1, r4
802021a4:	f203 1307 	addw	r3, r3, #263	@ 0x107
802021a8:	18c7      	adds	r7, r0, r3
802021aa:	4628      	mov	r0, r5
802021ac:	46bc      	mov	ip, r7
802021ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
802021b2:	2301      	movs	r3, #1
802021b4:	4760      	bx	ip
802021b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
802021ba:	e7ed      	b.n	80202198 <_c32rtomb+0x24>

802021bc <__rt_SIGRTRED>:
__rt_SIGRTRED():
802021bc:	b510      	push	{r4, lr}
802021be:	f000 f927 	bl	80202410 <__rt_SIGRTRED_inner>
802021c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
802021c6:	f000 b91e 	b.w	80202406 <__sig_exit>
	...

802021cc <__rt_ctype_table>:
__rt_ctype_table():
802021cc:	b510      	push	{r4, lr}
802021ce:	f000 f809 	bl	802021e4 <__rt_locale>
802021d2:	1d00      	adds	r0, r0, #4
802021d4:	bd10      	pop	{r4, pc}
802021d6:	bf00      	nop
802021d8:	0000344d 	.word	0x0000344d

802021dc <__rt_heap_descriptor>:
__rt_heap_descriptor():
802021dc:	4800      	ldr	r0, [pc, #0]	@ (802021e0 <__rt_heap_descriptor+0x4>)
802021de:	4770      	bx	lr
802021e0:	2000074c 	.word	0x2000074c

802021e4 <__rt_locale>:
__rt_locale():
802021e4:	4800      	ldr	r0, [pc, #0]	@ (802021e8 <__rt_locale+0x4>)
802021e6:	4770      	bx	lr
802021e8:	20000764 	.word	0x20000764

802021ec <__aeabi_errno_addr>:
__errno$intlibspace():
802021ec:	4800      	ldr	r0, [pc, #0]	@ (802021f0 <__aeabi_errno_addr+0x4>)
__aeabi_errno_addr():
802021ee:	4770      	bx	lr
802021f0:	20000744 	.word	0x20000744

802021f4 <__use_no_heap>:
__use_no_heap():
802021f4:	4770      	bx	lr

802021f6 <__heap$guard>:
__heap$guard():
802021f6:	4770      	bx	lr

802021f8 <_terminate_user_alloc>:
_terminate_user_alloc():
802021f8:	4770      	bx	lr

802021fa <_init_user_alloc>:
_init_user_alloc():
802021fa:	4770      	bx	lr

802021fc <__Heap_Full>:
__Heap_Full():
802021fc:	b538      	push	{r3, r4, r5, lr}
802021fe:	4604      	mov	r4, r0
80202200:	460a      	mov	r2, r1
80202202:	2000      	movs	r0, #0
80202204:	4669      	mov	r1, sp
80202206:	f3af 8000 	nop.w
8020220a:	2800      	cmp	r0, #0
8020220c:	bf08      	it	eq
8020220e:	bd38      	popeq	{r3, r4, r5, pc}
80202210:	4602      	mov	r2, r0
80202212:	9900      	ldr	r1, [sp, #0]
80202214:	4620      	mov	r0, r4
80202216:	f000 f91b 	bl	80202450 <__Heap_ProvideMemory>
8020221a:	2001      	movs	r0, #1
8020221c:	bd38      	pop	{r3, r4, r5, pc}

8020221e <__Heap_Broken>:
__Heap_Broken():
8020221e:	2001      	movs	r0, #1
80202220:	f000 b949 	b.w	802024b6 <__rt_SIGRTMEM>

80202224 <_init_alloc>:
_init_alloc():
80202224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
80202226:	f3af 8000 	nop.w
8020222a:	4605      	mov	r5, r0
8020222c:	2000      	movs	r0, #0
8020222e:	460c      	mov	r4, r1
80202230:	200c      	movs	r0, #12
80202232:	bf00      	nop
80202234:	4606      	mov	r6, r0
80202236:	19a8      	adds	r0, r5, r6
80202238:	42a0      	cmp	r0, r4
8020223a:	d90d      	bls.n	80202258 <_init_alloc+0x34>
8020223c:	4632      	mov	r2, r6
8020223e:	4669      	mov	r1, sp
80202240:	2000      	movs	r0, #0
80202242:	f3af 8000 	nop.w
80202246:	0007      	movs	r7, r0
80202248:	bf08      	it	eq
8020224a:	f000 f934 	bleq	802024b6 <__rt_SIGRTMEM>
8020224e:	9800      	ldr	r0, [sp, #0]
80202250:	42a0      	cmp	r0, r4
80202252:	bf18      	it	ne
80202254:	4605      	movne	r5, r0
80202256:	19c4      	adds	r4, r0, r7
80202258:	f7ff ffc0 	bl	802021dc <__rt_heap_descriptor>
8020225c:	6005      	str	r5, [r0, #0]
8020225e:	4607      	mov	r7, r0
80202260:	1df0      	adds	r0, r6, #7
80202262:	f020 0007 	bic.w	r0, r0, #7
80202266:	1946      	adds	r6, r0, r5
80202268:	4628      	mov	r0, r5
8020226a:	f000 f80a 	bl	80202282 <__Heap_Initialize>
8020226e:	42b4      	cmp	r4, r6
80202270:	bf08      	it	eq
80202272:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
80202274:	1ba2      	subs	r2, r4, r6
80202276:	4631      	mov	r1, r6
80202278:	6838      	ldr	r0, [r7, #0]
8020227a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
8020227e:	f000 b8e7 	b.w	80202450 <__Heap_ProvideMemory>

80202282 <__Heap_Initialize>:
__Heap_Initialize():
80202282:	2100      	movs	r1, #0
80202284:	6001      	str	r1, [r0, #0]
80202286:	6041      	str	r1, [r0, #4]
80202288:	4770      	bx	lr

8020228a <__Heap_DescSize>:
__Heap_DescSize():
8020228a:	200c      	movs	r0, #12
8020228c:	4770      	bx	lr
	...

80202290 <_printf_fp_infnan>:
_printf_fp_infnan():
80202290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
80202294:	461f      	mov	r7, r3
80202296:	4604      	mov	r4, r0
80202298:	2603      	movs	r6, #3
8020229a:	6801      	ldr	r1, [r0, #0]
8020229c:	2a07      	cmp	r2, #7
8020229e:	f401 6000 	and.w	r0, r1, #2048	@ 0x800
802022a2:	db04      	blt.n	802022ae <_printf_fp_infnan+0x1e>
802022a4:	b108      	cbz	r0, 802022aa <_printf_fp_infnan+0x1a>
802022a6:	a516      	add	r5, pc, #88	@ (adr r5, 80202300 <_printf_fp_infnan+0x70>)
802022a8:	e005      	b.n	802022b6 <_printf_fp_infnan+0x26>
802022aa:	a516      	add	r5, pc, #88	@ (adr r5, 80202304 <_printf_fp_infnan+0x74>)
802022ac:	e003      	b.n	802022b6 <_printf_fp_infnan+0x26>
802022ae:	b108      	cbz	r0, 802022b4 <_printf_fp_infnan+0x24>
802022b0:	a515      	add	r5, pc, #84	@ (adr r5, 80202308 <_printf_fp_infnan+0x78>)
802022b2:	e000      	b.n	802022b6 <_printf_fp_infnan+0x26>
802022b4:	a515      	add	r5, pc, #84	@ (adr r5, 8020230c <_printf_fp_infnan+0x7c>)
802022b6:	f021 0010 	bic.w	r0, r1, #16
802022ba:	6020      	str	r0, [r4, #0]
802022bc:	69a0      	ldr	r0, [r4, #24]
802022be:	1ec0      	subs	r0, r0, #3
802022c0:	61a0      	str	r0, [r4, #24]
802022c2:	b10f      	cbz	r7, 802022c8 <_printf_fp_infnan+0x38>
802022c4:	1e40      	subs	r0, r0, #1
802022c6:	61a0      	str	r0, [r4, #24]
802022c8:	4620      	mov	r0, r4
802022ca:	f7fe fc43 	bl	80200b54 <_printf_pre_padding>
802022ce:	b14f      	cbz	r7, 802022e4 <_printf_fp_infnan+0x54>
802022d0:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
802022d4:	4638      	mov	r0, r7
802022d6:	4790      	blx	r2
802022d8:	6a20      	ldr	r0, [r4, #32]
802022da:	1c40      	adds	r0, r0, #1
802022dc:	6220      	str	r0, [r4, #32]
802022de:	1cc0      	adds	r0, r0, #3
802022e0:	6220      	str	r0, [r4, #32]
802022e2:	e006      	b.n	802022f2 <_printf_fp_infnan+0x62>
802022e4:	6a20      	ldr	r0, [r4, #32]
802022e6:	e7fa      	b.n	802022de <_printf_fp_infnan+0x4e>
802022e8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
802022ec:	f815 0b01 	ldrb.w	r0, [r5], #1
802022f0:	4790      	blx	r2
802022f2:	1e76      	subs	r6, r6, #1
802022f4:	d2f8      	bcs.n	802022e8 <_printf_fp_infnan+0x58>
802022f6:	4620      	mov	r0, r4
802022f8:	f7fe fc42 	bl	80200b80 <_printf_post_padding>
802022fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
80202300:	004e414e 	.word	0x004e414e
80202304:	006e616e 	.word	0x006e616e
80202308:	00464e49 	.word	0x00464e49
8020230c:	00666e69 	.word	0x00666e69

80202310 <_btod_etento>:
_btod_etento():
80202310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
80202314:	4681      	mov	r9, r0
80202316:	4616      	mov	r6, r2
80202318:	b08a      	sub	sp, #40	@ 0x28
8020231a:	4835      	ldr	r0, [pc, #212]	@ (802023f0 <_btod_etento+0xe0>)
8020231c:	4478      	add	r0, pc
8020231e:	c80d      	ldmia	r0, {r0, r2, r3}
80202320:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
80202324:	4832      	ldr	r0, [pc, #200]	@ (802023f0 <_btod_etento+0xe0>)
80202326:	4478      	add	r0, pc
80202328:	1c80      	adds	r0, r0, #2
8020232a:	ac03      	add	r4, sp, #12
8020232c:	c80d      	ldmia	r0, {r0, r2, r3}
8020232e:	e884 000d 	stmia.w	r4, {r0, r2, r3}
80202332:	f641 309b 	movw	r0, #7067	@ 0x1b9b
80202336:	4408      	add	r0, r1
80202338:	2137      	movs	r1, #55	@ 0x37
8020233a:	fb90 f2f1 	sdiv	r2, r0, r1
8020233e:	fb90 f5f1 	sdiv	r5, r0, r1
80202342:	f1a5 0580 	sub.w	r5, r5, #128	@ 0x80
80202346:	fb01 0412 	mls	r4, r1, r2, r0
8020234a:	3c1b      	subs	r4, #27
8020234c:	d502      	bpl.n	80202354 <_btod_etento+0x44>
8020234e:	4264      	negs	r4, r4
80202350:	2001      	movs	r0, #1
80202352:	e000      	b.n	80202356 <_btod_etento+0x46>
80202354:	2000      	movs	r0, #0
80202356:	f8df a098 	ldr.w	sl, [pc, #152]	@ 802023f0 <_btod_etento+0xe0>
8020235a:	4680      	mov	r8, r0
8020235c:	2700      	movs	r7, #0
8020235e:	44fa      	add	sl, pc
80202360:	f1aa 0abe 	sub.w	sl, sl, #190	@ 0xbe
80202364:	e00e      	b.n	80202384 <_btod_etento+0x74>
80202366:	07e0      	lsls	r0, r4, #31
80202368:	d00a      	beq.n	80202380 <_btod_etento+0x70>
8020236a:	4632      	mov	r2, r6
8020236c:	4668      	mov	r0, sp
8020236e:	eb07 0147 	add.w	r1, r7, r7, lsl #1
80202372:	2301      	movs	r3, #1
80202374:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
80202378:	f002 ffd9 	bl	8020532e <_btod_emul>
8020237c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
80202380:	1064      	asrs	r4, r4, #1
80202382:	1c7f      	adds	r7, r7, #1
80202384:	2c00      	cmp	r4, #0
80202386:	d1ee      	bne.n	80202366 <_btod_etento+0x56>
80202388:	4f19      	ldr	r7, [pc, #100]	@ (802023f0 <_btod_etento+0xe0>)
8020238a:	447f      	add	r7, pc
8020238c:	3fae      	subs	r7, #174	@ 0xae
8020238e:	e019      	b.n	802023c4 <_btod_etento+0xb4>
80202390:	07e8      	lsls	r0, r5, #31
80202392:	d015      	beq.n	802023c0 <_btod_etento+0xb0>
80202394:	eb07 1004 	add.w	r0, r7, r4, lsl #4
80202398:	f10d 0a18 	add.w	sl, sp, #24
8020239c:	e890 000e 	ldmia.w	r0, {r1, r2, r3}
802023a0:	e88a 000e 	stmia.w	sl, {r1, r2, r3}
802023a4:	68c0      	ldr	r0, [r0, #12]
802023a6:	42f0      	cmn	r0, r6
802023a8:	d101      	bne.n	802023ae <_btod_etento+0x9e>
802023aa:	1998      	adds	r0, r3, r6
802023ac:	9008      	str	r0, [sp, #32]
802023ae:	4632      	mov	r2, r6
802023b0:	2301      	movs	r3, #1
802023b2:	a906      	add	r1, sp, #24
802023b4:	a803      	add	r0, sp, #12
802023b6:	f002 ffba 	bl	8020532e <_btod_emul>
802023ba:	ab03      	add	r3, sp, #12
802023bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
802023c0:	106d      	asrs	r5, r5, #1
802023c2:	1c64      	adds	r4, r4, #1
802023c4:	2d00      	cmp	r5, #0
802023c6:	d1e3      	bne.n	80202390 <_btod_etento+0x80>
802023c8:	f04f 0301 	mov.w	r3, #1
802023cc:	4632      	mov	r2, r6
802023ce:	4669      	mov	r1, sp
802023d0:	f1b8 0f00 	cmp.w	r8, #0
802023d4:	a803      	add	r0, sp, #12
802023d6:	d002      	beq.n	802023de <_btod_etento+0xce>
802023d8:	f002 ff94 	bl	80205304 <_btod_ediv>
802023dc:	e001      	b.n	802023e2 <_btod_etento+0xd2>
802023de:	f002 ffa6 	bl	8020532e <_btod_emul>
802023e2:	e9c9 0100 	strd	r0, r1, [r9]
802023e6:	f8c9 2008 	str.w	r2, [r9, #8]
802023ea:	b00a      	add	sp, #40	@ 0x28
802023ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
802023f0:	00003448 	.word	0x00003448

802023f4 <exit>:
exit():
802023f4:	b510      	push	{r4, lr}
802023f6:	4604      	mov	r4, r0
802023f8:	f3af 8000 	nop.w
802023fc:	4620      	mov	r0, r4
802023fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
80202402:	f7fe baa1 	b.w	80200948 <__rt_exit>

80202406 <__sig_exit>:
__sig_exit():
80202406:	2800      	cmp	r0, #0
80202408:	d001      	beq.n	8020240e <__sig_exit+0x8>
8020240a:	f000 b81b 	b.w	80202444 <_sys_exit>
8020240e:	4770      	bx	lr

80202410 <__rt_SIGRTRED_inner>:
__rt_SIGRTRED_inner():
80202410:	b510      	push	{r4, lr}
80202412:	4601      	mov	r1, r0
80202414:	a002      	add	r0, pc, #8	@ (adr r0, 80202420 <__rt_SIGRTRED_inner+0x10>)
80202416:	f000 f835 	bl	80202484 <__default_signal_display>
8020241a:	2001      	movs	r0, #1
8020241c:	bd10      	pop	{r4, pc}
8020241e:	0000      	.short	0x0000
80202420:	52474953 	.word	0x52474953
80202424:	44455254 	.word	0x44455254
80202428:	6552203a 	.word	0x6552203a
8020242c:	65726964 	.word	0x65726964
80202430:	203a7463 	.word	0x203a7463
80202434:	276e6163 	.word	0x276e6163
80202438:	706f2074 	.word	0x706f2074
8020243c:	203a6e65 	.word	0x203a6e65
80202440:	00000000 	.word	0x00000000

80202444 <_sys_exit>:
_sys_exit():
80202444:	4901      	ldr	r1, [pc, #4]	@ (8020244c <_sys_exit+0x8>)
80202446:	2018      	movs	r0, #24
80202448:	beab      	bkpt	0x00ab
8020244a:	e7fe      	b.n	8020244a <_sys_exit+0x6>
8020244c:	00020026 	.word	0x00020026

80202450 <__Heap_ProvideMemory>:
_maybe_terminate_alloc():
80202450:	4603      	mov	r3, r0
__Heap_ProvideMemory():
80202452:	6840      	ldr	r0, [r0, #4]
80202454:	468c      	mov	ip, r1
80202456:	2800      	cmp	r0, #0
80202458:	bf18      	it	ne
8020245a:	4288      	cmpne	r0, r1
8020245c:	bf3c      	itt	cc
8020245e:	4603      	movcc	r3, r0
80202460:	6840      	ldrcc	r0, [r0, #4]
80202462:	d3f8      	bcc.n	80202456 <__Heap_ProvideMemory+0x6>
80202464:	6818      	ldr	r0, [r3, #0]
80202466:	4418      	add	r0, r3
80202468:	4288      	cmp	r0, r1
8020246a:	d007      	beq.n	8020247c <__Heap_ProvideMemory+0x2c>
8020246c:	f10c 0003 	add.w	r0, ip, #3
80202470:	f020 0007 	bic.w	r0, r0, #7
80202474:	1d00      	adds	r0, r0, #4
80202476:	1a41      	subs	r1, r0, r1
80202478:	1a52      	subs	r2, r2, r1
8020247a:	4601      	mov	r1, r0
8020247c:	1d08      	adds	r0, r1, #4
8020247e:	600a      	str	r2, [r1, #0]
80202480:	f7ff b8fd 	b.w	8020167e <free>

80202484 <__default_signal_display>:
__default_signal_display():
80202484:	b570      	push	{r4, r5, r6, lr}
80202486:	4605      	mov	r5, r0
80202488:	460c      	mov	r4, r1
8020248a:	200a      	movs	r0, #10
8020248c:	e000      	b.n	80202490 <__default_signal_display+0xc>
8020248e:	1c6d      	adds	r5, r5, #1
80202490:	f001 fd6e 	bl	80203f70 <_ttywrch>
80202494:	b135      	cbz	r5, 802024a4 <__default_signal_display+0x20>
80202496:	7828      	ldrb	r0, [r5, #0]
80202498:	2800      	cmp	r0, #0
8020249a:	d1f8      	bne.n	8020248e <__default_signal_display+0xa>
8020249c:	e002      	b.n	802024a4 <__default_signal_display+0x20>
8020249e:	1c64      	adds	r4, r4, #1
802024a0:	f001 fd66 	bl	80203f70 <_ttywrch>
802024a4:	b114      	cbz	r4, 802024ac <__default_signal_display+0x28>
802024a6:	7820      	ldrb	r0, [r4, #0]
802024a8:	2800      	cmp	r0, #0
802024aa:	d1f8      	bne.n	8020249e <__default_signal_display+0x1a>
802024ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
802024b0:	200a      	movs	r0, #10
802024b2:	f001 bd5d 	b.w	80203f70 <_ttywrch>

802024b6 <__rt_SIGRTMEM>:
__rt_SIGRTMEM():
802024b6:	b510      	push	{r4, lr}
802024b8:	f000 f806 	bl	802024c8 <__rt_SIGRTMEM_inner>
802024bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
802024c0:	f7ff bfa1 	b.w	80202406 <__sig_exit>

802024c4 <__use_no_semihosting_swi>:
__I$use$semihosting():
802024c4:	4770      	bx	lr

802024c6 <__semihosting_library_function>:
	...

802024c8 <__rt_SIGRTMEM_inner>:
__rt_SIGRTMEM_inner():
802024c8:	b510      	push	{r4, lr}
802024ca:	2801      	cmp	r0, #1
802024cc:	d005      	beq.n	802024da <__rt_SIGRTMEM_inner+0x12>
802024ce:	2100      	movs	r1, #0
802024d0:	a003      	add	r0, pc, #12	@ (adr r0, 802024e0 <__rt_SIGRTMEM_inner+0x18>)
802024d2:	f7ff ffd7 	bl	80202484 <__default_signal_display>
802024d6:	2001      	movs	r0, #1
802024d8:	bd10      	pop	{r4, pc}
802024da:	a109      	add	r1, pc, #36	@ (adr r1, 80202500 <__rt_SIGRTMEM_inner+0x38>)
802024dc:	e7f8      	b.n	802024d0 <__rt_SIGRTMEM_inner+0x8>
802024de:	0000      	.short	0x0000
802024e0:	52474953 	.word	0x52474953
802024e4:	4d454d54 	.word	0x4d454d54
802024e8:	754f203a 	.word	0x754f203a
802024ec:	666f2074 	.word	0x666f2074
802024f0:	61656820 	.word	0x61656820
802024f4:	656d2070 	.word	0x656d2070
802024f8:	79726f6d 	.word	0x79726f6d
802024fc:	00000000 	.word	0x00000000
80202500:	6548203a 	.word	0x6548203a
80202504:	6d207061 	.word	0x6d207061
80202508:	726f6d65 	.word	0x726f6d65
8020250c:	6f632079 	.word	0x6f632079
80202510:	70757272 	.word	0x70757272
80202514:	00646574 	.word	0x00646574

80202518 <ARM_MPU_ClrRegion>:
ARM_MPU_ClrRegion():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:304

/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
80202518:	b580      	push	{r7, lr}
8020251a:	b082      	sub	sp, #8
8020251c:	9001      	str	r0, [sp, #4]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:305
  ARM_MPU_ClrRegionEx(MPU, rnr);
8020251e:	9901      	ldr	r1, [sp, #4]
80202520:	f64e 5090 	movw	r0, #60816	@ 0xed90
80202524:	f2ce 0000 	movt	r0, #57344	@ 0xe000
80202528:	f000 f802 	bl	80202530 <ARM_MPU_ClrRegionEx>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:306
}
8020252c:	b002      	add	sp, #8
8020252e:	bd80      	pop	{r7, pc}

80202530 <ARM_MPU_ClrRegionEx>:
ARM_MPU_ClrRegionEx():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:295
{
80202530:	b082      	sub	sp, #8
80202532:	9001      	str	r0, [sp, #4]
80202534:	9100      	str	r1, [sp, #0]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:296
  mpu->RNR = rnr;
80202536:	9800      	ldr	r0, [sp, #0]
80202538:	9901      	ldr	r1, [sp, #4]
8020253a:	6088      	str	r0, [r1, #8]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:297
  mpu->RLAR = 0U;
8020253c:	9901      	ldr	r1, [sp, #4]
8020253e:	2000      	movs	r0, #0
80202540:	6108      	str	r0, [r1, #16]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:298
}
80202542:	b002      	add	sp, #8
80202544:	4770      	bx	lr
	...

80202548 <ARM_MPU_Disable>:
ARM_MPU_Disable():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:214
  __DMB();
80202548:	f3bf 8f5f 	dmb	sy
8020254c:	f64e 5124 	movw	r1, #60708	@ 0xed24
80202550:	f2ce 0100 	movt	r1, #57344	@ 0xe000
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:216
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
80202554:	6808      	ldr	r0, [r1, #0]
80202556:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
8020255a:	6008      	str	r0, [r1, #0]
8020255c:	f64e 5194 	movw	r1, #60820	@ 0xed94
80202560:	f2ce 0100 	movt	r1, #57344	@ 0xe000
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:218
  MPU->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
80202564:	6808      	ldr	r0, [r1, #0]
80202566:	f020 0001 	bic.w	r0, r0, #1
8020256a:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:219
  __DSB();
8020256c:	f3bf 8f4f 	dsb	sy
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:220
  __ISB();
80202570:	f3bf 8f6f 	isb	sy
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:221
}
80202574:	4770      	bx	lr
	...

80202578 <ARM_MPU_Enable>:
ARM_MPU_Enable():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:200
{
80202578:	b081      	sub	sp, #4
8020257a:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:201
  __DMB();
8020257c:	f3bf 8f5f 	dmb	sy
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:202
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
80202580:	9800      	ldr	r0, [sp, #0]
80202582:	f040 0001 	orr.w	r0, r0, #1
80202586:	f64e 5194 	movw	r1, #60820	@ 0xed94
8020258a:	f2ce 0100 	movt	r1, #57344	@ 0xe000
8020258e:	6008      	str	r0, [r1, #0]
80202590:	f64e 5124 	movw	r1, #60708	@ 0xed24
80202594:	f2ce 0100 	movt	r1, #57344	@ 0xe000
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:204
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
80202598:	6808      	ldr	r0, [r1, #0]
8020259a:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
8020259e:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:206
  __DSB();
802025a0:	f3bf 8f4f 	dsb	sy
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:207
  __ISB();
802025a4:	f3bf 8f6f 	isb	sy
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:208
}
802025a8:	b001      	add	sp, #4
802025aa:	4770      	bx	lr

802025ac <ARM_MPU_Load>:
ARM_MPU_Load():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:404
* \param rnr First region number to be configured.
* \param table Pointer to the MPU configuration table.
* \param cnt Amount of regions to be configured.
*/
__STATIC_INLINE void ARM_MPU_Load(uint32_t rnr, ARM_MPU_Region_t const* table, uint32_t cnt)
{
802025ac:	b580      	push	{r7, lr}
802025ae:	b084      	sub	sp, #16
802025b0:	9003      	str	r0, [sp, #12]
802025b2:	9102      	str	r1, [sp, #8]
802025b4:	9201      	str	r2, [sp, #4]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:405
  ARM_MPU_LoadEx(MPU, rnr, table, cnt);
802025b6:	9903      	ldr	r1, [sp, #12]
802025b8:	9a02      	ldr	r2, [sp, #8]
802025ba:	9b01      	ldr	r3, [sp, #4]
802025bc:	f64e 5090 	movw	r0, #60816	@ 0xed90
802025c0:	f2ce 0000 	movt	r0, #57344	@ 0xe000
802025c4:	f000 f802 	bl	802025cc <ARM_MPU_LoadEx>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:406
}
802025c8:	b004      	add	sp, #16
802025ca:	bd80      	pop	{r7, pc}

802025cc <ARM_MPU_LoadEx>:
ARM_MPU_LoadEx():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:374
{
802025cc:	b580      	push	{r7, lr}
802025ce:	b088      	sub	sp, #32
802025d0:	9007      	str	r0, [sp, #28]
802025d2:	9106      	str	r1, [sp, #24]
802025d4:	9205      	str	r2, [sp, #20]
802025d6:	9304      	str	r3, [sp, #16]
802025d8:	2002      	movs	r0, #2
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:375
  const uint32_t rowWordSize = sizeof(ARM_MPU_Region_t)/4U;
802025da:	9003      	str	r0, [sp, #12]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:376
  if (cnt == 1U) {
802025dc:	9804      	ldr	r0, [sp, #16]
802025de:	2801      	cmp	r0, #1
802025e0:	d10a      	bne.n	802025f8 <ARM_MPU_LoadEx+0x2c>
802025e2:	e7ff      	b.n	802025e4 <ARM_MPU_LoadEx+0x18>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:377
    mpu->RNR = rnr;
802025e4:	9806      	ldr	r0, [sp, #24]
802025e6:	9907      	ldr	r1, [sp, #28]
802025e8:	6088      	str	r0, [r1, #8]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:378
    ARM_MPU_OrderedMemcpy(&(mpu->RBAR), &(table->RBAR), rowWordSize);
802025ea:	9807      	ldr	r0, [sp, #28]
802025ec:	300c      	adds	r0, #12
802025ee:	9905      	ldr	r1, [sp, #20]
802025f0:	2202      	movs	r2, #2
802025f2:	f000 f841 	bl	80202678 <ARM_MPU_OrderedMemcpy>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:379
  } else {
802025f6:	e03c      	b.n	80202672 <ARM_MPU_LoadEx+0xa6>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:380
    uint32_t rnrBase   = rnr & ~(MPU_TYPE_RALIASES-1U);
802025f8:	9806      	ldr	r0, [sp, #24]
802025fa:	f020 0003 	bic.w	r0, r0, #3
802025fe:	9002      	str	r0, [sp, #8]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:381
    uint32_t rnrOffset = rnr % MPU_TYPE_RALIASES;
80202600:	9806      	ldr	r0, [sp, #24]
80202602:	f000 0003 	and.w	r0, r0, #3
80202606:	9001      	str	r0, [sp, #4]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:383
    mpu->RNR = rnrBase;
80202608:	9802      	ldr	r0, [sp, #8]
8020260a:	9907      	ldr	r1, [sp, #28]
8020260c:	6088      	str	r0, [r1, #8]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:384
    while ((rnrOffset + cnt) > MPU_TYPE_RALIASES) {
8020260e:	e7ff      	b.n	80202610 <ARM_MPU_LoadEx+0x44>
80202610:	9801      	ldr	r0, [sp, #4]
80202612:	9904      	ldr	r1, [sp, #16]
80202614:	4408      	add	r0, r1
80202616:	2805      	cmp	r0, #5
80202618:	d320      	bcc.n	8020265c <ARM_MPU_LoadEx+0x90>
8020261a:	e7ff      	b.n	8020261c <ARM_MPU_LoadEx+0x50>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:385
      uint32_t c = MPU_TYPE_RALIASES - rnrOffset;
8020261c:	9801      	ldr	r0, [sp, #4]
8020261e:	f1c0 0004 	rsb	r0, r0, #4
80202622:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:386
      ARM_MPU_OrderedMemcpy(&(mpu->RBAR)+(rnrOffset*2U), &(table->RBAR), c*rowWordSize);
80202624:	9807      	ldr	r0, [sp, #28]
80202626:	9901      	ldr	r1, [sp, #4]
80202628:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
8020262c:	300c      	adds	r0, #12
8020262e:	9905      	ldr	r1, [sp, #20]
80202630:	9a00      	ldr	r2, [sp, #0]
80202632:	0052      	lsls	r2, r2, #1
80202634:	f000 f820 	bl	80202678 <ARM_MPU_OrderedMemcpy>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:387
      table += c;
80202638:	9900      	ldr	r1, [sp, #0]
8020263a:	9805      	ldr	r0, [sp, #20]
8020263c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
80202640:	9005      	str	r0, [sp, #20]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:388
      cnt -= c;
80202642:	9900      	ldr	r1, [sp, #0]
80202644:	9804      	ldr	r0, [sp, #16]
80202646:	1a40      	subs	r0, r0, r1
80202648:	9004      	str	r0, [sp, #16]
8020264a:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:389
      rnrOffset = 0U;
8020264c:	9001      	str	r0, [sp, #4]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:390
      rnrBase += MPU_TYPE_RALIASES;
8020264e:	9802      	ldr	r0, [sp, #8]
80202650:	3004      	adds	r0, #4
80202652:	9002      	str	r0, [sp, #8]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:391
      mpu->RNR = rnrBase;
80202654:	9802      	ldr	r0, [sp, #8]
80202656:	9907      	ldr	r1, [sp, #28]
80202658:	6088      	str	r0, [r1, #8]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:384
    while ((rnrOffset + cnt) > MPU_TYPE_RALIASES) {
8020265a:	e7d9      	b.n	80202610 <ARM_MPU_LoadEx+0x44>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:394
    ARM_MPU_OrderedMemcpy(&(mpu->RBAR)+(rnrOffset*2U), &(table->RBAR), cnt*rowWordSize);
8020265c:	9807      	ldr	r0, [sp, #28]
8020265e:	9901      	ldr	r1, [sp, #4]
80202660:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
80202664:	300c      	adds	r0, #12
80202666:	9905      	ldr	r1, [sp, #20]
80202668:	9a04      	ldr	r2, [sp, #16]
8020266a:	0052      	lsls	r2, r2, #1
8020266c:	f000 f804 	bl	80202678 <ARM_MPU_OrderedMemcpy>
80202670:	e7ff      	b.n	80202672 <ARM_MPU_LoadEx+0xa6>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:396
}
80202672:	b008      	add	sp, #32
80202674:	bd80      	pop	{r7, pc}
	...

80202678 <ARM_MPU_OrderedMemcpy>:
ARM_MPU_OrderedMemcpy():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:359
{
80202678:	b084      	sub	sp, #16
8020267a:	9003      	str	r0, [sp, #12]
8020267c:	9102      	str	r1, [sp, #8]
8020267e:	9201      	str	r2, [sp, #4]
80202680:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:361
  for (i = 0U; i < len; ++i)
80202682:	9000      	str	r0, [sp, #0]
80202684:	e7ff      	b.n	80202686 <ARM_MPU_OrderedMemcpy+0xe>
80202686:	9800      	ldr	r0, [sp, #0]
80202688:	9901      	ldr	r1, [sp, #4]
8020268a:	4288      	cmp	r0, r1
8020268c:	d20c      	bcs.n	802026a8 <ARM_MPU_OrderedMemcpy+0x30>
8020268e:	e7ff      	b.n	80202690 <ARM_MPU_OrderedMemcpy+0x18>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:363
    dst[i] = src[i];
80202690:	9802      	ldr	r0, [sp, #8]
80202692:	9a00      	ldr	r2, [sp, #0]
80202694:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
80202698:	9903      	ldr	r1, [sp, #12]
8020269a:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:364
  }
8020269e:	e7ff      	b.n	802026a0 <ARM_MPU_OrderedMemcpy+0x28>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:361
  for (i = 0U; i < len; ++i)
802026a0:	9800      	ldr	r0, [sp, #0]
802026a2:	3001      	adds	r0, #1
802026a4:	9000      	str	r0, [sp, #0]
802026a6:	e7ee      	b.n	80202686 <ARM_MPU_OrderedMemcpy+0xe>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:365
}
802026a8:	b004      	add	sp, #16
802026aa:	4770      	bx	lr

802026ac <ARM_MPU_SetMemAttr>:
ARM_MPU_SetMemAttr():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:275
{
802026ac:	b580      	push	{r7, lr}
802026ae:	b082      	sub	sp, #8
802026b0:	f88d 0007 	strb.w	r0, [sp, #7]
802026b4:	f88d 1006 	strb.w	r1, [sp, #6]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:276
  ARM_MPU_SetMemAttrEx(MPU, idx, attr);
802026b8:	f89d 1007 	ldrb.w	r1, [sp, #7]
802026bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
802026c0:	f64e 5090 	movw	r0, #60816	@ 0xed90
802026c4:	f2ce 0000 	movt	r0, #57344	@ 0xe000
802026c8:	f000 f802 	bl	802026d0 <ARM_MPU_SetMemAttrEx>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:277
}
802026cc:	b002      	add	sp, #8
802026ce:	bd80      	pop	{r7, pc}

802026d0 <ARM_MPU_SetMemAttrEx>:
ARM_MPU_SetMemAttrEx():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:258
{
802026d0:	b084      	sub	sp, #16
802026d2:	9003      	str	r0, [sp, #12]
802026d4:	f88d 100b 	strb.w	r1, [sp, #11]
802026d8:	f88d 200a 	strb.w	r2, [sp, #10]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:259
  const uint8_t reg = idx / 4U;
802026dc:	f89d 000b 	ldrb.w	r0, [sp, #11]
802026e0:	0880      	lsrs	r0, r0, #2
802026e2:	f88d 0009 	strb.w	r0, [sp, #9]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:260
  const uint32_t pos = ((idx % 4U) * 8U);
802026e6:	f89d 000b 	ldrb.w	r0, [sp, #11]
802026ea:	f000 0003 	and.w	r0, r0, #3
802026ee:	00c0      	lsls	r0, r0, #3
802026f0:	9001      	str	r0, [sp, #4]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:261
  const uint32_t mask = 0xFFU << pos;
802026f2:	9901      	ldr	r1, [sp, #4]
802026f4:	20ff      	movs	r0, #255	@ 0xff
802026f6:	4088      	lsls	r0, r1
802026f8:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:263
  if (reg >= (sizeof(mpu->MAIR) / sizeof(mpu->MAIR[0]))) {
802026fa:	f89d 0009 	ldrb.w	r0, [sp, #9]
802026fe:	2802      	cmp	r0, #2
80202700:	d301      	bcc.n	80202706 <ARM_MPU_SetMemAttrEx+0x36>
80202702:	e7ff      	b.n	80202704 <ARM_MPU_SetMemAttrEx+0x34>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:264
    return; // invalid index
80202704:	e014      	b.n	80202730 <ARM_MPU_SetMemAttrEx+0x60>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:267
  mpu->MAIR[reg] = ((mpu->MAIR[reg] & ~mask) | ((attr << pos) & mask));
80202706:	9803      	ldr	r0, [sp, #12]
80202708:	f89d 1009 	ldrb.w	r1, [sp, #9]
8020270c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
80202710:	6b00      	ldr	r0, [r0, #48]	@ 0x30
80202712:	9a00      	ldr	r2, [sp, #0]
80202714:	4390      	bics	r0, r2
80202716:	f89d 100a 	ldrb.w	r1, [sp, #10]
8020271a:	9b01      	ldr	r3, [sp, #4]
8020271c:	4099      	lsls	r1, r3
8020271e:	4011      	ands	r1, r2
80202720:	4408      	add	r0, r1
80202722:	9903      	ldr	r1, [sp, #12]
80202724:	f89d 2009 	ldrb.w	r2, [sp, #9]
80202728:	eb01 0182 	add.w	r1, r1, r2, lsl #2
8020272c:	6308      	str	r0, [r1, #48]	@ 0x30
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:268
}
8020272e:	e7ff      	b.n	80202730 <ARM_MPU_SetMemAttrEx+0x60>
80202730:	b004      	add	sp, #16
80202732:	4770      	bx	lr

80202734 <BusFault_Handler>:
BusFault_Handler():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:331
}

__attribute__((naked))
void BusFault_Handler(void)
{
    __asm("MOVS R0, #2\n\t"
80202734:	2002      	movs	r0, #2
80202736:	f002 b947 	b.w	802049c8 <CommonAsmFaultHandler>
	...

8020273c <Default_Handler>:
Default_Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/core/M55_HP/source/startup_M55_HP.c:1114
/*----------------------------------------------------------------------------
  Default Handler for Exceptions / Interrupts
 *----------------------------------------------------------------------------*/
void Default_Handler(void)
{
  while(1);
8020273c:	e7ff      	b.n	8020273e <Default_Handler+0x2>
8020273e:	e7fe      	b.n	8020273e <Default_Handler+0x2>

80202740 <GPIO0_IRQ0Handler>:
GPIO0_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:532
        RTE_GPIO0_PIN6_IRQ_PRIORITY,
        RTE_GPIO0_PIN7_IRQ_PRIORITY
    }
};

void GPIO0_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO0_RES, 0);    }
80202740:	b580      	push	{r7, lr}
80202742:	f240 000c 	movw	r0, #12
80202746:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020274a:	2100      	movs	r1, #0
8020274c:	f000 fca8 	bl	802030a0 <GPIO_IRQ_Handler>
80202750:	bd80      	pop	{r7, pc}
	...

80202754 <GPIO0_IRQ1Handler>:
GPIO0_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:534

void GPIO0_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO0_RES, 1);    }
80202754:	b580      	push	{r7, lr}
80202756:	f240 000c 	movw	r0, #12
8020275a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020275e:	2101      	movs	r1, #1
80202760:	f000 fc9e 	bl	802030a0 <GPIO_IRQ_Handler>
80202764:	bd80      	pop	{r7, pc}
	...

80202768 <GPIO0_IRQ2Handler>:
GPIO0_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:536

void GPIO0_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO0_RES, 2);    }
80202768:	b580      	push	{r7, lr}
8020276a:	f240 000c 	movw	r0, #12
8020276e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202772:	2102      	movs	r1, #2
80202774:	f000 fc94 	bl	802030a0 <GPIO_IRQ_Handler>
80202778:	bd80      	pop	{r7, pc}
	...

8020277c <GPIO0_IRQ3Handler>:
GPIO0_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:538

void GPIO0_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO0_RES, 3);    }
8020277c:	b580      	push	{r7, lr}
8020277e:	f240 000c 	movw	r0, #12
80202782:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202786:	2103      	movs	r1, #3
80202788:	f000 fc8a 	bl	802030a0 <GPIO_IRQ_Handler>
8020278c:	bd80      	pop	{r7, pc}
	...

80202790 <GPIO0_IRQ4Handler>:
GPIO0_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:540

void GPIO0_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO0_RES, 4);    }
80202790:	b580      	push	{r7, lr}
80202792:	f240 000c 	movw	r0, #12
80202796:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020279a:	2104      	movs	r1, #4
8020279c:	f000 fc80 	bl	802030a0 <GPIO_IRQ_Handler>
802027a0:	bd80      	pop	{r7, pc}
	...

802027a4 <GPIO0_IRQ5Handler>:
GPIO0_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:542

void GPIO0_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO0_RES, 5);    }
802027a4:	b580      	push	{r7, lr}
802027a6:	f240 000c 	movw	r0, #12
802027aa:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802027ae:	2105      	movs	r1, #5
802027b0:	f000 fc76 	bl	802030a0 <GPIO_IRQ_Handler>
802027b4:	bd80      	pop	{r7, pc}
	...

802027b8 <GPIO0_IRQ6Handler>:
GPIO0_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:544

void GPIO0_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO0_RES, 6);    }
802027b8:	b580      	push	{r7, lr}
802027ba:	f240 000c 	movw	r0, #12
802027be:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802027c2:	2106      	movs	r1, #6
802027c4:	f000 fc6c 	bl	802030a0 <GPIO_IRQ_Handler>
802027c8:	bd80      	pop	{r7, pc}
	...

802027cc <GPIO0_IRQ7Handler>:
GPIO0_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:546

void GPIO0_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO0_RES, 7);    }
802027cc:	b580      	push	{r7, lr}
802027ce:	f240 000c 	movw	r0, #12
802027d2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802027d6:	2107      	movs	r1, #7
802027d8:	f000 fc62 	bl	802030a0 <GPIO_IRQ_Handler>
802027dc:	bd80      	pop	{r7, pc}
	...

802027e0 <GPIO10_IRQ0Handler>:
GPIO10_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1426
            RTE_GPIO10_PIN6_IRQ_PRIORITY,
            RTE_GPIO10_PIN7_IRQ_PRIORITY,
    }
};

void GPIO10_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO10_RES, 0);    }
802027e0:	b580      	push	{r7, lr}
802027e2:	f240 0048 	movw	r0, #72	@ 0x48
802027e6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802027ea:	2100      	movs	r1, #0
802027ec:	f000 fc58 	bl	802030a0 <GPIO_IRQ_Handler>
802027f0:	bd80      	pop	{r7, pc}
	...

802027f4 <GPIO10_IRQ1Handler>:
GPIO10_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1428

void GPIO10_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO10_RES, 1);    }
802027f4:	b580      	push	{r7, lr}
802027f6:	f240 0048 	movw	r0, #72	@ 0x48
802027fa:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802027fe:	2101      	movs	r1, #1
80202800:	f000 fc4e 	bl	802030a0 <GPIO_IRQ_Handler>
80202804:	bd80      	pop	{r7, pc}
	...

80202808 <GPIO10_IRQ2Handler>:
GPIO10_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1430

void GPIO10_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO10_RES, 2);    }
80202808:	b580      	push	{r7, lr}
8020280a:	f240 0048 	movw	r0, #72	@ 0x48
8020280e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202812:	2102      	movs	r1, #2
80202814:	f000 fc44 	bl	802030a0 <GPIO_IRQ_Handler>
80202818:	bd80      	pop	{r7, pc}
	...

8020281c <GPIO10_IRQ3Handler>:
GPIO10_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1432

void GPIO10_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO10_RES, 3);    }
8020281c:	b580      	push	{r7, lr}
8020281e:	f240 0048 	movw	r0, #72	@ 0x48
80202822:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202826:	2103      	movs	r1, #3
80202828:	f000 fc3a 	bl	802030a0 <GPIO_IRQ_Handler>
8020282c:	bd80      	pop	{r7, pc}
	...

80202830 <GPIO10_IRQ4Handler>:
GPIO10_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1434

void GPIO10_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO10_RES, 4);    }
80202830:	b580      	push	{r7, lr}
80202832:	f240 0048 	movw	r0, #72	@ 0x48
80202836:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020283a:	2104      	movs	r1, #4
8020283c:	f000 fc30 	bl	802030a0 <GPIO_IRQ_Handler>
80202840:	bd80      	pop	{r7, pc}
	...

80202844 <GPIO10_IRQ5Handler>:
GPIO10_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1436

void GPIO10_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO10_RES, 5);    }
80202844:	b580      	push	{r7, lr}
80202846:	f240 0048 	movw	r0, #72	@ 0x48
8020284a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020284e:	2105      	movs	r1, #5
80202850:	f000 fc26 	bl	802030a0 <GPIO_IRQ_Handler>
80202854:	bd80      	pop	{r7, pc}
	...

80202858 <GPIO10_IRQ6Handler>:
GPIO10_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1438

void GPIO10_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO10_RES, 6);    }
80202858:	b580      	push	{r7, lr}
8020285a:	f240 0048 	movw	r0, #72	@ 0x48
8020285e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202862:	2106      	movs	r1, #6
80202864:	f000 fc1c 	bl	802030a0 <GPIO_IRQ_Handler>
80202868:	bd80      	pop	{r7, pc}
	...

8020286c <GPIO10_IRQ7Handler>:
GPIO10_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1440

void GPIO10_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO10_RES, 7);    }
8020286c:	b580      	push	{r7, lr}
8020286e:	f240 0048 	movw	r0, #72	@ 0x48
80202872:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202876:	2107      	movs	r1, #7
80202878:	f000 fc12 	bl	802030a0 <GPIO_IRQ_Handler>
8020287c:	bd80      	pop	{r7, pc}
	...

80202880 <GPIO11_IRQ0Handler>:
GPIO11_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1515
            RTE_GPIO11_PIN6_IRQ_PRIORITY,
            RTE_GPIO11_PIN7_IRQ_PRIORITY,
    }
};

void GPIO11_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO11_RES, 0);    }
80202880:	b580      	push	{r7, lr}
80202882:	f240 0084 	movw	r0, #132	@ 0x84
80202886:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020288a:	2100      	movs	r1, #0
8020288c:	f000 fc08 	bl	802030a0 <GPIO_IRQ_Handler>
80202890:	bd80      	pop	{r7, pc}
	...

80202894 <GPIO11_IRQ1Handler>:
GPIO11_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1517

void GPIO11_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO11_RES, 1);    }
80202894:	b580      	push	{r7, lr}
80202896:	f240 0084 	movw	r0, #132	@ 0x84
8020289a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020289e:	2101      	movs	r1, #1
802028a0:	f000 fbfe 	bl	802030a0 <GPIO_IRQ_Handler>
802028a4:	bd80      	pop	{r7, pc}
	...

802028a8 <GPIO11_IRQ2Handler>:
GPIO11_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1519

void GPIO11_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO11_RES, 2);    }
802028a8:	b580      	push	{r7, lr}
802028aa:	f240 0084 	movw	r0, #132	@ 0x84
802028ae:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802028b2:	2102      	movs	r1, #2
802028b4:	f000 fbf4 	bl	802030a0 <GPIO_IRQ_Handler>
802028b8:	bd80      	pop	{r7, pc}
	...

802028bc <GPIO11_IRQ3Handler>:
GPIO11_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1521

void GPIO11_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO11_RES, 3);    }
802028bc:	b580      	push	{r7, lr}
802028be:	f240 0084 	movw	r0, #132	@ 0x84
802028c2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802028c6:	2103      	movs	r1, #3
802028c8:	f000 fbea 	bl	802030a0 <GPIO_IRQ_Handler>
802028cc:	bd80      	pop	{r7, pc}
	...

802028d0 <GPIO11_IRQ4Handler>:
GPIO11_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1523

void GPIO11_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO11_RES, 4);    }
802028d0:	b580      	push	{r7, lr}
802028d2:	f240 0084 	movw	r0, #132	@ 0x84
802028d6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802028da:	2104      	movs	r1, #4
802028dc:	f000 fbe0 	bl	802030a0 <GPIO_IRQ_Handler>
802028e0:	bd80      	pop	{r7, pc}
	...

802028e4 <GPIO11_IRQ5Handler>:
GPIO11_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1525

void GPIO11_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO11_RES, 5);    }
802028e4:	b580      	push	{r7, lr}
802028e6:	f240 0084 	movw	r0, #132	@ 0x84
802028ea:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802028ee:	2105      	movs	r1, #5
802028f0:	f000 fbd6 	bl	802030a0 <GPIO_IRQ_Handler>
802028f4:	bd80      	pop	{r7, pc}
	...

802028f8 <GPIO11_IRQ6Handler>:
GPIO11_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1527

void GPIO11_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO11_RES, 6);    }
802028f8:	b580      	push	{r7, lr}
802028fa:	f240 0084 	movw	r0, #132	@ 0x84
802028fe:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202902:	2106      	movs	r1, #6
80202904:	f000 fbcc 	bl	802030a0 <GPIO_IRQ_Handler>
80202908:	bd80      	pop	{r7, pc}
	...

8020290c <GPIO11_IRQ7Handler>:
GPIO11_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1529

void GPIO11_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO11_RES, 7);    }
8020290c:	b580      	push	{r7, lr}
8020290e:	f240 0084 	movw	r0, #132	@ 0x84
80202912:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202916:	2107      	movs	r1, #7
80202918:	f000 fbc2 	bl	802030a0 <GPIO_IRQ_Handler>
8020291c:	bd80      	pop	{r7, pc}
	...

80202920 <GPIO12_IRQ0Handler>:
GPIO12_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1604
            RTE_GPIO12_PIN6_IRQ_PRIORITY,
            RTE_GPIO12_PIN7_IRQ_PRIORITY,
    }
};

void GPIO12_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO12_RES, 0);    }
80202920:	b580      	push	{r7, lr}
80202922:	f240 00c0 	movw	r0, #192	@ 0xc0
80202926:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020292a:	2100      	movs	r1, #0
8020292c:	f000 fbb8 	bl	802030a0 <GPIO_IRQ_Handler>
80202930:	bd80      	pop	{r7, pc}
	...

80202934 <GPIO12_IRQ1Handler>:
GPIO12_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1606

void GPIO12_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO12_RES, 1);    }
80202934:	b580      	push	{r7, lr}
80202936:	f240 00c0 	movw	r0, #192	@ 0xc0
8020293a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020293e:	2101      	movs	r1, #1
80202940:	f000 fbae 	bl	802030a0 <GPIO_IRQ_Handler>
80202944:	bd80      	pop	{r7, pc}
	...

80202948 <GPIO12_IRQ2Handler>:
GPIO12_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1608

void GPIO12_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO12_RES, 2);    }
80202948:	b580      	push	{r7, lr}
8020294a:	f240 00c0 	movw	r0, #192	@ 0xc0
8020294e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202952:	2102      	movs	r1, #2
80202954:	f000 fba4 	bl	802030a0 <GPIO_IRQ_Handler>
80202958:	bd80      	pop	{r7, pc}
	...

8020295c <GPIO12_IRQ3Handler>:
GPIO12_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1610

void GPIO12_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO12_RES, 3);    }
8020295c:	b580      	push	{r7, lr}
8020295e:	f240 00c0 	movw	r0, #192	@ 0xc0
80202962:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202966:	2103      	movs	r1, #3
80202968:	f000 fb9a 	bl	802030a0 <GPIO_IRQ_Handler>
8020296c:	bd80      	pop	{r7, pc}
	...

80202970 <GPIO12_IRQ4Handler>:
GPIO12_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1612

void GPIO12_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO12_RES, 4);    }
80202970:	b580      	push	{r7, lr}
80202972:	f240 00c0 	movw	r0, #192	@ 0xc0
80202976:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020297a:	2104      	movs	r1, #4
8020297c:	f000 fb90 	bl	802030a0 <GPIO_IRQ_Handler>
80202980:	bd80      	pop	{r7, pc}
	...

80202984 <GPIO12_IRQ5Handler>:
GPIO12_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1614

void GPIO12_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO12_RES, 5);    }
80202984:	b580      	push	{r7, lr}
80202986:	f240 00c0 	movw	r0, #192	@ 0xc0
8020298a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020298e:	2105      	movs	r1, #5
80202990:	f000 fb86 	bl	802030a0 <GPIO_IRQ_Handler>
80202994:	bd80      	pop	{r7, pc}
	...

80202998 <GPIO12_IRQ6Handler>:
GPIO12_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1616

void GPIO12_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO12_RES, 6);    }
80202998:	b580      	push	{r7, lr}
8020299a:	f240 00c0 	movw	r0, #192	@ 0xc0
8020299e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802029a2:	2106      	movs	r1, #6
802029a4:	f000 fb7c 	bl	802030a0 <GPIO_IRQ_Handler>
802029a8:	bd80      	pop	{r7, pc}
	...

802029ac <GPIO12_IRQ7Handler>:
GPIO12_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1618

void GPIO12_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO12_RES, 7);    }
802029ac:	b580      	push	{r7, lr}
802029ae:	f240 00c0 	movw	r0, #192	@ 0xc0
802029b2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802029b6:	2107      	movs	r1, #7
802029b8:	f000 fb72 	bl	802030a0 <GPIO_IRQ_Handler>
802029bc:	bd80      	pop	{r7, pc}
	...

802029c0 <GPIO13_IRQ0Handler>:
GPIO13_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1693
            RTE_GPIO13_PIN6_IRQ_PRIORITY,
            RTE_GPIO13_PIN7_IRQ_PRIORITY,
    }
};

void GPIO13_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO13_RES, 0);    }
802029c0:	b580      	push	{r7, lr}
802029c2:	f240 00fc 	movw	r0, #252	@ 0xfc
802029c6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802029ca:	2100      	movs	r1, #0
802029cc:	f000 fb68 	bl	802030a0 <GPIO_IRQ_Handler>
802029d0:	bd80      	pop	{r7, pc}
	...

802029d4 <GPIO13_IRQ1Handler>:
GPIO13_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1695

void GPIO13_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO13_RES, 1);    }
802029d4:	b580      	push	{r7, lr}
802029d6:	f240 00fc 	movw	r0, #252	@ 0xfc
802029da:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802029de:	2101      	movs	r1, #1
802029e0:	f000 fb5e 	bl	802030a0 <GPIO_IRQ_Handler>
802029e4:	bd80      	pop	{r7, pc}
	...

802029e8 <GPIO13_IRQ2Handler>:
GPIO13_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1697

void GPIO13_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO13_RES, 2);    }
802029e8:	b580      	push	{r7, lr}
802029ea:	f240 00fc 	movw	r0, #252	@ 0xfc
802029ee:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802029f2:	2102      	movs	r1, #2
802029f4:	f000 fb54 	bl	802030a0 <GPIO_IRQ_Handler>
802029f8:	bd80      	pop	{r7, pc}
	...

802029fc <GPIO13_IRQ3Handler>:
GPIO13_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1699

void GPIO13_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO13_RES, 3);    }
802029fc:	b580      	push	{r7, lr}
802029fe:	f240 00fc 	movw	r0, #252	@ 0xfc
80202a02:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202a06:	2103      	movs	r1, #3
80202a08:	f000 fb4a 	bl	802030a0 <GPIO_IRQ_Handler>
80202a0c:	bd80      	pop	{r7, pc}
	...

80202a10 <GPIO13_IRQ4Handler>:
GPIO13_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1701

void GPIO13_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO13_RES, 4);    }
80202a10:	b580      	push	{r7, lr}
80202a12:	f240 00fc 	movw	r0, #252	@ 0xfc
80202a16:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202a1a:	2104      	movs	r1, #4
80202a1c:	f000 fb40 	bl	802030a0 <GPIO_IRQ_Handler>
80202a20:	bd80      	pop	{r7, pc}
	...

80202a24 <GPIO13_IRQ5Handler>:
GPIO13_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1703

void GPIO13_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO13_RES, 5);    }
80202a24:	b580      	push	{r7, lr}
80202a26:	f240 00fc 	movw	r0, #252	@ 0xfc
80202a2a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202a2e:	2105      	movs	r1, #5
80202a30:	f000 fb36 	bl	802030a0 <GPIO_IRQ_Handler>
80202a34:	bd80      	pop	{r7, pc}
	...

80202a38 <GPIO13_IRQ6Handler>:
GPIO13_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1705

void GPIO13_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO13_RES, 6);    }
80202a38:	b580      	push	{r7, lr}
80202a3a:	f240 00fc 	movw	r0, #252	@ 0xfc
80202a3e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202a42:	2106      	movs	r1, #6
80202a44:	f000 fb2c 	bl	802030a0 <GPIO_IRQ_Handler>
80202a48:	bd80      	pop	{r7, pc}
	...

80202a4c <GPIO13_IRQ7Handler>:
GPIO13_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1707

void GPIO13_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO13_RES, 7);    }
80202a4c:	b580      	push	{r7, lr}
80202a4e:	f240 00fc 	movw	r0, #252	@ 0xfc
80202a52:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202a56:	2107      	movs	r1, #7
80202a58:	f000 fb22 	bl	802030a0 <GPIO_IRQ_Handler>
80202a5c:	bd80      	pop	{r7, pc}
	...

80202a60 <GPIO14_IRQ0Handler>:
GPIO14_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1782
            RTE_GPIO14_PIN6_IRQ_PRIORITY,
            RTE_GPIO14_PIN7_IRQ_PRIORITY,
    }
};

void GPIO14_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO14_RES, 0);    }
80202a60:	b580      	push	{r7, lr}
80202a62:	f240 1038 	movw	r0, #312	@ 0x138
80202a66:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202a6a:	2100      	movs	r1, #0
80202a6c:	f000 fb18 	bl	802030a0 <GPIO_IRQ_Handler>
80202a70:	bd80      	pop	{r7, pc}
	...

80202a74 <GPIO14_IRQ1Handler>:
GPIO14_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1784

void GPIO14_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO14_RES, 1);    }
80202a74:	b580      	push	{r7, lr}
80202a76:	f240 1038 	movw	r0, #312	@ 0x138
80202a7a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202a7e:	2101      	movs	r1, #1
80202a80:	f000 fb0e 	bl	802030a0 <GPIO_IRQ_Handler>
80202a84:	bd80      	pop	{r7, pc}
	...

80202a88 <GPIO14_IRQ2Handler>:
GPIO14_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1786

void GPIO14_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO14_RES, 2);    }
80202a88:	b580      	push	{r7, lr}
80202a8a:	f240 1038 	movw	r0, #312	@ 0x138
80202a8e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202a92:	2102      	movs	r1, #2
80202a94:	f000 fb04 	bl	802030a0 <GPIO_IRQ_Handler>
80202a98:	bd80      	pop	{r7, pc}
	...

80202a9c <GPIO14_IRQ3Handler>:
GPIO14_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1788

void GPIO14_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO14_RES, 3);    }
80202a9c:	b580      	push	{r7, lr}
80202a9e:	f240 1038 	movw	r0, #312	@ 0x138
80202aa2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202aa6:	2103      	movs	r1, #3
80202aa8:	f000 fafa 	bl	802030a0 <GPIO_IRQ_Handler>
80202aac:	bd80      	pop	{r7, pc}
	...

80202ab0 <GPIO14_IRQ4Handler>:
GPIO14_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1790

void GPIO14_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO14_RES, 4);    }
80202ab0:	b580      	push	{r7, lr}
80202ab2:	f240 1038 	movw	r0, #312	@ 0x138
80202ab6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202aba:	2104      	movs	r1, #4
80202abc:	f000 faf0 	bl	802030a0 <GPIO_IRQ_Handler>
80202ac0:	bd80      	pop	{r7, pc}
	...

80202ac4 <GPIO14_IRQ5Handler>:
GPIO14_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1792

void GPIO14_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO14_RES, 5);    }
80202ac4:	b580      	push	{r7, lr}
80202ac6:	f240 1038 	movw	r0, #312	@ 0x138
80202aca:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202ace:	2105      	movs	r1, #5
80202ad0:	f000 fae6 	bl	802030a0 <GPIO_IRQ_Handler>
80202ad4:	bd80      	pop	{r7, pc}
	...

80202ad8 <GPIO14_IRQ6Handler>:
GPIO14_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1794

void GPIO14_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO14_RES, 6);    }
80202ad8:	b580      	push	{r7, lr}
80202ada:	f240 1038 	movw	r0, #312	@ 0x138
80202ade:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202ae2:	2106      	movs	r1, #6
80202ae4:	f000 fadc 	bl	802030a0 <GPIO_IRQ_Handler>
80202ae8:	bd80      	pop	{r7, pc}
	...

80202aec <GPIO14_IRQ7Handler>:
GPIO14_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1796

void GPIO14_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO14_RES, 7);    }
80202aec:	b580      	push	{r7, lr}
80202aee:	f240 1038 	movw	r0, #312	@ 0x138
80202af2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202af6:	2107      	movs	r1, #7
80202af8:	f000 fad2 	bl	802030a0 <GPIO_IRQ_Handler>
80202afc:	bd80      	pop	{r7, pc}
	...

80202b00 <GPIO1_IRQ0Handler>:
GPIO1_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:622
void GPIO1_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO1_RES, 0);    }
80202b00:	b580      	push	{r7, lr}
80202b02:	f240 1074 	movw	r0, #372	@ 0x174
80202b06:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202b0a:	2100      	movs	r1, #0
80202b0c:	f000 fac8 	bl	802030a0 <GPIO_IRQ_Handler>
80202b10:	bd80      	pop	{r7, pc}
	...

80202b14 <GPIO1_IRQ1Handler>:
GPIO1_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:624
void GPIO1_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO1_RES, 1);    }
80202b14:	b580      	push	{r7, lr}
80202b16:	f240 1074 	movw	r0, #372	@ 0x174
80202b1a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202b1e:	2101      	movs	r1, #1
80202b20:	f000 fabe 	bl	802030a0 <GPIO_IRQ_Handler>
80202b24:	bd80      	pop	{r7, pc}
	...

80202b28 <GPIO1_IRQ2Handler>:
GPIO1_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:626
void GPIO1_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO1_RES, 2);    }
80202b28:	b580      	push	{r7, lr}
80202b2a:	f240 1074 	movw	r0, #372	@ 0x174
80202b2e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202b32:	2102      	movs	r1, #2
80202b34:	f000 fab4 	bl	802030a0 <GPIO_IRQ_Handler>
80202b38:	bd80      	pop	{r7, pc}
	...

80202b3c <GPIO1_IRQ3Handler>:
GPIO1_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:628
void GPIO1_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO1_RES, 3);    }
80202b3c:	b580      	push	{r7, lr}
80202b3e:	f240 1074 	movw	r0, #372	@ 0x174
80202b42:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202b46:	2103      	movs	r1, #3
80202b48:	f000 faaa 	bl	802030a0 <GPIO_IRQ_Handler>
80202b4c:	bd80      	pop	{r7, pc}
	...

80202b50 <GPIO1_IRQ4Handler>:
GPIO1_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:630
void GPIO1_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO1_RES, 4);    }
80202b50:	b580      	push	{r7, lr}
80202b52:	f240 1074 	movw	r0, #372	@ 0x174
80202b56:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202b5a:	2104      	movs	r1, #4
80202b5c:	f000 faa0 	bl	802030a0 <GPIO_IRQ_Handler>
80202b60:	bd80      	pop	{r7, pc}
	...

80202b64 <GPIO1_IRQ5Handler>:
GPIO1_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:632
void GPIO1_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO1_RES, 5);    }
80202b64:	b580      	push	{r7, lr}
80202b66:	f240 1074 	movw	r0, #372	@ 0x174
80202b6a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202b6e:	2105      	movs	r1, #5
80202b70:	f000 fa96 	bl	802030a0 <GPIO_IRQ_Handler>
80202b74:	bd80      	pop	{r7, pc}
	...

80202b78 <GPIO1_IRQ6Handler>:
GPIO1_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:634
void GPIO1_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO1_RES, 6);    }
80202b78:	b580      	push	{r7, lr}
80202b7a:	f240 1074 	movw	r0, #372	@ 0x174
80202b7e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202b82:	2106      	movs	r1, #6
80202b84:	f000 fa8c 	bl	802030a0 <GPIO_IRQ_Handler>
80202b88:	bd80      	pop	{r7, pc}
	...

80202b8c <GPIO1_IRQ7Handler>:
GPIO1_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:636
void GPIO1_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO1_RES, 7);    }
80202b8c:	b580      	push	{r7, lr}
80202b8e:	f240 1074 	movw	r0, #372	@ 0x174
80202b92:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202b96:	2107      	movs	r1, #7
80202b98:	f000 fa82 	bl	802030a0 <GPIO_IRQ_Handler>
80202b9c:	bd80      	pop	{r7, pc}
	...

80202ba0 <GPIO2_IRQ0Handler>:
GPIO2_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:711
void GPIO2_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO2_RES, 0);    }
80202ba0:	b580      	push	{r7, lr}
80202ba2:	f240 10b0 	movw	r0, #432	@ 0x1b0
80202ba6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202baa:	2100      	movs	r1, #0
80202bac:	f000 fa78 	bl	802030a0 <GPIO_IRQ_Handler>
80202bb0:	bd80      	pop	{r7, pc}
	...

80202bb4 <GPIO2_IRQ1Handler>:
GPIO2_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:713
void GPIO2_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO2_RES, 1);    }
80202bb4:	b580      	push	{r7, lr}
80202bb6:	f240 10b0 	movw	r0, #432	@ 0x1b0
80202bba:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202bbe:	2101      	movs	r1, #1
80202bc0:	f000 fa6e 	bl	802030a0 <GPIO_IRQ_Handler>
80202bc4:	bd80      	pop	{r7, pc}
	...

80202bc8 <GPIO2_IRQ2Handler>:
GPIO2_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:715
void GPIO2_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO2_RES, 2);    }
80202bc8:	b580      	push	{r7, lr}
80202bca:	f240 10b0 	movw	r0, #432	@ 0x1b0
80202bce:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202bd2:	2102      	movs	r1, #2
80202bd4:	f000 fa64 	bl	802030a0 <GPIO_IRQ_Handler>
80202bd8:	bd80      	pop	{r7, pc}
	...

80202bdc <GPIO2_IRQ3Handler>:
GPIO2_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:717
void GPIO2_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO2_RES, 3);    }
80202bdc:	b580      	push	{r7, lr}
80202bde:	f240 10b0 	movw	r0, #432	@ 0x1b0
80202be2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202be6:	2103      	movs	r1, #3
80202be8:	f000 fa5a 	bl	802030a0 <GPIO_IRQ_Handler>
80202bec:	bd80      	pop	{r7, pc}
	...

80202bf0 <GPIO2_IRQ4Handler>:
GPIO2_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:719
void GPIO2_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO2_RES, 4);    }
80202bf0:	b580      	push	{r7, lr}
80202bf2:	f240 10b0 	movw	r0, #432	@ 0x1b0
80202bf6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202bfa:	2104      	movs	r1, #4
80202bfc:	f000 fa50 	bl	802030a0 <GPIO_IRQ_Handler>
80202c00:	bd80      	pop	{r7, pc}
	...

80202c04 <GPIO2_IRQ5Handler>:
GPIO2_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:721
void GPIO2_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO2_RES, 5);    }
80202c04:	b580      	push	{r7, lr}
80202c06:	f240 10b0 	movw	r0, #432	@ 0x1b0
80202c0a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202c0e:	2105      	movs	r1, #5
80202c10:	f000 fa46 	bl	802030a0 <GPIO_IRQ_Handler>
80202c14:	bd80      	pop	{r7, pc}
	...

80202c18 <GPIO2_IRQ6Handler>:
GPIO2_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:723
void GPIO2_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO2_RES, 6);    }
80202c18:	b580      	push	{r7, lr}
80202c1a:	f240 10b0 	movw	r0, #432	@ 0x1b0
80202c1e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202c22:	2106      	movs	r1, #6
80202c24:	f000 fa3c 	bl	802030a0 <GPIO_IRQ_Handler>
80202c28:	bd80      	pop	{r7, pc}
	...

80202c2c <GPIO2_IRQ7Handler>:
GPIO2_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:725
void GPIO2_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO2_RES, 7);    }
80202c2c:	b580      	push	{r7, lr}
80202c2e:	f240 10b0 	movw	r0, #432	@ 0x1b0
80202c32:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202c36:	2107      	movs	r1, #7
80202c38:	f000 fa32 	bl	802030a0 <GPIO_IRQ_Handler>
80202c3c:	bd80      	pop	{r7, pc}
	...

80202c40 <GPIO3_IRQ0Handler>:
GPIO3_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:800
void GPIO3_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO3_RES, 0);    }
80202c40:	b580      	push	{r7, lr}
80202c42:	f240 10ec 	movw	r0, #492	@ 0x1ec
80202c46:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202c4a:	2100      	movs	r1, #0
80202c4c:	f000 fa28 	bl	802030a0 <GPIO_IRQ_Handler>
80202c50:	bd80      	pop	{r7, pc}
	...

80202c54 <GPIO3_IRQ1Handler>:
GPIO3_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:802
void GPIO3_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO3_RES, 1);    }
80202c54:	b580      	push	{r7, lr}
80202c56:	f240 10ec 	movw	r0, #492	@ 0x1ec
80202c5a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202c5e:	2101      	movs	r1, #1
80202c60:	f000 fa1e 	bl	802030a0 <GPIO_IRQ_Handler>
80202c64:	bd80      	pop	{r7, pc}
	...

80202c68 <GPIO3_IRQ2Handler>:
GPIO3_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:804
void GPIO3_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO3_RES, 2);    }
80202c68:	b580      	push	{r7, lr}
80202c6a:	f240 10ec 	movw	r0, #492	@ 0x1ec
80202c6e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202c72:	2102      	movs	r1, #2
80202c74:	f000 fa14 	bl	802030a0 <GPIO_IRQ_Handler>
80202c78:	bd80      	pop	{r7, pc}
	...

80202c7c <GPIO3_IRQ3Handler>:
GPIO3_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:806
void GPIO3_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO3_RES, 3);    }
80202c7c:	b580      	push	{r7, lr}
80202c7e:	f240 10ec 	movw	r0, #492	@ 0x1ec
80202c82:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202c86:	2103      	movs	r1, #3
80202c88:	f000 fa0a 	bl	802030a0 <GPIO_IRQ_Handler>
80202c8c:	bd80      	pop	{r7, pc}
	...

80202c90 <GPIO3_IRQ4Handler>:
GPIO3_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:808
void GPIO3_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO3_RES, 4);    }
80202c90:	b580      	push	{r7, lr}
80202c92:	f240 10ec 	movw	r0, #492	@ 0x1ec
80202c96:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202c9a:	2104      	movs	r1, #4
80202c9c:	f000 fa00 	bl	802030a0 <GPIO_IRQ_Handler>
80202ca0:	bd80      	pop	{r7, pc}
	...

80202ca4 <GPIO3_IRQ5Handler>:
GPIO3_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:810
void GPIO3_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO3_RES, 5);    }
80202ca4:	b580      	push	{r7, lr}
80202ca6:	f240 10ec 	movw	r0, #492	@ 0x1ec
80202caa:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202cae:	2105      	movs	r1, #5
80202cb0:	f000 f9f6 	bl	802030a0 <GPIO_IRQ_Handler>
80202cb4:	bd80      	pop	{r7, pc}
	...

80202cb8 <GPIO3_IRQ6Handler>:
GPIO3_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:812
void GPIO3_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO3_RES, 6);    }
80202cb8:	b580      	push	{r7, lr}
80202cba:	f240 10ec 	movw	r0, #492	@ 0x1ec
80202cbe:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202cc2:	2106      	movs	r1, #6
80202cc4:	f000 f9ec 	bl	802030a0 <GPIO_IRQ_Handler>
80202cc8:	bd80      	pop	{r7, pc}
	...

80202ccc <GPIO3_IRQ7Handler>:
GPIO3_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:814
void GPIO3_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO3_RES, 7);    }
80202ccc:	b580      	push	{r7, lr}
80202cce:	f240 10ec 	movw	r0, #492	@ 0x1ec
80202cd2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202cd6:	2107      	movs	r1, #7
80202cd8:	f000 f9e2 	bl	802030a0 <GPIO_IRQ_Handler>
80202cdc:	bd80      	pop	{r7, pc}
	...

80202ce0 <GPIO4_IRQ0Handler>:
GPIO4_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:889
void GPIO4_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO4_RES, 0);    }
80202ce0:	b580      	push	{r7, lr}
80202ce2:	f240 2028 	movw	r0, #552	@ 0x228
80202ce6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202cea:	2100      	movs	r1, #0
80202cec:	f000 f9d8 	bl	802030a0 <GPIO_IRQ_Handler>
80202cf0:	bd80      	pop	{r7, pc}
	...

80202cf4 <GPIO4_IRQ1Handler>:
GPIO4_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:891
void GPIO4_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO4_RES, 1);    }
80202cf4:	b580      	push	{r7, lr}
80202cf6:	f240 2028 	movw	r0, #552	@ 0x228
80202cfa:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202cfe:	2101      	movs	r1, #1
80202d00:	f000 f9ce 	bl	802030a0 <GPIO_IRQ_Handler>
80202d04:	bd80      	pop	{r7, pc}
	...

80202d08 <GPIO4_IRQ2Handler>:
GPIO4_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:893
void GPIO4_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO4_RES, 2);    }
80202d08:	b580      	push	{r7, lr}
80202d0a:	f240 2028 	movw	r0, #552	@ 0x228
80202d0e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202d12:	2102      	movs	r1, #2
80202d14:	f000 f9c4 	bl	802030a0 <GPIO_IRQ_Handler>
80202d18:	bd80      	pop	{r7, pc}
	...

80202d1c <GPIO4_IRQ3Handler>:
GPIO4_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:895
void GPIO4_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO4_RES, 3);    }
80202d1c:	b580      	push	{r7, lr}
80202d1e:	f240 2028 	movw	r0, #552	@ 0x228
80202d22:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202d26:	2103      	movs	r1, #3
80202d28:	f000 f9ba 	bl	802030a0 <GPIO_IRQ_Handler>
80202d2c:	bd80      	pop	{r7, pc}
	...

80202d30 <GPIO4_IRQ4Handler>:
GPIO4_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:897
void GPIO4_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO4_RES, 4);    }
80202d30:	b580      	push	{r7, lr}
80202d32:	f240 2028 	movw	r0, #552	@ 0x228
80202d36:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202d3a:	2104      	movs	r1, #4
80202d3c:	f000 f9b0 	bl	802030a0 <GPIO_IRQ_Handler>
80202d40:	bd80      	pop	{r7, pc}
	...

80202d44 <GPIO4_IRQ5Handler>:
GPIO4_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:899
void GPIO4_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO4_RES, 5);    }
80202d44:	b580      	push	{r7, lr}
80202d46:	f240 2028 	movw	r0, #552	@ 0x228
80202d4a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202d4e:	2105      	movs	r1, #5
80202d50:	f000 f9a6 	bl	802030a0 <GPIO_IRQ_Handler>
80202d54:	bd80      	pop	{r7, pc}
	...

80202d58 <GPIO4_IRQ6Handler>:
GPIO4_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:901
void GPIO4_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO4_RES, 6);    }
80202d58:	b580      	push	{r7, lr}
80202d5a:	f240 2028 	movw	r0, #552	@ 0x228
80202d5e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202d62:	2106      	movs	r1, #6
80202d64:	f000 f99c 	bl	802030a0 <GPIO_IRQ_Handler>
80202d68:	bd80      	pop	{r7, pc}
	...

80202d6c <GPIO4_IRQ7Handler>:
GPIO4_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:903
void GPIO4_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO4_RES, 7);    }
80202d6c:	b580      	push	{r7, lr}
80202d6e:	f240 2028 	movw	r0, #552	@ 0x228
80202d72:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202d76:	2107      	movs	r1, #7
80202d78:	f000 f992 	bl	802030a0 <GPIO_IRQ_Handler>
80202d7c:	bd80      	pop	{r7, pc}
	...

80202d80 <GPIO5_IRQ0Handler>:
GPIO5_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:979
void GPIO5_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO5_RES, 0);    }
80202d80:	b580      	push	{r7, lr}
80202d82:	f240 2064 	movw	r0, #612	@ 0x264
80202d86:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202d8a:	2100      	movs	r1, #0
80202d8c:	f000 f988 	bl	802030a0 <GPIO_IRQ_Handler>
80202d90:	bd80      	pop	{r7, pc}
	...

80202d94 <GPIO5_IRQ1Handler>:
GPIO5_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:981
void GPIO5_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO5_RES, 1);    }
80202d94:	b580      	push	{r7, lr}
80202d96:	f240 2064 	movw	r0, #612	@ 0x264
80202d9a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202d9e:	2101      	movs	r1, #1
80202da0:	f000 f97e 	bl	802030a0 <GPIO_IRQ_Handler>
80202da4:	bd80      	pop	{r7, pc}
	...

80202da8 <GPIO5_IRQ2Handler>:
GPIO5_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:983
void GPIO5_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO5_RES, 2);    }
80202da8:	b580      	push	{r7, lr}
80202daa:	f240 2064 	movw	r0, #612	@ 0x264
80202dae:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202db2:	2102      	movs	r1, #2
80202db4:	f000 f974 	bl	802030a0 <GPIO_IRQ_Handler>
80202db8:	bd80      	pop	{r7, pc}
	...

80202dbc <GPIO5_IRQ3Handler>:
GPIO5_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:985
void GPIO5_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO5_RES, 3);    }
80202dbc:	b580      	push	{r7, lr}
80202dbe:	f240 2064 	movw	r0, #612	@ 0x264
80202dc2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202dc6:	2103      	movs	r1, #3
80202dc8:	f000 f96a 	bl	802030a0 <GPIO_IRQ_Handler>
80202dcc:	bd80      	pop	{r7, pc}
	...

80202dd0 <GPIO5_IRQ4Handler>:
GPIO5_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:987
void GPIO5_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO5_RES, 4);    }
80202dd0:	b580      	push	{r7, lr}
80202dd2:	f240 2064 	movw	r0, #612	@ 0x264
80202dd6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202dda:	2104      	movs	r1, #4
80202ddc:	f000 f960 	bl	802030a0 <GPIO_IRQ_Handler>
80202de0:	bd80      	pop	{r7, pc}
	...

80202de4 <GPIO5_IRQ5Handler>:
GPIO5_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:989
void GPIO5_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO5_RES, 5);    }
80202de4:	b580      	push	{r7, lr}
80202de6:	f240 2064 	movw	r0, #612	@ 0x264
80202dea:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202dee:	2105      	movs	r1, #5
80202df0:	f000 f956 	bl	802030a0 <GPIO_IRQ_Handler>
80202df4:	bd80      	pop	{r7, pc}
	...

80202df8 <GPIO5_IRQ6Handler>:
GPIO5_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:991
void GPIO5_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO5_RES, 6);    }
80202df8:	b580      	push	{r7, lr}
80202dfa:	f240 2064 	movw	r0, #612	@ 0x264
80202dfe:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202e02:	2106      	movs	r1, #6
80202e04:	f000 f94c 	bl	802030a0 <GPIO_IRQ_Handler>
80202e08:	bd80      	pop	{r7, pc}
	...

80202e0c <GPIO5_IRQ7Handler>:
GPIO5_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:993
void GPIO5_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO5_RES, 7);    }
80202e0c:	b580      	push	{r7, lr}
80202e0e:	f240 2064 	movw	r0, #612	@ 0x264
80202e12:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202e16:	2107      	movs	r1, #7
80202e18:	f000 f942 	bl	802030a0 <GPIO_IRQ_Handler>
80202e1c:	bd80      	pop	{r7, pc}
	...

80202e20 <GPIO6_IRQ0Handler>:
GPIO6_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1069
void GPIO6_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO6_RES, 0);    }
80202e20:	b580      	push	{r7, lr}
80202e22:	f240 20a0 	movw	r0, #672	@ 0x2a0
80202e26:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202e2a:	2100      	movs	r1, #0
80202e2c:	f000 f938 	bl	802030a0 <GPIO_IRQ_Handler>
80202e30:	bd80      	pop	{r7, pc}
	...

80202e34 <GPIO6_IRQ1Handler>:
GPIO6_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1071
void GPIO6_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO6_RES, 1);    }
80202e34:	b580      	push	{r7, lr}
80202e36:	f240 20a0 	movw	r0, #672	@ 0x2a0
80202e3a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202e3e:	2101      	movs	r1, #1
80202e40:	f000 f92e 	bl	802030a0 <GPIO_IRQ_Handler>
80202e44:	bd80      	pop	{r7, pc}
	...

80202e48 <GPIO6_IRQ2Handler>:
GPIO6_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1073
void GPIO6_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO6_RES, 2);    }
80202e48:	b580      	push	{r7, lr}
80202e4a:	f240 20a0 	movw	r0, #672	@ 0x2a0
80202e4e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202e52:	2102      	movs	r1, #2
80202e54:	f000 f924 	bl	802030a0 <GPIO_IRQ_Handler>
80202e58:	bd80      	pop	{r7, pc}
	...

80202e5c <GPIO6_IRQ3Handler>:
GPIO6_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1075
void GPIO6_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO6_RES, 3);    }
80202e5c:	b580      	push	{r7, lr}
80202e5e:	f240 20a0 	movw	r0, #672	@ 0x2a0
80202e62:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202e66:	2103      	movs	r1, #3
80202e68:	f000 f91a 	bl	802030a0 <GPIO_IRQ_Handler>
80202e6c:	bd80      	pop	{r7, pc}
	...

80202e70 <GPIO6_IRQ4Handler>:
GPIO6_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1077
void GPIO6_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO6_RES, 4);    }
80202e70:	b580      	push	{r7, lr}
80202e72:	f240 20a0 	movw	r0, #672	@ 0x2a0
80202e76:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202e7a:	2104      	movs	r1, #4
80202e7c:	f000 f910 	bl	802030a0 <GPIO_IRQ_Handler>
80202e80:	bd80      	pop	{r7, pc}
	...

80202e84 <GPIO6_IRQ5Handler>:
GPIO6_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1079
void GPIO6_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO6_RES, 5);    }
80202e84:	b580      	push	{r7, lr}
80202e86:	f240 20a0 	movw	r0, #672	@ 0x2a0
80202e8a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202e8e:	2105      	movs	r1, #5
80202e90:	f000 f906 	bl	802030a0 <GPIO_IRQ_Handler>
80202e94:	bd80      	pop	{r7, pc}
	...

80202e98 <GPIO6_IRQ6Handler>:
GPIO6_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1081
void GPIO6_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO6_RES, 6);    }
80202e98:	b580      	push	{r7, lr}
80202e9a:	f240 20a0 	movw	r0, #672	@ 0x2a0
80202e9e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202ea2:	2106      	movs	r1, #6
80202ea4:	f000 f8fc 	bl	802030a0 <GPIO_IRQ_Handler>
80202ea8:	bd80      	pop	{r7, pc}
	...

80202eac <GPIO6_IRQ7Handler>:
GPIO6_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1083
void GPIO6_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO6_RES, 7);    }
80202eac:	b580      	push	{r7, lr}
80202eae:	f240 20a0 	movw	r0, #672	@ 0x2a0
80202eb2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202eb6:	2107      	movs	r1, #7
80202eb8:	f000 f8f2 	bl	802030a0 <GPIO_IRQ_Handler>
80202ebc:	bd80      	pop	{r7, pc}
	...

80202ec0 <GPIO7_IRQ0Handler>:
GPIO7_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1159
void GPIO7_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO7_RES, 0);    }
80202ec0:	b580      	push	{r7, lr}
80202ec2:	f240 20dc 	movw	r0, #732	@ 0x2dc
80202ec6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202eca:	2100      	movs	r1, #0
80202ecc:	f000 f8e8 	bl	802030a0 <GPIO_IRQ_Handler>
80202ed0:	bd80      	pop	{r7, pc}
	...

80202ed4 <GPIO7_IRQ1Handler>:
GPIO7_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1161
void GPIO7_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO7_RES, 1);    }
80202ed4:	b580      	push	{r7, lr}
80202ed6:	f240 20dc 	movw	r0, #732	@ 0x2dc
80202eda:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202ede:	2101      	movs	r1, #1
80202ee0:	f000 f8de 	bl	802030a0 <GPIO_IRQ_Handler>
80202ee4:	bd80      	pop	{r7, pc}
	...

80202ee8 <GPIO7_IRQ2Handler>:
GPIO7_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1163
void GPIO7_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO7_RES, 2);    }
80202ee8:	b580      	push	{r7, lr}
80202eea:	f240 20dc 	movw	r0, #732	@ 0x2dc
80202eee:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202ef2:	2102      	movs	r1, #2
80202ef4:	f000 f8d4 	bl	802030a0 <GPIO_IRQ_Handler>
80202ef8:	bd80      	pop	{r7, pc}
	...

80202efc <GPIO7_IRQ3Handler>:
GPIO7_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1165
void GPIO7_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO7_RES, 3);    }
80202efc:	b580      	push	{r7, lr}
80202efe:	f240 20dc 	movw	r0, #732	@ 0x2dc
80202f02:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202f06:	2103      	movs	r1, #3
80202f08:	f000 f8ca 	bl	802030a0 <GPIO_IRQ_Handler>
80202f0c:	bd80      	pop	{r7, pc}
	...

80202f10 <GPIO7_IRQ4Handler>:
GPIO7_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1167
void GPIO7_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO7_RES, 4);    }
80202f10:	b580      	push	{r7, lr}
80202f12:	f240 20dc 	movw	r0, #732	@ 0x2dc
80202f16:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202f1a:	2104      	movs	r1, #4
80202f1c:	f000 f8c0 	bl	802030a0 <GPIO_IRQ_Handler>
80202f20:	bd80      	pop	{r7, pc}
	...

80202f24 <GPIO7_IRQ5Handler>:
GPIO7_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1169
void GPIO7_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO7_RES, 5);    }
80202f24:	b580      	push	{r7, lr}
80202f26:	f240 20dc 	movw	r0, #732	@ 0x2dc
80202f2a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202f2e:	2105      	movs	r1, #5
80202f30:	f000 f8b6 	bl	802030a0 <GPIO_IRQ_Handler>
80202f34:	bd80      	pop	{r7, pc}
	...

80202f38 <GPIO7_IRQ6Handler>:
GPIO7_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1171
void GPIO7_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO7_RES, 6);    }
80202f38:	b580      	push	{r7, lr}
80202f3a:	f240 20dc 	movw	r0, #732	@ 0x2dc
80202f3e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202f42:	2106      	movs	r1, #6
80202f44:	f000 f8ac 	bl	802030a0 <GPIO_IRQ_Handler>
80202f48:	bd80      	pop	{r7, pc}
	...

80202f4c <GPIO7_IRQ7Handler>:
GPIO7_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1173
void GPIO7_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO7_RES, 7);    }
80202f4c:	b580      	push	{r7, lr}
80202f4e:	f240 20dc 	movw	r0, #732	@ 0x2dc
80202f52:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202f56:	2107      	movs	r1, #7
80202f58:	f000 f8a2 	bl	802030a0 <GPIO_IRQ_Handler>
80202f5c:	bd80      	pop	{r7, pc}
	...

80202f60 <GPIO8_IRQ0Handler>:
GPIO8_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1248
void GPIO8_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO8_RES, 0);    }
80202f60:	b580      	push	{r7, lr}
80202f62:	f240 3018 	movw	r0, #792	@ 0x318
80202f66:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202f6a:	2100      	movs	r1, #0
80202f6c:	f000 f898 	bl	802030a0 <GPIO_IRQ_Handler>
80202f70:	bd80      	pop	{r7, pc}
	...

80202f74 <GPIO8_IRQ1Handler>:
GPIO8_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1250
void GPIO8_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO8_RES, 1);    }
80202f74:	b580      	push	{r7, lr}
80202f76:	f240 3018 	movw	r0, #792	@ 0x318
80202f7a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202f7e:	2101      	movs	r1, #1
80202f80:	f000 f88e 	bl	802030a0 <GPIO_IRQ_Handler>
80202f84:	bd80      	pop	{r7, pc}
	...

80202f88 <GPIO8_IRQ2Handler>:
GPIO8_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1252
void GPIO8_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO8_RES, 2);    }
80202f88:	b580      	push	{r7, lr}
80202f8a:	f240 3018 	movw	r0, #792	@ 0x318
80202f8e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202f92:	2102      	movs	r1, #2
80202f94:	f000 f884 	bl	802030a0 <GPIO_IRQ_Handler>
80202f98:	bd80      	pop	{r7, pc}
	...

80202f9c <GPIO8_IRQ3Handler>:
GPIO8_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1254
void GPIO8_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO8_RES, 3);    }
80202f9c:	b580      	push	{r7, lr}
80202f9e:	f240 3018 	movw	r0, #792	@ 0x318
80202fa2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202fa6:	2103      	movs	r1, #3
80202fa8:	f000 f87a 	bl	802030a0 <GPIO_IRQ_Handler>
80202fac:	bd80      	pop	{r7, pc}
	...

80202fb0 <GPIO8_IRQ4Handler>:
GPIO8_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1256
void GPIO8_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO8_RES, 4);    }
80202fb0:	b580      	push	{r7, lr}
80202fb2:	f240 3018 	movw	r0, #792	@ 0x318
80202fb6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202fba:	2104      	movs	r1, #4
80202fbc:	f000 f870 	bl	802030a0 <GPIO_IRQ_Handler>
80202fc0:	bd80      	pop	{r7, pc}
	...

80202fc4 <GPIO8_IRQ5Handler>:
GPIO8_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1258
void GPIO8_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO8_RES, 5);    }
80202fc4:	b580      	push	{r7, lr}
80202fc6:	f240 3018 	movw	r0, #792	@ 0x318
80202fca:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202fce:	2105      	movs	r1, #5
80202fd0:	f000 f866 	bl	802030a0 <GPIO_IRQ_Handler>
80202fd4:	bd80      	pop	{r7, pc}
	...

80202fd8 <GPIO8_IRQ6Handler>:
GPIO8_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1260
void GPIO8_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO8_RES, 6);    }
80202fd8:	b580      	push	{r7, lr}
80202fda:	f240 3018 	movw	r0, #792	@ 0x318
80202fde:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202fe2:	2106      	movs	r1, #6
80202fe4:	f000 f85c 	bl	802030a0 <GPIO_IRQ_Handler>
80202fe8:	bd80      	pop	{r7, pc}
	...

80202fec <GPIO8_IRQ7Handler>:
GPIO8_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1262
void GPIO8_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO8_RES, 7);    }
80202fec:	b580      	push	{r7, lr}
80202fee:	f240 3018 	movw	r0, #792	@ 0x318
80202ff2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202ff6:	2107      	movs	r1, #7
80202ff8:	f000 f852 	bl	802030a0 <GPIO_IRQ_Handler>
80202ffc:	bd80      	pop	{r7, pc}
	...

80203000 <GPIO9_IRQ0Handler>:
GPIO9_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1337
void GPIO9_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO9_RES, 0);    }
80203000:	b580      	push	{r7, lr}
80203002:	f240 3054 	movw	r0, #852	@ 0x354
80203006:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020300a:	2100      	movs	r1, #0
8020300c:	f000 f848 	bl	802030a0 <GPIO_IRQ_Handler>
80203010:	bd80      	pop	{r7, pc}
	...

80203014 <GPIO9_IRQ1Handler>:
GPIO9_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1339
void GPIO9_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO9_RES, 1);    }
80203014:	b580      	push	{r7, lr}
80203016:	f240 3054 	movw	r0, #852	@ 0x354
8020301a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020301e:	2101      	movs	r1, #1
80203020:	f000 f83e 	bl	802030a0 <GPIO_IRQ_Handler>
80203024:	bd80      	pop	{r7, pc}
	...

80203028 <GPIO9_IRQ2Handler>:
GPIO9_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1341
void GPIO9_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO9_RES, 2);    }
80203028:	b580      	push	{r7, lr}
8020302a:	f240 3054 	movw	r0, #852	@ 0x354
8020302e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203032:	2102      	movs	r1, #2
80203034:	f000 f834 	bl	802030a0 <GPIO_IRQ_Handler>
80203038:	bd80      	pop	{r7, pc}
	...

8020303c <GPIO9_IRQ3Handler>:
GPIO9_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1343
void GPIO9_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO9_RES, 3);    }
8020303c:	b580      	push	{r7, lr}
8020303e:	f240 3054 	movw	r0, #852	@ 0x354
80203042:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203046:	2103      	movs	r1, #3
80203048:	f000 f82a 	bl	802030a0 <GPIO_IRQ_Handler>
8020304c:	bd80      	pop	{r7, pc}
	...

80203050 <GPIO9_IRQ4Handler>:
GPIO9_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1345
void GPIO9_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO9_RES, 4);    }
80203050:	b580      	push	{r7, lr}
80203052:	f240 3054 	movw	r0, #852	@ 0x354
80203056:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020305a:	2104      	movs	r1, #4
8020305c:	f000 f820 	bl	802030a0 <GPIO_IRQ_Handler>
80203060:	bd80      	pop	{r7, pc}
	...

80203064 <GPIO9_IRQ5Handler>:
GPIO9_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1347
void GPIO9_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO9_RES, 5);    }
80203064:	b580      	push	{r7, lr}
80203066:	f240 3054 	movw	r0, #852	@ 0x354
8020306a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020306e:	2105      	movs	r1, #5
80203070:	f000 f816 	bl	802030a0 <GPIO_IRQ_Handler>
80203074:	bd80      	pop	{r7, pc}
	...

80203078 <GPIO9_IRQ6Handler>:
GPIO9_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1349
void GPIO9_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO9_RES, 6);    }
80203078:	b580      	push	{r7, lr}
8020307a:	f240 3054 	movw	r0, #852	@ 0x354
8020307e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203082:	2106      	movs	r1, #6
80203084:	f000 f80c 	bl	802030a0 <GPIO_IRQ_Handler>
80203088:	bd80      	pop	{r7, pc}
	...

8020308c <GPIO9_IRQ7Handler>:
GPIO9_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1351
void GPIO9_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO9_RES, 7);    }
8020308c:	b580      	push	{r7, lr}
8020308e:	f240 3054 	movw	r0, #852	@ 0x354
80203092:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203096:	2107      	movs	r1, #7
80203098:	f000 f802 	bl	802030a0 <GPIO_IRQ_Handler>
8020309c:	bd80      	pop	{r7, pc}
	...

802030a0 <GPIO_IRQ_Handler>:
GPIO_IRQ_Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:503
{
802030a0:	b580      	push	{r7, lr}
802030a2:	b082      	sub	sp, #8
802030a4:	9001      	str	r0, [sp, #4]
802030a6:	f88d 1003 	strb.w	r1, [sp, #3]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:505
    gpio_interrupt_eoi(GPIO->reg_base, pin_no);
802030aa:	9801      	ldr	r0, [sp, #4]
802030ac:	6800      	ldr	r0, [r0, #0]
802030ae:	f89d 1003 	ldrb.w	r1, [sp, #3]
802030b2:	f000 ffc1 	bl	80204038 <gpio_interrupt_eoi>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:507
    if (GPIO->cb_event[pin_no] != NULL)
802030b6:	9801      	ldr	r0, [sp, #4]
802030b8:	f89d 1003 	ldrb.w	r1, [sp, #3]
802030bc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
802030c0:	69c0      	ldr	r0, [r0, #28]
802030c2:	b148      	cbz	r0, 802030d8 <GPIO_IRQ_Handler+0x38>
802030c4:	e7ff      	b.n	802030c6 <GPIO_IRQ_Handler+0x26>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:509
        GPIO->cb_event[pin_no](ARM_GPIO_IRQ_EVENT_EXTERNAL);
802030c6:	9801      	ldr	r0, [sp, #4]
802030c8:	f89d 1003 	ldrb.w	r1, [sp, #3]
802030cc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
802030d0:	69c1      	ldr	r1, [r0, #28]
802030d2:	2001      	movs	r0, #1
802030d4:	4788      	blx	r1
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:510
    }
802030d6:	e7ff      	b.n	802030d8 <GPIO_IRQ_Handler+0x38>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:511
}
802030d8:	b002      	add	sp, #8
802030da:	bd80      	pop	{r7, pc}

802030dc <HardFault_Handler>:
HardFault_Handler():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:317
    __asm("MOVS R0, #0\n\t"
802030dc:	2000      	movs	r0, #0
802030de:	f001 bc73 	b.w	802049c8 <CommonAsmFaultHandler>
	...

802030e4 <LPGPIO_IRQ0Handler>:
LPGPIO_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1869
            RTE_LPGPIO_PIN5_IRQ_PRIORITY,
            RTE_LPGPIO_PIN6_IRQ_PRIORITY,
            RTE_LPGPIO_PIN7_IRQ_PRIORITY,
    }
};
void LPGPIO_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&LPGPIO_RES, 0);    }
802030e4:	b580      	push	{r7, lr}
802030e6:	f240 3090 	movw	r0, #912	@ 0x390
802030ea:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802030ee:	2100      	movs	r1, #0
802030f0:	f7ff ffd6 	bl	802030a0 <GPIO_IRQ_Handler>
802030f4:	bd80      	pop	{r7, pc}
	...

802030f8 <LPGPIO_IRQ1Handler>:
LPGPIO_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1871

void LPGPIO_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&LPGPIO_RES, 1);    }
802030f8:	b580      	push	{r7, lr}
802030fa:	f240 3090 	movw	r0, #912	@ 0x390
802030fe:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203102:	2101      	movs	r1, #1
80203104:	f7ff ffcc 	bl	802030a0 <GPIO_IRQ_Handler>
80203108:	bd80      	pop	{r7, pc}
	...

8020310c <LPGPIO_IRQ2Handler>:
LPGPIO_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1873

void LPGPIO_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&LPGPIO_RES, 2);    }
8020310c:	b580      	push	{r7, lr}
8020310e:	f240 3090 	movw	r0, #912	@ 0x390
80203112:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203116:	2102      	movs	r1, #2
80203118:	f7ff ffc2 	bl	802030a0 <GPIO_IRQ_Handler>
8020311c:	bd80      	pop	{r7, pc}
	...

80203120 <LPGPIO_IRQ3Handler>:
LPGPIO_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1875

void LPGPIO_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&LPGPIO_RES, 3);    }
80203120:	b580      	push	{r7, lr}
80203122:	f240 3090 	movw	r0, #912	@ 0x390
80203126:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020312a:	2103      	movs	r1, #3
8020312c:	f7ff ffb8 	bl	802030a0 <GPIO_IRQ_Handler>
80203130:	bd80      	pop	{r7, pc}
	...

80203134 <LPGPIO_IRQ4Handler>:
LPGPIO_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1877

void LPGPIO_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&LPGPIO_RES, 4);    }
80203134:	b580      	push	{r7, lr}
80203136:	f240 3090 	movw	r0, #912	@ 0x390
8020313a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020313e:	2104      	movs	r1, #4
80203140:	f7ff ffae 	bl	802030a0 <GPIO_IRQ_Handler>
80203144:	bd80      	pop	{r7, pc}
	...

80203148 <LPGPIO_IRQ5Handler>:
LPGPIO_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1879

void LPGPIO_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&LPGPIO_RES, 5);    }
80203148:	b580      	push	{r7, lr}
8020314a:	f240 3090 	movw	r0, #912	@ 0x390
8020314e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203152:	2105      	movs	r1, #5
80203154:	f7ff ffa4 	bl	802030a0 <GPIO_IRQ_Handler>
80203158:	bd80      	pop	{r7, pc}
	...

8020315c <LPGPIO_IRQ6Handler>:
LPGPIO_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1881

void LPGPIO_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&LPGPIO_RES, 6);    }
8020315c:	b580      	push	{r7, lr}
8020315e:	f240 3090 	movw	r0, #912	@ 0x390
80203162:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203166:	2106      	movs	r1, #6
80203168:	f7ff ff9a 	bl	802030a0 <GPIO_IRQ_Handler>
8020316c:	bd80      	pop	{r7, pc}
	...

80203170 <LPGPIO_IRQ7Handler>:
LPGPIO_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1883

void LPGPIO_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&LPGPIO_RES, 7);    }
80203170:	b580      	push	{r7, lr}
80203172:	f240 3090 	movw	r0, #912	@ 0x390
80203176:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020317a:	2107      	movs	r1, #7
8020317c:	f7ff ff90 	bl	802030a0 <GPIO_IRQ_Handler>
80203180:	bd80      	pop	{r7, pc}
	...

80203184 <LPRTC_Control>:
LPRTC_Control():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:225
  \param[in]    arg     : Argument of operation (optional)
  \param[in]    LPRTC_RES   : Pointer to lprtc device resources
  \return       execution status
*/
static int32_t LPRTC_Control (LPRTC_RESOURCES *LPRTC_RES, uint32_t control, uint32_t arg)
{
80203184:	b580      	push	{r7, lr}
80203186:	b086      	sub	sp, #24
80203188:	9004      	str	r0, [sp, #16]
8020318a:	9103      	str	r1, [sp, #12]
8020318c:	9202      	str	r2, [sp, #8]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:226
    if (LPRTC_RES->state.powered == 0)
8020318e:	9804      	ldr	r0, [sp, #16]
80203190:	6880      	ldr	r0, [r0, #8]
80203192:	0840      	lsrs	r0, r0, #1
80203194:	07c0      	lsls	r0, r0, #31
80203196:	b920      	cbnz	r0, 802031a2 <LPRTC_Control+0x1e>
80203198:	e7ff      	b.n	8020319a <LPRTC_Control+0x16>
8020319a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:228
    {
        return ARM_DRIVER_ERROR;
8020319e:	9005      	str	r0, [sp, #20]
802031a0:	e034      	b.n	8020320c <LPRTC_Control+0x88>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:231
    }

    switch (control)
802031a2:	9803      	ldr	r0, [sp, #12]
802031a4:	9001      	str	r0, [sp, #4]
802031a6:	2801      	cmp	r0, #1
802031a8:	d004      	beq.n	802031b4 <LPRTC_Control+0x30>
802031aa:	e7ff      	b.n	802031ac <LPRTC_Control+0x28>
802031ac:	9801      	ldr	r0, [sp, #4]
802031ae:	2802      	cmp	r0, #2
802031b0:	d016      	beq.n	802031e0 <LPRTC_Control+0x5c>
802031b2:	e024      	b.n	802031fe <LPRTC_Control+0x7a>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:236
    {
        case ARM_RTC_SET_PRESCALER:
        {
            /* disable LPRTC Prescaler. */
            lprtc_prescaler_disable (LPRTC_RES->regs);
802031b4:	9804      	ldr	r0, [sp, #16]
802031b6:	6800      	ldr	r0, [r0, #0]
802031b8:	f000 ffb0 	bl	8020411c <lprtc_prescaler_disable>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:239

            /* disable LPRTC counter. */
            lprtc_counter_disable (LPRTC_RES->regs);
802031bc:	9804      	ldr	r0, [sp, #16]
802031be:	6800      	ldr	r0, [r0, #0]
802031c0:	f000 ff4c 	bl	8020405c <lprtc_counter_disable>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:242

            /* load LPRTC counter. */
            lprtc_load_prescaler (LPRTC_RES->regs, arg);
802031c4:	9804      	ldr	r0, [sp, #16]
802031c6:	6800      	ldr	r0, [r0, #0]
802031c8:	9902      	ldr	r1, [sp, #8]
802031ca:	f000 ff9f 	bl	8020410c <lprtc_load_prescaler>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:245

            /* enable LPRTC Prescaler. */
            lprtc_prescaler_enable (LPRTC_RES->regs);
802031ce:	9804      	ldr	r0, [sp, #16]
802031d0:	6800      	ldr	r0, [r0, #0]
802031d2:	f000 ffad 	bl	80204130 <lprtc_prescaler_enable>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:248

            /* enable LPRTC counter. */
            lprtc_counter_enable (LPRTC_RES->regs);
802031d6:	9804      	ldr	r0, [sp, #16]
802031d8:	6800      	ldr	r0, [r0, #0]
802031da:	f000 ff49 	bl	80204070 <lprtc_counter_enable>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:250

            break;
802031de:	e012      	b.n	80203206 <LPRTC_Control+0x82>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:255
        }
        case ARM_RTC_SET_ALARM:
        {
            /* load lprtc counter match register. */
            lprtc_load_counter_match_register (LPRTC_RES->regs, arg);
802031e0:	9804      	ldr	r0, [sp, #16]
802031e2:	6800      	ldr	r0, [r0, #0]
802031e4:	9902      	ldr	r1, [sp, #8]
802031e6:	f000 ff89 	bl	802040fc <lprtc_load_counter_match_register>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:258

            /* Enable LPRTC IRQ*/
            NVIC_EnableIRQ (LPRTC_RES->irq_num);
802031ea:	9804      	ldr	r0, [sp, #16]
802031ec:	68c0      	ldr	r0, [r0, #12]
802031ee:	f000 fdd9 	bl	80203da4 <__NVIC_EnableIRQ>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:261

            /* set lprtc alarm state. */
            LPRTC_RES->state.alarm = 1;
802031f2:	9904      	ldr	r1, [sp, #16]
802031f4:	6888      	ldr	r0, [r1, #8]
802031f6:	f040 0004 	orr.w	r0, r0, #4
802031fa:	6088      	str	r0, [r1, #8]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:263

            break;
802031fc:	e003      	b.n	80203206 <LPRTC_Control+0x82>
802031fe:	f06f 0003 	mvn.w	r0, #3
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:268
        }

        default:
            /* Unsupported command */
            return ARM_DRIVER_ERROR_UNSUPPORTED;
80203202:	9005      	str	r0, [sp, #20]
80203204:	e002      	b.n	8020320c <LPRTC_Control+0x88>
80203206:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:270
    }
    return ARM_DRIVER_OK;
80203208:	9005      	str	r0, [sp, #20]
8020320a:	e7ff      	b.n	8020320c <LPRTC_Control+0x88>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:271
}
8020320c:	9805      	ldr	r0, [sp, #20]
8020320e:	b006      	add	sp, #24
80203210:	bd80      	pop	{r7, pc}
	...

80203214 <LPRTC_IRQHandler>:
LPRTC_IRQHandler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:398
    return (LPRTC_LoadCounter (&RTC0, loadval));
}

/* Function Name: RTC0_IRQHandler */
void LPRTC_IRQHandler (void)
{
80203214:	b580      	push	{r7, lr}
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:399
    RTC_IRQHandler (&RTC0);
80203216:	f240 30cc 	movw	r0, #972	@ 0x3cc
8020321a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020321e:	f000 f993 	bl	80203548 <RTC_IRQHandler>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:400
}
80203222:	bd80      	pop	{r7, pc}

80203224 <LPRTC_Initialize>:
LPRTC_Initialize():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:80
{
80203224:	b083      	sub	sp, #12
80203226:	9001      	str	r0, [sp, #4]
80203228:	9100      	str	r1, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:81
    if (LPRTC_RES->state.initialized == 1)
8020322a:	9801      	ldr	r0, [sp, #4]
8020322c:	6880      	ldr	r0, [r0, #8]
8020322e:	07c0      	lsls	r0, r0, #31
80203230:	b118      	cbz	r0, 8020323a <LPRTC_Initialize+0x16>
80203232:	e7ff      	b.n	80203234 <LPRTC_Initialize+0x10>
80203234:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:83
        return ARM_DRIVER_OK;
80203236:	9002      	str	r0, [sp, #8]
80203238:	e011      	b.n	8020325e <LPRTC_Initialize+0x3a>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:86
    if (!cb_event)
8020323a:	9800      	ldr	r0, [sp, #0]
8020323c:	b920      	cbnz	r0, 80203248 <LPRTC_Initialize+0x24>
8020323e:	e7ff      	b.n	80203240 <LPRTC_Initialize+0x1c>
80203240:	f06f 0004 	mvn.w	r0, #4
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:88
        return ARM_DRIVER_ERROR_PARAMETER;
80203244:	9002      	str	r0, [sp, #8]
80203246:	e00a      	b.n	8020325e <LPRTC_Initialize+0x3a>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:92
    LPRTC_RES->cb_event = cb_event;
80203248:	9800      	ldr	r0, [sp, #0]
8020324a:	9901      	ldr	r1, [sp, #4]
8020324c:	6048      	str	r0, [r1, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:95
    LPRTC_RES->state.initialized = 1;
8020324e:	9901      	ldr	r1, [sp, #4]
80203250:	6888      	ldr	r0, [r1, #8]
80203252:	f040 0001 	orr.w	r0, r0, #1
80203256:	6088      	str	r0, [r1, #8]
80203258:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:97
    return ARM_DRIVER_OK;
8020325a:	9002      	str	r0, [sp, #8]
8020325c:	e7ff      	b.n	8020325e <LPRTC_Initialize+0x3a>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:98
}
8020325e:	9802      	ldr	r0, [sp, #8]
80203260:	b003      	add	sp, #12
80203262:	4770      	bx	lr

80203264 <LPRTC_LoadCounter>:
LPRTC_LoadCounter():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:302
{
80203264:	b580      	push	{r7, lr}
80203266:	b084      	sub	sp, #16
80203268:	9002      	str	r0, [sp, #8]
8020326a:	9101      	str	r1, [sp, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:303
    if (LPRTC_RES->state.powered == 0)
8020326c:	9802      	ldr	r0, [sp, #8]
8020326e:	6880      	ldr	r0, [r0, #8]
80203270:	0840      	lsrs	r0, r0, #1
80203272:	07c0      	lsls	r0, r0, #31
80203274:	b920      	cbnz	r0, 80203280 <LPRTC_LoadCounter+0x1c>
80203276:	e7ff      	b.n	80203278 <LPRTC_LoadCounter+0x14>
80203278:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:305
        return ARM_DRIVER_ERROR;
8020327c:	9003      	str	r0, [sp, #12]
8020327e:	e00f      	b.n	802032a0 <LPRTC_LoadCounter+0x3c>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:309
    lprtc_counter_disable (LPRTC_RES->regs);
80203280:	9802      	ldr	r0, [sp, #8]
80203282:	6800      	ldr	r0, [r0, #0]
80203284:	f000 feea 	bl	8020405c <lprtc_counter_disable>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:312
    lprtc_load_count(LPRTC_RES->regs, loadvalue);
80203288:	9802      	ldr	r0, [sp, #8]
8020328a:	6800      	ldr	r0, [r0, #0]
8020328c:	9901      	ldr	r1, [sp, #4]
8020328e:	f000 ff2d 	bl	802040ec <lprtc_load_count>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:315
    lprtc_counter_enable (LPRTC_RES->regs);
80203292:	9802      	ldr	r0, [sp, #8]
80203294:	6800      	ldr	r0, [r0, #0]
80203296:	f000 feeb 	bl	80204070 <lprtc_counter_enable>
8020329a:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:317
    return ARM_DRIVER_OK;
8020329c:	9003      	str	r0, [sp, #12]
8020329e:	e7ff      	b.n	802032a0 <LPRTC_LoadCounter+0x3c>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:318
}
802032a0:	9803      	ldr	r0, [sp, #12]
802032a2:	b004      	add	sp, #16
802032a4:	bd80      	pop	{r7, pc}
	...

802032a8 <LPRTC_PowerControl>:
LPRTC_PowerControl():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:108
{
802032a8:	b580      	push	{r7, lr}
802032aa:	b084      	sub	sp, #16
802032ac:	9002      	str	r0, [sp, #8]
802032ae:	9101      	str	r1, [sp, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:109
    switch (state)
802032b0:	9801      	ldr	r0, [sp, #4]
802032b2:	9000      	str	r0, [sp, #0]
802032b4:	b140      	cbz	r0, 802032c8 <LPRTC_PowerControl+0x20>
802032b6:	e7ff      	b.n	802032b8 <LPRTC_PowerControl+0x10>
802032b8:	9800      	ldr	r0, [sp, #0]
802032ba:	2801      	cmp	r0, #1
802032bc:	d05f      	beq.n	8020337e <LPRTC_PowerControl+0xd6>
802032be:	e7ff      	b.n	802032c0 <LPRTC_PowerControl+0x18>
802032c0:	9800      	ldr	r0, [sp, #0]
802032c2:	2802      	cmp	r0, #2
802032c4:	d020      	beq.n	80203308 <LPRTC_PowerControl+0x60>
802032c6:	e05b      	b.n	80203380 <LPRTC_PowerControl+0xd8>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:114
            NVIC_DisableIRQ (LPRTC_RES->irq_num);
802032c8:	9802      	ldr	r0, [sp, #8]
802032ca:	68c0      	ldr	r0, [r0, #12]
802032cc:	f000 fd50 	bl	80203d70 <__NVIC_DisableIRQ>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:117
            NVIC_ClearPendingIRQ (LPRTC_RES->irq_num);
802032d0:	9802      	ldr	r0, [sp, #8]
802032d2:	68c0      	ldr	r0, [r0, #12]
802032d4:	f000 fd36 	bl	80203d44 <__NVIC_ClearPendingIRQ>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:120
            lprtc_prescaler_disable (LPRTC_RES->regs);
802032d8:	9802      	ldr	r0, [sp, #8]
802032da:	6800      	ldr	r0, [r0, #0]
802032dc:	f000 ff1e 	bl	8020411c <lprtc_prescaler_disable>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:123
            lprtc_counter_disable (LPRTC_RES->regs);
802032e0:	9802      	ldr	r0, [sp, #8]
802032e2:	6800      	ldr	r0, [r0, #0]
802032e4:	f000 feba 	bl	8020405c <lprtc_counter_disable>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:126
            lprtc_interrupt_disable (LPRTC_RES->regs);
802032e8:	9802      	ldr	r0, [sp, #8]
802032ea:	6800      	ldr	r0, [r0, #0]
802032ec:	f000 fee0 	bl	802040b0 <lprtc_interrupt_disable>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:129
            lprtc_counter_wrap_disable (LPRTC_RES->regs);
802032f0:	9802      	ldr	r0, [sp, #8]
802032f2:	6800      	ldr	r0, [r0, #0]
802032f4:	f000 fec6 	bl	80204084 <lprtc_counter_wrap_disable>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:132
            disable_lprtc_clk();
802032f8:	f000 fe4a 	bl	80203f90 <disable_lprtc_clk>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:135
            LPRTC_RES->state.powered = 0;
802032fc:	9902      	ldr	r1, [sp, #8]
802032fe:	6888      	ldr	r0, [r1, #8]
80203300:	f020 0002 	bic.w	r0, r0, #2
80203304:	6088      	str	r0, [r1, #8]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:136
            break;
80203306:	e03f      	b.n	80203388 <LPRTC_PowerControl+0xe0>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:141
            if (LPRTC_RES->state.initialized == 0)
80203308:	9802      	ldr	r0, [sp, #8]
8020330a:	6880      	ldr	r0, [r0, #8]
8020330c:	07c0      	lsls	r0, r0, #31
8020330e:	b920      	cbnz	r0, 8020331a <LPRTC_PowerControl+0x72>
80203310:	e7ff      	b.n	80203312 <LPRTC_PowerControl+0x6a>
80203312:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:143
                return ARM_DRIVER_ERROR;
80203316:	9003      	str	r0, [sp, #12]
80203318:	e039      	b.n	8020338e <LPRTC_PowerControl+0xe6>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:146
            if (LPRTC_RES->state.powered == 1)
8020331a:	9802      	ldr	r0, [sp, #8]
8020331c:	6880      	ldr	r0, [r0, #8]
8020331e:	0840      	lsrs	r0, r0, #1
80203320:	07c0      	lsls	r0, r0, #31
80203322:	b118      	cbz	r0, 8020332c <LPRTC_PowerControl+0x84>
80203324:	e7ff      	b.n	80203326 <LPRTC_PowerControl+0x7e>
80203326:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:148
                return ARM_DRIVER_OK;
80203328:	9003      	str	r0, [sp, #12]
8020332a:	e030      	b.n	8020338e <LPRTC_PowerControl+0xe6>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:152
            enable_lprtc_clk();
8020332c:	f000 fe4e 	bl	80203fcc <enable_lprtc_clk>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:155
            lprtc_counter_wrap_disable (LPRTC_RES->regs);
80203330:	9802      	ldr	r0, [sp, #8]
80203332:	6800      	ldr	r0, [r0, #0]
80203334:	f000 fea6 	bl	80204084 <lprtc_counter_wrap_disable>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:158
            lprtc_prescaler_enable (LPRTC_RES->regs);
80203338:	9802      	ldr	r0, [sp, #8]
8020333a:	6800      	ldr	r0, [r0, #0]
8020333c:	f000 fef8 	bl	80204130 <lprtc_prescaler_enable>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:161
            lprtc_counter_enable (LPRTC_RES->regs);
80203340:	9802      	ldr	r0, [sp, #8]
80203342:	6800      	ldr	r0, [r0, #0]
80203344:	f000 fe94 	bl	80204070 <lprtc_counter_enable>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:164
            lprtc_interrupt_enable (LPRTC_RES->regs);
80203348:	9802      	ldr	r0, [sp, #8]
8020334a:	6800      	ldr	r0, [r0, #0]
8020334c:	f000 feba 	bl	802040c4 <lprtc_interrupt_enable>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:167
            NVIC_SetPriority (LPRTC_RES->irq_num, LPRTC_RES->irq_priority);
80203350:	9902      	ldr	r1, [sp, #8]
80203352:	68c8      	ldr	r0, [r1, #12]
80203354:	8a09      	ldrh	r1, [r1, #16]
80203356:	f000 fd3b 	bl	80203dd0 <__NVIC_SetPriority>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:170
            NVIC_ClearPendingIRQ (LPRTC_RES->irq_num);
8020335a:	9802      	ldr	r0, [sp, #8]
8020335c:	68c0      	ldr	r0, [r0, #12]
8020335e:	f000 fcf1 	bl	80203d44 <__NVIC_ClearPendingIRQ>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:171
            NVIC_EnableIRQ (LPRTC_RES->irq_num);
80203362:	9802      	ldr	r0, [sp, #8]
80203364:	68c0      	ldr	r0, [r0, #12]
80203366:	f000 fd1d 	bl	80203da4 <__NVIC_EnableIRQ>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:174
            lprtc_interrupt_unmask (LPRTC_RES->regs);
8020336a:	9802      	ldr	r0, [sp, #8]
8020336c:	6800      	ldr	r0, [r0, #0]
8020336e:	f000 feb3 	bl	802040d8 <lprtc_interrupt_unmask>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:177
            LPRTC_RES->state.powered = 1;
80203372:	9902      	ldr	r1, [sp, #8]
80203374:	6888      	ldr	r0, [r1, #8]
80203376:	f040 0002 	orr.w	r0, r0, #2
8020337a:	6088      	str	r0, [r1, #8]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:178
            break;
8020337c:	e004      	b.n	80203388 <LPRTC_PowerControl+0xe0>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:181
        case ARM_POWER_LOW:
8020337e:	e7ff      	b.n	80203380 <LPRTC_PowerControl+0xd8>
80203380:	f06f 0003 	mvn.w	r0, #3
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:184
            return ARM_DRIVER_ERROR_UNSUPPORTED;
80203384:	9003      	str	r0, [sp, #12]
80203386:	e002      	b.n	8020338e <LPRTC_PowerControl+0xe6>
80203388:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:188
    return ARM_DRIVER_OK;
8020338a:	9003      	str	r0, [sp, #12]
8020338c:	e7ff      	b.n	8020338e <LPRTC_PowerControl+0xe6>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:189
}
8020338e:	9803      	ldr	r0, [sp, #12]
80203390:	b004      	add	sp, #16
80203392:	bd80      	pop	{r7, pc}

80203394 <LPRTC_ReadCounter>:
LPRTC_ReadCounter():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:282
{
80203394:	b580      	push	{r7, lr}
80203396:	b084      	sub	sp, #16
80203398:	9002      	str	r0, [sp, #8]
8020339a:	9101      	str	r1, [sp, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:283
    if (LPRTC_RES->state.powered == 0)
8020339c:	9802      	ldr	r0, [sp, #8]
8020339e:	6880      	ldr	r0, [r0, #8]
802033a0:	0840      	lsrs	r0, r0, #1
802033a2:	07c0      	lsls	r0, r0, #31
802033a4:	b920      	cbnz	r0, 802033b0 <LPRTC_ReadCounter+0x1c>
802033a6:	e7ff      	b.n	802033a8 <LPRTC_ReadCounter+0x14>
802033a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:285
        return ARM_DRIVER_ERROR;
802033ac:	9003      	str	r0, [sp, #12]
802033ae:	e008      	b.n	802033c2 <LPRTC_ReadCounter+0x2e>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:289
    *val = lprtc_get_count (LPRTC_RES->regs);
802033b0:	9802      	ldr	r0, [sp, #8]
802033b2:	6800      	ldr	r0, [r0, #0]
802033b4:	f000 fe70 	bl	80204098 <lprtc_get_count>
802033b8:	9901      	ldr	r1, [sp, #4]
802033ba:	6008      	str	r0, [r1, #0]
802033bc:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:291
    return ARM_DRIVER_OK;
802033be:	9003      	str	r0, [sp, #12]
802033c0:	e7ff      	b.n	802033c2 <LPRTC_ReadCounter+0x2e>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:292
}
802033c2:	9803      	ldr	r0, [sp, #12]
802033c4:	b004      	add	sp, #16
802033c6:	bd80      	pop	{r7, pc}

802033c8 <LPRTC_Uninitialize>:
LPRTC_Uninitialize():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:200
{
802033c8:	b082      	sub	sp, #8
802033ca:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:201
     if (LPRTC_RES->state.initialized == 0)
802033cc:	9800      	ldr	r0, [sp, #0]
802033ce:	6880      	ldr	r0, [r0, #8]
802033d0:	07c0      	lsls	r0, r0, #31
802033d2:	b918      	cbnz	r0, 802033dc <LPRTC_Uninitialize+0x14>
802033d4:	e7ff      	b.n	802033d6 <LPRTC_Uninitialize+0xe>
802033d6:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:203
         return ARM_DRIVER_OK;
802033d8:	9001      	str	r0, [sp, #4]
802033da:	e009      	b.n	802033f0 <LPRTC_Uninitialize+0x28>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:207
    LPRTC_RES->cb_event = NULL;
802033dc:	9900      	ldr	r1, [sp, #0]
802033de:	2000      	movs	r0, #0
802033e0:	6048      	str	r0, [r1, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:210
    LPRTC_RES->state.initialized = 0;
802033e2:	9a00      	ldr	r2, [sp, #0]
802033e4:	6891      	ldr	r1, [r2, #8]
802033e6:	f021 0101 	bic.w	r1, r1, #1
802033ea:	6091      	str	r1, [r2, #8]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:212
    return ARM_DRIVER_OK;
802033ec:	9001      	str	r0, [sp, #4]
802033ee:	e7ff      	b.n	802033f0 <LPRTC_Uninitialize+0x28>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:213
}
802033f0:	9801      	ldr	r0, [sp, #4]
802033f2:	b002      	add	sp, #8
802033f4:	4770      	bx	lr
	...

802033f8 <MPU_Clear_All_Regions>:
MPU_Clear_All_Regions():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:146
 *         all the existing regions.
 * @param  None
 * @retval None
 */
void MPU_Clear_All_Regions(void)
{
802033f8:	b580      	push	{r7, lr}
802033fa:	b084      	sub	sp, #16
802033fc:	f64e 5090 	movw	r0, #60816	@ 0xed90
80203400:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:147
    MPU_Type* mpu = MPU;
80203404:	9003      	str	r0, [sp, #12]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:149
    /* Retrieve the number of regions */
    uint32_t num_regions = (mpu->TYPE >> 8);
80203406:	9803      	ldr	r0, [sp, #12]
80203408:	6800      	ldr	r0, [r0, #0]
8020340a:	0a00      	lsrs	r0, r0, #8
8020340c:	9002      	str	r0, [sp, #8]
8020340e:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:152
    uint32_t cnt;

    for(cnt = 0U; cnt < num_regions; cnt++)
80203410:	9001      	str	r0, [sp, #4]
80203412:	e7ff      	b.n	80203414 <MPU_Clear_All_Regions+0x1c>
80203414:	9801      	ldr	r0, [sp, #4]
80203416:	9902      	ldr	r1, [sp, #8]
80203418:	4288      	cmp	r0, r1
8020341a:	d208      	bcs.n	8020342e <MPU_Clear_All_Regions+0x36>
8020341c:	e7ff      	b.n	8020341e <MPU_Clear_All_Regions+0x26>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:153
            ARM_MPU_ClrRegion(cnt);
8020341e:	9801      	ldr	r0, [sp, #4]
80203420:	f7ff f87a 	bl	80202518 <ARM_MPU_ClrRegion>
80203424:	e7ff      	b.n	80203426 <MPU_Clear_All_Regions+0x2e>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:152
    for(cnt = 0U; cnt < num_regions; cnt++)
80203426:	9801      	ldr	r0, [sp, #4]
80203428:	3001      	adds	r0, #1
8020342a:	9001      	str	r0, [sp, #4]
8020342c:	e7f2      	b.n	80203414 <MPU_Clear_All_Regions+0x1c>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:154
}
8020342e:	b004      	add	sp, #16
80203430:	bd80      	pop	{r7, pc}
	...

80203434 <MPU_Load_Regions>:
MPU_Load_Regions():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:51
{
80203434:	b580      	push	{r7, lr}
80203436:	b082      	sub	sp, #8
80203438:	2000      	movs	r0, #0
8020343a:	9001      	str	r0, [sp, #4]
8020343c:	2122      	movs	r1, #34	@ 0x22
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:111
    ARM_MPU_SetMemAttr(MEMATTRIDX_NORMAL_WT_RA_TRANSIENT, ARM_MPU_ATTR(
8020343e:	f7ff f935 	bl	802026ac <ARM_MPU_SetMemAttr>
80203442:	2001      	movs	r0, #1
80203444:	2104      	movs	r1, #4
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:117
    ARM_MPU_SetMemAttr(MEMATTRIDX_DEVICE_nGnRE, ARM_MPU_ATTR(
80203446:	f7ff f931 	bl	802026ac <ARM_MPU_SetMemAttr>
8020344a:	2002      	movs	r0, #2
8020344c:	21ff      	movs	r1, #255	@ 0xff
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:123
    ARM_MPU_SetMemAttr(MEMATTRIDX_NORMAL_WB_RA_WA, ARM_MPU_ATTR(
8020344e:	f7ff f92d 	bl	802026ac <ARM_MPU_SetMemAttr>
80203452:	2003      	movs	r0, #3
80203454:	21aa      	movs	r1, #170	@ 0xaa
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:129
    ARM_MPU_SetMemAttr(MEMATTRIDX_NORMAL_WT_RA, ARM_MPU_ATTR(
80203456:	f7ff f929 	bl	802026ac <ARM_MPU_SetMemAttr>
8020345a:	9801      	ldr	r0, [sp, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:135
    ARM_MPU_Load(0, mpu_table, sizeof(mpu_table)/sizeof(ARM_MPU_Region_t));
8020345c:	f645 7108 	movw	r1, #24328	@ 0x5f08
80203460:	f2c8 0120 	movt	r1, #32800	@ 0x8020
80203464:	2209      	movs	r2, #9
80203466:	f7ff f8a1 	bl	802025ac <ARM_MPU_Load>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:136
}
8020346a:	b002      	add	sp, #8
8020346c:	bd80      	pop	{r7, pc}
	...

80203470 <MPU_Setup>:
MPU_Setup():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:170
 * @param  None
 * @retval None
 */
__attribute__ ((weak))
void MPU_Setup(void)
{
80203470:	b580      	push	{r7, lr}
80203472:	f64e 5094 	movw	r0, #60820	@ 0xed94
80203476:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:178
     * Make this conditional to avoid an unnecessary DSB -
     * If this call is made from the booting sequence, it is very
     * likely that cache auto-invalidation is ongoing (as we prepare
     * the table), and DSB would wait for it to finish.
     */
    if (MPU->CTRL & MPU_CTRL_ENABLE_Msk)
8020347a:	6800      	ldr	r0, [r0, #0]
8020347c:	07c0      	lsls	r0, r0, #31
8020347e:	b118      	cbz	r0, 80203488 <MPU_Setup+0x18>
80203480:	e7ff      	b.n	80203482 <MPU_Setup+0x12>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:181
    {
        /* Disable the MPU before operating on the table */
        ARM_MPU_Disable();
80203482:	f7ff f861 	bl	80202548 <ARM_MPU_Disable>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:182
    }
80203486:	e7ff      	b.n	80203488 <MPU_Setup+0x18>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:185

    /* Clear all the regions */
    MPU_Clear_All_Regions();
80203488:	f7ff ffb6 	bl	802033f8 <MPU_Clear_All_Regions>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:188

    /* Load the new table: mpu_table */
    MPU_Load_Regions();
8020348c:	f7ff ffd2 	bl	80203434 <MPU_Load_Regions>
80203490:	2006      	movs	r0, #6
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:191

    /* Enable the MPU now */
    ARM_MPU_Enable(MPU_CONTROL);
80203492:	f7ff f871 	bl	80202578 <ARM_MPU_Enable>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:192
}
80203496:	bd80      	pop	{r7, pc}

80203498 <MemManage_Handler>:
MemManage_Handler():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:324
    __asm("MOVS R0, #1\n\t"
80203498:	2001      	movs	r0, #1
8020349a:	f001 ba95 	b.w	802049c8 <CommonAsmFaultHandler>
	...

802034a0 <RTC0_Control>:
RTC0_Control():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:380
{
802034a0:	b580      	push	{r7, lr}
802034a2:	b082      	sub	sp, #8
802034a4:	9001      	str	r0, [sp, #4]
802034a6:	9100      	str	r1, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:381
    return (LPRTC_Control(&RTC0, control, arg));
802034a8:	9901      	ldr	r1, [sp, #4]
802034aa:	9a00      	ldr	r2, [sp, #0]
802034ac:	f240 30cc 	movw	r0, #972	@ 0x3cc
802034b0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802034b4:	f7ff fe66 	bl	80203184 <LPRTC_Control>
802034b8:	b002      	add	sp, #8
802034ba:	bd80      	pop	{r7, pc}

802034bc <RTC0_Initialize>:
RTC0_Initialize():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:362
{
802034bc:	b580      	push	{r7, lr}
802034be:	b082      	sub	sp, #8
802034c0:	9001      	str	r0, [sp, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:363
    return (LPRTC_Initialize (&RTC0, cb_event));
802034c2:	9901      	ldr	r1, [sp, #4]
802034c4:	f240 30cc 	movw	r0, #972	@ 0x3cc
802034c8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802034cc:	f7ff feaa 	bl	80203224 <LPRTC_Initialize>
802034d0:	b002      	add	sp, #8
802034d2:	bd80      	pop	{r7, pc}

802034d4 <RTC0_LoadCounter>:
RTC0_LoadCounter():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:392
{
802034d4:	b580      	push	{r7, lr}
802034d6:	b082      	sub	sp, #8
802034d8:	9001      	str	r0, [sp, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:393
    return (LPRTC_LoadCounter (&RTC0, loadval));
802034da:	9901      	ldr	r1, [sp, #4]
802034dc:	f240 30cc 	movw	r0, #972	@ 0x3cc
802034e0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802034e4:	f7ff febe 	bl	80203264 <LPRTC_LoadCounter>
802034e8:	b002      	add	sp, #8
802034ea:	bd80      	pop	{r7, pc}

802034ec <RTC0_PowerControl>:
RTC0_PowerControl():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:374
{
802034ec:	b580      	push	{r7, lr}
802034ee:	b082      	sub	sp, #8
802034f0:	9001      	str	r0, [sp, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:375
    return (LPRTC_PowerControl(&RTC0, state));
802034f2:	9901      	ldr	r1, [sp, #4]
802034f4:	f240 30cc 	movw	r0, #972	@ 0x3cc
802034f8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802034fc:	f7ff fed4 	bl	802032a8 <LPRTC_PowerControl>
80203500:	b002      	add	sp, #8
80203502:	bd80      	pop	{r7, pc}

80203504 <RTC0_ReadCounter>:
RTC0_ReadCounter():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:386
{
80203504:	b580      	push	{r7, lr}
80203506:	b082      	sub	sp, #8
80203508:	9001      	str	r0, [sp, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:387
    return (LPRTC_ReadCounter (&RTC0, val));
8020350a:	9901      	ldr	r1, [sp, #4]
8020350c:	f240 30cc 	movw	r0, #972	@ 0x3cc
80203510:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203514:	f7ff ff3e 	bl	80203394 <LPRTC_ReadCounter>
80203518:	b002      	add	sp, #8
8020351a:	bd80      	pop	{r7, pc}

8020351c <RTC0_Uninitialize>:
RTC0_Uninitialize():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:368
{
8020351c:	b580      	push	{r7, lr}
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:369
    return (LPRTC_Uninitialize (&RTC0));
8020351e:	f240 30cc 	movw	r0, #972	@ 0x3cc
80203522:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203526:	f7ff ff4f 	bl	802033c8 <LPRTC_Uninitialize>
8020352a:	bd80      	pop	{r7, pc}

8020352c <RTC_GetCapabilities>:
RTC_GetCapabilities():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:64
{
8020352c:	b081      	sub	sp, #4
8020352e:	2001      	movs	r0, #1
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:65
    return DriverCapabilities;
80203530:	9000      	str	r0, [sp, #0]
80203532:	9800      	ldr	r0, [sp, #0]
80203534:	b001      	add	sp, #4
80203536:	4770      	bx	lr

80203538 <RTC_GetVersion>:
RTC_GetVersion():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:53
{
80203538:	b081      	sub	sp, #4
8020353a:	f04f 2001 	mov.w	r0, #16777472	@ 0x1000100
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:54
    return DriverVersion;
8020353e:	9000      	str	r0, [sp, #0]
80203540:	9800      	ldr	r0, [sp, #0]
80203542:	b001      	add	sp, #4
80203544:	4770      	bx	lr
	...

80203548 <RTC_IRQHandler>:
RTC_IRQHandler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:327
{
80203548:	b580      	push	{r7, lr}
8020354a:	b082      	sub	sp, #8
8020354c:	9001      	str	r0, [sp, #4]
8020354e:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:328
    uint32_t event = 0U;    /* callback event */
80203550:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:331
    lprtc_interrupt_ack (LPRTC_RES->regs);
80203552:	9801      	ldr	r0, [sp, #4]
80203554:	6800      	ldr	r0, [r0, #0]
80203556:	f000 fda5 	bl	802040a4 <lprtc_interrupt_ack>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:334
    event |= ARM_RTC_EVENT_ALARM_TRIGGER;
8020355a:	9800      	ldr	r0, [sp, #0]
8020355c:	f040 0001 	orr.w	r0, r0, #1
80203560:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:337
    if (LPRTC_RES->cb_event != NULL)
80203562:	9801      	ldr	r0, [sp, #4]
80203564:	6840      	ldr	r0, [r0, #4]
80203566:	b128      	cbz	r0, 80203574 <RTC_IRQHandler+0x2c>
80203568:	e7ff      	b.n	8020356a <RTC_IRQHandler+0x22>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:340
        LPRTC_RES->cb_event(event);
8020356a:	9801      	ldr	r0, [sp, #4]
8020356c:	6841      	ldr	r1, [r0, #4]
8020356e:	9800      	ldr	r0, [sp, #0]
80203570:	4788      	blx	r1
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:341
    }
80203572:	e7ff      	b.n	80203574 <RTC_IRQHandler+0x2c>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:343
    NVIC_DisableIRQ (LPRTC_RES->irq_num);
80203574:	9801      	ldr	r0, [sp, #4]
80203576:	68c0      	ldr	r0, [r0, #12]
80203578:	f000 fbfa 	bl	80203d70 <__NVIC_DisableIRQ>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:346
    LPRTC_RES->state.alarm = 0;
8020357c:	9901      	ldr	r1, [sp, #4]
8020357e:	6888      	ldr	r0, [r1, #8]
80203580:	f020 0004 	bic.w	r0, r0, #4
80203584:	6088      	str	r0, [r1, #8]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_RTC.c:347
}
80203586:	b002      	add	sp, #8
80203588:	bd80      	pop	{r7, pc}
	...

8020358c <Reset_Handler>:
Reset_Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/core/M55_HP/source/startup_M55_HP.c:1078
  __asm (
8020358c:	4803      	ldr	r0, [pc, #12]	@ (8020359c <Reset_Handler+0x10>)
8020358e:	4904      	ldr	r1, [pc, #16]	@ (802035a0 <Reset_Handler+0x14>)
80203590:	f380 880a 	msr	MSPLIM, r0
80203594:	f381 8808 	msr	MSP, r1
80203598:	f000 f804 	bl	802035a4 <Reset_Handler_C>
8020359c:	200fe000 	.word	0x200fe000
802035a0:	20100000 	.word	0x20100000

802035a4 <Reset_Handler_C>:
Reset_Handler_C():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/core/M55_HP/source/startup_M55_HP.c:1092
  SystemInit();                             /* CMSIS System Initialization */
802035a4:	f000 f8a0 	bl	802036e8 <SystemInit>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/core/M55_HP/source/startup_M55_HP.c:1093
  __PROGRAM_START();                        /* Enter PreMain (C library entry point) */
802035a8:	f7fd f90a 	bl	802007c0 <__main>

802035ac <SAU_TCM_NS_Setup>:
SAU_TCM_NS_Setup():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:70

#define SAU_BASE                            (SCS_BASE +  0x0DD0UL)                        /*!< Security Attribution Unit */
#define SAU                                 ((SAU_Type       *)     SAU_BASE)             /*!< Security Attribution Unit */

__STATIC_INLINE void SAU_TCM_NS_Setup (void)
{
802035ac:	f64e 51d8 	movw	r1, #60888	@ 0xedd8
802035b0:	f2ce 0100 	movt	r1, #57344	@ 0xe000
802035b4:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:71
    SAU->RNR = 0;
802035b6:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:72
    SAU->RBAR = (uint32_t)&ns_region_0_start & SAU_RBAR_BADDR_Msk;
802035b8:	f244 0000 	movw	r0, #16384	@ 0x4000
802035bc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802035c0:	f020 001f 	bic.w	r0, r0, #31
802035c4:	f64e 51dc 	movw	r1, #60892	@ 0xeddc
802035c8:	f2ce 0100 	movt	r1, #57344	@ 0xe000
802035cc:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:73
    SAU->RLAR = (((uint32_t)&ns_region_0_end - 1) & SAU_RLAR_LADDR_Msk) | \
802035ce:	f244 0000 	movw	r0, #16384	@ 0x4000
802035d2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802035d6:	1e41      	subs	r1, r0, #1
802035d8:	2001      	movs	r0, #1
802035da:	f360 0104 	bfi	r1, r0, #0, #5
802035de:	f64e 52e0 	movw	r2, #60896	@ 0xede0
802035e2:	f2ce 0200 	movt	r2, #57344	@ 0xe000
802035e6:	6011      	str	r1, [r2, #0]
802035e8:	f64e 51d0 	movw	r1, #60880	@ 0xedd0
802035ec:	f2ce 0100 	movt	r1, #57344	@ 0xe000
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:76
                SAU_RLAR_ENABLE_Msk;

    SAU->CTRL = ((1U << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk);
802035f0:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:77
}
802035f2:	4770      	bx	lr

802035f4 <SEGGER_RTT_Write>:
SEGGER_RTT_Write():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:1200
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
802035f4:	b580      	push	{r7, lr}
802035f6:	b086      	sub	sp, #24
802035f8:	9005      	str	r0, [sp, #20]
802035fa:	9104      	str	r1, [sp, #16]
802035fc:	9203      	str	r2, [sp, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:1203
  unsigned Status;

  INIT();
802035fe:	e7ff      	b.n	80203600 <SEGGER_RTT_Write+0xc>
80203600:	f240 70a4 	movw	r0, #1956	@ 0x7a4
80203604:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203608:	9001      	str	r0, [sp, #4]
8020360a:	9801      	ldr	r0, [sp, #4]
8020360c:	7800      	ldrb	r0, [r0, #0]
8020360e:	2853      	cmp	r0, #83	@ 0x53
80203610:	d003      	beq.n	8020361a <SEGGER_RTT_Write+0x26>
80203612:	e7ff      	b.n	80203614 <SEGGER_RTT_Write+0x20>
80203614:	f000 fa6c 	bl	80203af0 <_DoInit>
80203618:	e7ff      	b.n	8020361a <SEGGER_RTT_Write+0x26>
8020361a:	e7ff      	b.n	8020361c <SEGGER_RTT_Write+0x28>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:1205
  SEGGER_RTT_LOCK();
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
8020361c:	9805      	ldr	r0, [sp, #20]
8020361e:	9904      	ldr	r1, [sp, #16]
80203620:	9a03      	ldr	r2, [sp, #12]
80203622:	f000 f805 	bl	80203630 <SEGGER_RTT_WriteNoLock>
80203626:	9002      	str	r0, [sp, #8]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:1207
  SEGGER_RTT_UNLOCK();
  return Status;
80203628:	9802      	ldr	r0, [sp, #8]
8020362a:	b006      	add	sp, #24
8020362c:	bd80      	pop	{r7, pc}
	...

80203630 <SEGGER_RTT_WriteNoLock>:
SEGGER_RTT_WriteNoLock():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:1095
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
80203630:	b580      	push	{r7, lr}
80203632:	b08a      	sub	sp, #40	@ 0x28
80203634:	9009      	str	r0, [sp, #36]	@ 0x24
80203636:	9108      	str	r1, [sp, #32]
80203638:	9207      	str	r2, [sp, #28]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:1103
  pData = (const char *)pBuffer;
8020363a:	9808      	ldr	r0, [sp, #32]
8020363c:	9004      	str	r0, [sp, #16]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:1104
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
8020363e:	9809      	ldr	r0, [sp, #36]	@ 0x24
80203640:	eb00 0140 	add.w	r1, r0, r0, lsl #1
80203644:	f240 70a4 	movw	r0, #1956	@ 0x7a4
80203648:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020364c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
80203650:	3018      	adds	r0, #24
80203652:	9003      	str	r0, [sp, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:1108
  switch (pRing->Flags) {
80203654:	9803      	ldr	r0, [sp, #12]
80203656:	6940      	ldr	r0, [r0, #20]
80203658:	9002      	str	r0, [sp, #8]
8020365a:	b140      	cbz	r0, 8020366e <SEGGER_RTT_WriteNoLock+0x3e>
8020365c:	e7ff      	b.n	8020365e <SEGGER_RTT_WriteNoLock+0x2e>
8020365e:	9802      	ldr	r0, [sp, #8]
80203660:	2801      	cmp	r0, #1
80203662:	d019      	beq.n	80203698 <SEGGER_RTT_WriteNoLock+0x68>
80203664:	e7ff      	b.n	80203666 <SEGGER_RTT_WriteNoLock+0x36>
80203666:	9802      	ldr	r0, [sp, #8]
80203668:	2802      	cmp	r0, #2
8020366a:	d02c      	beq.n	802036c6 <SEGGER_RTT_WriteNoLock+0x96>
8020366c:	e032      	b.n	802036d4 <SEGGER_RTT_WriteNoLock+0xa4>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:1114
    Avail = _GetAvailWriteSpace(pRing);
8020366e:	9803      	ldr	r0, [sp, #12]
80203670:	f000 fa90 	bl	80203b94 <_GetAvailWriteSpace>
80203674:	9005      	str	r0, [sp, #20]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:1115
    if (Avail < NumBytes) {
80203676:	9805      	ldr	r0, [sp, #20]
80203678:	9907      	ldr	r1, [sp, #28]
8020367a:	4288      	cmp	r0, r1
8020367c:	d203      	bcs.n	80203686 <SEGGER_RTT_WriteNoLock+0x56>
8020367e:	e7ff      	b.n	80203680 <SEGGER_RTT_WriteNoLock+0x50>
80203680:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:1116
      Status = 0u;
80203682:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:1117
    } else {
80203684:	e007      	b.n	80203696 <SEGGER_RTT_WriteNoLock+0x66>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:1118
      Status = NumBytes;
80203686:	9807      	ldr	r0, [sp, #28]
80203688:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:1119
      _WriteNoCheck(pRing, pData, NumBytes);
8020368a:	9803      	ldr	r0, [sp, #12]
8020368c:	9904      	ldr	r1, [sp, #16]
8020368e:	9a07      	ldr	r2, [sp, #28]
80203690:	f000 fb12 	bl	80203cb8 <_WriteNoCheck>
80203694:	e7ff      	b.n	80203696 <SEGGER_RTT_WriteNoLock+0x66>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:1121
    break;
80203696:	e020      	b.n	802036da <SEGGER_RTT_WriteNoLock+0xaa>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:1126
    Avail = _GetAvailWriteSpace(pRing);
80203698:	9803      	ldr	r0, [sp, #12]
8020369a:	f000 fa7b 	bl	80203b94 <_GetAvailWriteSpace>
8020369e:	9005      	str	r0, [sp, #20]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:1127
    Status = Avail < NumBytes ? Avail : NumBytes;
802036a0:	9805      	ldr	r0, [sp, #20]
802036a2:	9907      	ldr	r1, [sp, #28]
802036a4:	4288      	cmp	r0, r1
802036a6:	d203      	bcs.n	802036b0 <SEGGER_RTT_WriteNoLock+0x80>
802036a8:	e7ff      	b.n	802036aa <SEGGER_RTT_WriteNoLock+0x7a>
802036aa:	9805      	ldr	r0, [sp, #20]
802036ac:	9001      	str	r0, [sp, #4]
802036ae:	e002      	b.n	802036b6 <SEGGER_RTT_WriteNoLock+0x86>
802036b0:	9807      	ldr	r0, [sp, #28]
802036b2:	9001      	str	r0, [sp, #4]
802036b4:	e7ff      	b.n	802036b6 <SEGGER_RTT_WriteNoLock+0x86>
802036b6:	9801      	ldr	r0, [sp, #4]
802036b8:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:1128
    _WriteNoCheck(pRing, pData, Status);
802036ba:	9803      	ldr	r0, [sp, #12]
802036bc:	9904      	ldr	r1, [sp, #16]
802036be:	9a06      	ldr	r2, [sp, #24]
802036c0:	f000 fafa 	bl	80203cb8 <_WriteNoCheck>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:1129
    break;
802036c4:	e009      	b.n	802036da <SEGGER_RTT_WriteNoLock+0xaa>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:1134
    Status = _WriteBlocking(pRing, pData, NumBytes);
802036c6:	9803      	ldr	r0, [sp, #12]
802036c8:	9904      	ldr	r1, [sp, #16]
802036ca:	9a07      	ldr	r2, [sp, #28]
802036cc:	f000 fa82 	bl	80203bd4 <_WriteBlocking>
802036d0:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:1135
    break;
802036d2:	e002      	b.n	802036da <SEGGER_RTT_WriteNoLock+0xaa>
802036d4:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:1137
    Status = 0u;
802036d6:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:1138
    break;
802036d8:	e7ff      	b.n	802036da <SEGGER_RTT_WriteNoLock+0xaa>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:1143
  return Status;
802036da:	9806      	ldr	r0, [sp, #24]
802036dc:	b00a      	add	sp, #40	@ 0x28
802036de:	bd80      	pop	{r7, pc}

802036e0 <SecureFault_Handler>:
SecureFault_Handler():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:345
}

__attribute__((naked))
void SecureFault_Handler(void)
{
    __asm("MOVS R0, #4\n\t"
802036e0:	2004      	movs	r0, #4
802036e2:	f001 b971 	b.w	802049c8 <CommonAsmFaultHandler>
	...

802036e8 <SystemInit>:
SystemInit():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:156

/*----------------------------------------------------------------------------
  System initialization function
 *----------------------------------------------------------------------------*/
void SystemInit (void)
{
802036e8:	b580      	push	{r7, lr}
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:162
  // Avoid DSB as long as possible, as it will block until cache
  // auto-invalidation has completed. First DSB is currently at the
  // end of MPU_Setup.

#if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
  SCB->VTOR = (uint32_t) __VECTOR_TABLE;
802036ea:	f240 0000 	movw	r0, #0
802036ee:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802036f2:	f64e 5108 	movw	r1, #60680	@ 0xed08
802036f6:	f2ce 0100 	movt	r1, #57344	@ 0xe000
802036fa:	6008      	str	r0, [r1, #0]
802036fc:	f64e 5124 	movw	r1, #60708	@ 0xed24
80203700:	f2ce 0100 	movt	r1, #57344	@ 0xe000
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:167
#endif

  /* Enable UsageFault, BusFault, MemFault and SecurityFault exceptions */
  /* Otherwise all you see is HardFault, even in the debugger */
  SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk |
80203704:	6808      	ldr	r0, [r1, #0]
80203706:	f440 2070 	orr.w	r0, r0, #983040	@ 0xf0000
8020370a:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:173
                SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_SECUREFAULTENA_Msk;

  /*
   * Handle Spurious Wakeup
   */
  System_HandleSpuriousWakeup();
8020370c:	f000 f83e 	bl	8020378c <System_HandleSpuriousWakeup>
80203710:	f244 0100 	movw	r1, #16384	@ 0x4000
80203714:	f6c1 2160 	movt	r1, #6752	@ 0x1a60
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:176

  /* Clear the WIC Sleep */
  WICCONTROL &= ~WICCONTROL_WIC_Msk;
80203718:	6808      	ldr	r0, [r1, #0]
8020371a:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
8020371e:	6008      	str	r0, [r1, #0]
80203720:	f64e 5188 	movw	r1, #60808	@ 0xed88
80203724:	f2ce 0100 	movt	r1, #57344	@ 0xe000
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:180

#if (defined (__FPU_USED) && (__FPU_USED == 1U)) || \
    (defined (__ARM_FEATURE_MVE) && (__ARM_FEATURE_MVE > 0U))
  SCB->CPACR |= ((3U << 10U*2U) |           /* enable CP10 Full Access */
80203728:	6808      	ldr	r0, [r1, #0]
8020372a:	f440 0070 	orr.w	r0, r0, #15728640	@ 0xf00000
8020372e:	6008      	str	r0, [r1, #0]
80203730:	f24e 0104 	movw	r1, #57348	@ 0xe004
80203734:	f2ce 0101 	movt	r1, #57345	@ 0xe001
80203738:	f240 20e5 	movw	r0, #741	@ 0x2e5
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:200
  *
  * Here we modify only the MAX_OS based on the performance achieved in our
  * trials.
  *
  */
 MEMSYSCTL->PFCR = (MEMSYSCTL_PFCR_MAX_OS_DEFAULT_VALUE << MEMSYSCTL_PFCR_MAX_OS_Pos) |
8020373c:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:212
 * Do not do MPU_Setup() if running from the OSPI XIP regions as MPU_Setup() temporarily
 * disables the MPU which causes the default Device/XN attributes to take effect for the
 * OSPI XIP regions.
 */
#if !BOOT_FROM_OSPI_FLASH
  MPU_Setup();
8020373e:	f7ff fe97 	bl	80203470 <MPU_Setup>
80203742:	f64e 5114 	movw	r1, #60692	@ 0xed14
80203746:	f2ce 0100 	movt	r1, #57344	@ 0xe000
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:224
  // We do not use the CMSIS functions, as these manually invalidate the
  // cache - this is not required on the M55, as it is auto-invalidated
  // (and we implicitly rely on this already before activating, if booting
  // from MRAM).
  // Enable Loop and branch info cache
  SCB->CCR |= SCB_CCR_IC_Msk | SCB_CCR_DC_Msk | SCB_CCR_LOB_Msk;
8020374a:	6808      	ldr	r0, [r1, #0]
8020374c:	f440 2030 	orr.w	r0, r0, #720896	@ 0xb0000
80203750:	6008      	str	r0, [r1, #0]
80203752:	f24e 0108 	movw	r1, #57352	@ 0xe008
80203756:	f2ce 0100 	movt	r1, #57344	@ 0xe000
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:227

  // Enable limited static branch prediction using low overhead loops
  ICB->ACTLR &= ~ICB_ACTLR_DISLOBR_Msk;
8020375a:	6808      	ldr	r0, [r1, #0]
8020375c:	f020 0020 	bic.w	r0, r0, #32
80203760:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:229

  __DSB();
80203762:	f3bf 8f4f 	dsb	sy
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:230
  __ISB();
80203766:	f3bf 8f6f 	isb	sy
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:236

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  TZ_SAU_Setup();
  TGU_Setup();
#else
  setup_tcm_ns_partition();
8020376a:	f000 fdeb 	bl	80204344 <setup_tcm_ns_partition>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:239
#endif

  SystemCoreClock = SYSTEM_CLOCK;
8020376e:	f240 31e4 	movw	r1, #996	@ 0x3e4
80203772:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80203776:	f248 4000 	movw	r0, #33792	@ 0x8400
8020377a:	f2c1 70d7 	movt	r0, #6103	@ 0x17d7
8020377e:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:248
   * Note: This will be removed in the future release
   */
#define FORCE_ENABLE_SYSTEM_CLOCKS 1
#if FORCE_ENABLE_SYSTEM_CLOCKS
  /* Bypass clock gating */
  enable_force_peripheral_functional_clk();
80203780:	f000 fc1a 	bl	80203fb8 <enable_force_peripheral_functional_clk>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:251

  /* Bypass clock gating */
  enable_force_apb_interface_clk();
80203784:	f000 fc0e 	bl	80203fa4 <enable_force_apb_interface_clk>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:253
#endif
}
80203788:	bd80      	pop	{r7, pc}
	...

8020378c <System_HandleSpuriousWakeup>:
System_HandleSpuriousWakeup():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:131
}
8020378c:	4770      	bx	lr
	...

80203790 <TGU_Setup>:
TGU_Setup():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:38
  and ending at NS_REGION_1_END as Non Secure in the TGU look up tables. The
  region should be in the DTCM area. Can be extended to include the ITCM region
  and multiple discontigous regions if needed.
 *----------------------------------------------------------------------------*/
void TGU_Setup(void)
{
80203790:	b08d      	sub	sp, #52	@ 0x34
80203792:	f24e 5004 	movw	r0, #58628	@ 0xe504
80203796:	f2ce 0001 	movt	r0, #57345	@ 0xe001
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:45
    uint32_t start_offset, end_offset, lut_val_l, lut_val_h;
    uint32_t base, itcm_blksize, dtcm_blksize, blksize;
    uint32_t i;

    /* Find out the TGU block size for ITCM */
    blksize = *((volatile unsigned int *) ITGU_CFG) & ITGU_CFG_BLKSZ;
8020379a:	6800      	ldr	r0, [r0, #0]
8020379c:	f000 000f 	and.w	r0, r0, #15
802037a0:	9001      	str	r0, [sp, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:47
    /* ITCM blksize is 2^(blksize + 5)*/
    itcm_blksize = 1 << (blksize + 5);
802037a2:	9801      	ldr	r0, [sp, #4]
802037a4:	1d41      	adds	r1, r0, #5
802037a6:	2001      	movs	r0, #1
802037a8:	fa00 f101 	lsl.w	r1, r0, r1
802037ac:	9103      	str	r1, [sp, #12]
802037ae:	f24e 6104 	movw	r1, #58884	@ 0xe604
802037b2:	f2ce 0101 	movt	r1, #57345	@ 0xe001
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:50

    /* Find out the TGU block size for DTCM */
    blksize = *((volatile unsigned int *) DTGU_CFG) & DTGU_CFG_BLKSZ;
802037b6:	6809      	ldr	r1, [r1, #0]
802037b8:	f001 010f 	and.w	r1, r1, #15
802037bc:	9101      	str	r1, [sp, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:52
    /* DTCM block size is 2^(blksize + 5) */
    dtcm_blksize = 1 << (blksize + 5);
802037be:	9901      	ldr	r1, [sp, #4]
802037c0:	3105      	adds	r1, #5
802037c2:	4088      	lsls	r0, r1
802037c4:	9002      	str	r0, [sp, #8]
802037c6:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:54

    for (i = 0; i < (sizeof(ns_regions) / sizeof(ns_regions[0])); i++) {
802037c8:	9000      	str	r0, [sp, #0]
802037ca:	e7ff      	b.n	802037cc <TGU_Setup+0x3c>
802037cc:	9800      	ldr	r0, [sp, #0]
802037ce:	2800      	cmp	r0, #0
802037d0:	f040 80a4 	bne.w	8020391c <TGU_Setup+0x18c>
802037d4:	e7ff      	b.n	802037d6 <TGU_Setup+0x46>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:55
        if (ns_regions[i].type == DTCM) {
802037d6:	9800      	ldr	r0, [sp, #0]
802037d8:	eb00 0140 	add.w	r1, r0, r0, lsl #1
802037dc:	f645 7050 	movw	r0, #24400	@ 0x5f50
802037e0:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802037e4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
802037e8:	6880      	ldr	r0, [r0, #8]
802037ea:	2801      	cmp	r0, #1
802037ec:	d121      	bne.n	80203832 <TGU_Setup+0xa2>
802037ee:	e7ff      	b.n	802037f0 <TGU_Setup+0x60>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:56
            start_block =  (ns_regions[i].start - DTCM_BASE) / dtcm_blksize;
802037f0:	9800      	ldr	r0, [sp, #0]
802037f2:	eb00 0140 	add.w	r1, r0, r0, lsl #1
802037f6:	f645 7050 	movw	r0, #24400	@ 0x5f50
802037fa:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802037fe:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
80203802:	f101 4160 	add.w	r1, r1, #3758096384	@ 0xe0000000
80203806:	9a02      	ldr	r2, [sp, #8]
80203808:	fbb1 f1f2 	udiv	r1, r1, r2
8020380c:	910c      	str	r1, [sp, #48]	@ 0x30
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:57
            end_block = (ns_regions[i].end - DTCM_BASE) / dtcm_blksize;
8020380e:	9900      	ldr	r1, [sp, #0]
80203810:	eb01 0141 	add.w	r1, r1, r1, lsl #1
80203814:	eb00 0081 	add.w	r0, r0, r1, lsl #2
80203818:	6840      	ldr	r0, [r0, #4]
8020381a:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
8020381e:	9902      	ldr	r1, [sp, #8]
80203820:	fbb0 f0f1 	udiv	r0, r0, r1
80203824:	900b      	str	r0, [sp, #44]	@ 0x2c
80203826:	f24e 6000 	movw	r0, #58880	@ 0xe600
8020382a:	f2ce 0001 	movt	r0, #57345	@ 0xe001
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:58
            base = DTGU_BASE;
8020382e:	9004      	str	r0, [sp, #16]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:59
        } else {
80203830:	e01c      	b.n	8020386c <TGU_Setup+0xdc>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:60
            start_block =  (ns_regions[i].start - ITCM_BASE) / itcm_blksize;
80203832:	9800      	ldr	r0, [sp, #0]
80203834:	eb00 0140 	add.w	r1, r0, r0, lsl #1
80203838:	f645 7050 	movw	r0, #24400	@ 0x5f50
8020383c:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80203840:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
80203844:	9a03      	ldr	r2, [sp, #12]
80203846:	fbb1 f1f2 	udiv	r1, r1, r2
8020384a:	910c      	str	r1, [sp, #48]	@ 0x30
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:61
            end_block = (ns_regions[i].end - ITCM_BASE) / itcm_blksize;
8020384c:	9900      	ldr	r1, [sp, #0]
8020384e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
80203852:	eb00 0081 	add.w	r0, r0, r1, lsl #2
80203856:	6840      	ldr	r0, [r0, #4]
80203858:	9903      	ldr	r1, [sp, #12]
8020385a:	fbb0 f0f1 	udiv	r0, r0, r1
8020385e:	900b      	str	r0, [sp, #44]	@ 0x2c
80203860:	f24e 5000 	movw	r0, #58624	@ 0xe500
80203864:	f2ce 0001 	movt	r0, #57345	@ 0xe001
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:62
            base = ITGU_BASE;
80203868:	9004      	str	r0, [sp, #16]
8020386a:	e7ff      	b.n	8020386c <TGU_Setup+0xdc>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:65
        }

        start_lut = start_block / 32;
8020386c:	980c      	ldr	r0, [sp, #48]	@ 0x30
8020386e:	0940      	lsrs	r0, r0, #5
80203870:	900a      	str	r0, [sp, #40]	@ 0x28
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:66
        end_lut = end_block / 32;
80203872:	980b      	ldr	r0, [sp, #44]	@ 0x2c
80203874:	0940      	lsrs	r0, r0, #5
80203876:	9009      	str	r0, [sp, #36]	@ 0x24
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:68

        start_offset = start_block % 32;
80203878:	980c      	ldr	r0, [sp, #48]	@ 0x30
8020387a:	f000 001f 	and.w	r0, r0, #31
8020387e:	9008      	str	r0, [sp, #32]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:69
        end_offset = end_block % 32;
80203880:	980b      	ldr	r0, [sp, #44]	@ 0x2c
80203882:	f000 001f 	and.w	r0, r0, #31
80203886:	9007      	str	r0, [sp, #28]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:71

        if (start_lut == end_lut) {
80203888:	980a      	ldr	r0, [sp, #40]	@ 0x28
8020388a:	9909      	ldr	r1, [sp, #36]	@ 0x24
8020388c:	4288      	cmp	r0, r1
8020388e:	d114      	bne.n	802038ba <TGU_Setup+0x12a>
80203890:	e7ff      	b.n	80203892 <TGU_Setup+0x102>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:73
            /* same LUT register */
            lut_val_l = SET_BIT_RANGE(start_offset, end_offset);
80203892:	9807      	ldr	r0, [sp, #28]
80203894:	f1c0 001f 	rsb	r0, r0, #31
80203898:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
8020389c:	fa21 f000 	lsr.w	r0, r1, r0
802038a0:	9a08      	ldr	r2, [sp, #32]
802038a2:	4091      	lsls	r1, r2
802038a4:	4008      	ands	r0, r1
802038a6:	9006      	str	r0, [sp, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:74
            *((volatile uint32_t *) TGU_LUT(base, start_lut)) |= lut_val_l;
802038a8:	9a06      	ldr	r2, [sp, #24]
802038aa:	9804      	ldr	r0, [sp, #16]
802038ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
802038ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
802038b2:	6908      	ldr	r0, [r1, #16]
802038b4:	4310      	orrs	r0, r2
802038b6:	6108      	str	r0, [r1, #16]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:75
        } else {
802038b8:	e02b      	b.n	80203912 <TGU_Setup+0x182>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:77
            /* the range spans multiple LUT registers */
            lut_val_l = SET_BIT_RANGE(start_offset, 31);
802038ba:	9908      	ldr	r1, [sp, #32]
802038bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
802038c0:	fa00 f101 	lsl.w	r1, r0, r1
802038c4:	9106      	str	r1, [sp, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:78
            lut_val_h = SET_BIT_RANGE(0, end_offset);
802038c6:	9907      	ldr	r1, [sp, #28]
802038c8:	f1c1 011f 	rsb	r1, r1, #31
802038cc:	40c8      	lsrs	r0, r1
802038ce:	9005      	str	r0, [sp, #20]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:81

            /* Write into the first LUT register */
            *((volatile uint32_t *) TGU_LUT(base, start_lut)) = lut_val_l;
802038d0:	9806      	ldr	r0, [sp, #24]
802038d2:	9904      	ldr	r1, [sp, #16]
802038d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
802038d6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
802038da:	6108      	str	r0, [r1, #16]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:84

            /* Now write to all the intermediate LUT registers */
            while (start_lut != (end_lut - 1)) {
802038dc:	e7ff      	b.n	802038de <TGU_Setup+0x14e>
802038de:	980a      	ldr	r0, [sp, #40]	@ 0x28
802038e0:	9909      	ldr	r1, [sp, #36]	@ 0x24
802038e2:	3901      	subs	r1, #1
802038e4:	4288      	cmp	r0, r1
802038e6:	d00b      	beq.n	80203900 <TGU_Setup+0x170>
802038e8:	e7ff      	b.n	802038ea <TGU_Setup+0x15a>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:85
                start_lut++;
802038ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
802038ec:	3001      	adds	r0, #1
802038ee:	900a      	str	r0, [sp, #40]	@ 0x28
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:86
                *((volatile uint32_t *) TGU_LUT(base, start_lut)) = 0xFFFFFFFFU;
802038f0:	9804      	ldr	r0, [sp, #16]
802038f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
802038f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
802038f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
802038fc:	6108      	str	r0, [r1, #16]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:84
            while (start_lut != (end_lut - 1)) {
802038fe:	e7ee      	b.n	802038de <TGU_Setup+0x14e>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:90
            }

            /* Write into the last LUT register*/
            *((volatile uint32_t *) TGU_LUT(base, end_lut)) |= lut_val_h;
80203900:	9a05      	ldr	r2, [sp, #20]
80203902:	9804      	ldr	r0, [sp, #16]
80203904:	9909      	ldr	r1, [sp, #36]	@ 0x24
80203906:	eb00 0181 	add.w	r1, r0, r1, lsl #2
8020390a:	6908      	ldr	r0, [r1, #16]
8020390c:	4310      	orrs	r0, r2
8020390e:	6108      	str	r0, [r1, #16]
80203910:	e7ff      	b.n	80203912 <TGU_Setup+0x182>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:92
        }
    }
80203912:	e7ff      	b.n	80203914 <TGU_Setup+0x184>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:54
    for (i = 0; i < (sizeof(ns_regions) / sizeof(ns_regions[0])); i++) {
80203914:	9800      	ldr	r0, [sp, #0]
80203916:	3001      	adds	r0, #1
80203918:	9000      	str	r0, [sp, #0]
8020391a:	e757      	b.n	802037cc <TGU_Setup+0x3c>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:93
}
8020391c:	b00d      	add	sp, #52	@ 0x34
8020391e:	4770      	bx	lr

80203920 <UART0_IRQHandler>:
UART0_IRQHandler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1722
    .rs485_cfg        = {0},
#endif /* END of RS485_SUPPORT */
};

void UART0_IRQHandler (void)
{
80203920:	b580      	push	{r7, lr}
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1723
    UART_IRQHandler(&UART0);
80203922:	f240 30e8 	movw	r0, #1000	@ 0x3e8
80203926:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020392a:	f000 f839 	bl	802039a0 <UART_IRQHandler>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1724
}
8020392e:	bd80      	pop	{r7, pc}

80203930 <UART1_IRQHandler>:
UART1_IRQHandler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1890
    .rs485_cfg        = {0},
#endif /* END of RS485_SUPPORT */
};

void UART1_IRQHandler (void)
{
80203930:	b580      	push	{r7, lr}
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1891
    UART_IRQHandler(&UART1);
80203932:	f240 4034 	movw	r0, #1076	@ 0x434
80203936:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020393a:	f000 f831 	bl	802039a0 <UART_IRQHandler>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1892
}
8020393e:	bd80      	pop	{r7, pc}

80203940 <UART2_IRQHandler>:
UART2_IRQHandler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2059
    .rs485_cfg        = {0},
#endif /* END of RS485_SUPPORT */
};

void UART2_IRQHandler (void)
{
80203940:	b580      	push	{r7, lr}
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2060
    UART_IRQHandler(&UART2);
80203942:	f240 4080 	movw	r0, #1152	@ 0x480
80203946:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020394a:	f000 f829 	bl	802039a0 <UART_IRQHandler>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2061
}
8020394e:	bd80      	pop	{r7, pc}

80203950 <UART3_IRQHandler>:
UART3_IRQHandler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2227
    .rs485_cfg        = {0},
#endif /* END of RS485_SUPPORT */
};

void UART3_IRQHandler (void)
{
80203950:	b580      	push	{r7, lr}
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2228
    UART_IRQHandler(&UART3);
80203952:	f240 40cc 	movw	r0, #1228	@ 0x4cc
80203956:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020395a:	f000 f821 	bl	802039a0 <UART_IRQHandler>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2229
}
8020395e:	bd80      	pop	{r7, pc}

80203960 <UART4_IRQHandler>:
UART4_IRQHandler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2406

#endif /* END of RS485_SUPPORT */
};

void UART4_IRQHandler (void)
{
80203960:	b580      	push	{r7, lr}
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2407
    UART_IRQHandler(&UART4);
80203962:	f240 5018 	movw	r0, #1304	@ 0x518
80203966:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020396a:	f000 f819 	bl	802039a0 <UART_IRQHandler>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2408
}
8020396e:	bd80      	pop	{r7, pc}

80203970 <UART5_IRQHandler>:
UART5_IRQHandler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2585

#endif /* END of RS485_SUPPORT */
};

void UART5_IRQHandler (void)
{
80203970:	b580      	push	{r7, lr}
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2586
    UART_IRQHandler(&UART5);
80203972:	f240 5064 	movw	r0, #1380	@ 0x564
80203976:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020397a:	f000 f811 	bl	802039a0 <UART_IRQHandler>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2587
}
8020397e:	bd80      	pop	{r7, pc}

80203980 <UART6_IRQHandler>:
UART6_IRQHandler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2764

#endif /* END of RS485_SUPPORT */
};

void UART6_IRQHandler (void)
{
80203980:	b580      	push	{r7, lr}
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2765
    UART_IRQHandler(&UART6);
80203982:	f240 50b0 	movw	r0, #1456	@ 0x5b0
80203986:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020398a:	f000 f809 	bl	802039a0 <UART_IRQHandler>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2766
}
8020398e:	bd80      	pop	{r7, pc}

80203990 <UART7_IRQHandler>:
UART7_IRQHandler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2943

#endif /* END of RS485_SUPPORT */
};

void UART7_IRQHandler (void)
{
80203990:	b580      	push	{r7, lr}
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2944
    UART_IRQHandler(&UART7);
80203992:	f240 50fc 	movw	r0, #1532	@ 0x5fc
80203996:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020399a:	f000 f801 	bl	802039a0 <UART_IRQHandler>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2945
}
8020399e:	bd80      	pop	{r7, pc}

802039a0 <UART_IRQHandler>:
UART_IRQHandler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1454
{
802039a0:	b580      	push	{r7, lr}
802039a2:	b084      	sub	sp, #16
802039a4:	9003      	str	r0, [sp, #12]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1455
    UART_TRANSFER *transfer = &(uart->transfer);
802039a6:	9803      	ldr	r0, [sp, #12]
802039a8:	3008      	adds	r0, #8
802039aa:	9002      	str	r0, [sp, #8]
802039ac:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1456
    uint32_t cb_event = 0U;
802039ae:	9001      	str	r0, [sp, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1458
    uart_irq_handler(uart->regs, transfer);
802039b0:	9803      	ldr	r0, [sp, #12]
802039b2:	6800      	ldr	r0, [r0, #0]
802039b4:	9902      	ldr	r1, [sp, #8]
802039b6:	f001 f903 	bl	80204bc0 <uart_irq_handler>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1461
    if(transfer->status & UART_TRANSFER_STATUS_ERROR)
802039ba:	9802      	ldr	r0, [sp, #8]
802039bc:	6980      	ldr	r0, [r0, #24]
802039be:	0700      	lsls	r0, r0, #28
802039c0:	2800      	cmp	r0, #0
802039c2:	d54d      	bpl.n	80203a60 <UART_IRQHandler+0xc0>
802039c4:	e7ff      	b.n	802039c6 <UART_IRQHandler+0x26>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1468
        if(transfer->status & UART_TRANSFER_STATUS_ERROR_RX_BREAK)
802039c6:	9802      	ldr	r0, [sp, #8]
802039c8:	6980      	ldr	r0, [r0, #24]
802039ca:	0600      	lsls	r0, r0, #24
802039cc:	2800      	cmp	r0, #0
802039ce:	d50a      	bpl.n	802039e6 <UART_IRQHandler+0x46>
802039d0:	e7ff      	b.n	802039d2 <UART_IRQHandler+0x32>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1470
            uart->status.rx_break = 1;
802039d2:	9903      	ldr	r1, [sp, #12]
802039d4:	6a48      	ldr	r0, [r1, #36]	@ 0x24
802039d6:	f040 0010 	orr.w	r0, r0, #16
802039da:	6248      	str	r0, [r1, #36]	@ 0x24
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1471
            cb_event |= ARM_USART_EVENT_RX_BREAK;
802039dc:	9801      	ldr	r0, [sp, #4]
802039de:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
802039e2:	9001      	str	r0, [sp, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1472
        }
802039e4:	e7ff      	b.n	802039e6 <UART_IRQHandler+0x46>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1474
        if(transfer->status & UART_TRANSFER_STATUS_ERROR_RX_FRAMING)
802039e6:	9802      	ldr	r0, [sp, #8]
802039e8:	6980      	ldr	r0, [r0, #24]
802039ea:	0640      	lsls	r0, r0, #25
802039ec:	2800      	cmp	r0, #0
802039ee:	d50a      	bpl.n	80203a06 <UART_IRQHandler+0x66>
802039f0:	e7ff      	b.n	802039f2 <UART_IRQHandler+0x52>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1476
            uart->status.rx_framing_error = 1;
802039f2:	9903      	ldr	r1, [sp, #12]
802039f4:	6a48      	ldr	r0, [r1, #36]	@ 0x24
802039f6:	f040 0020 	orr.w	r0, r0, #32
802039fa:	6248      	str	r0, [r1, #36]	@ 0x24
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1477
            cb_event |= ARM_USART_EVENT_RX_FRAMING_ERROR;
802039fc:	9801      	ldr	r0, [sp, #4]
802039fe:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
80203a02:	9001      	str	r0, [sp, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1478
        }
80203a04:	e7ff      	b.n	80203a06 <UART_IRQHandler+0x66>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1480
        if(transfer->status & UART_TRANSFER_STATUS_ERROR_RX_PARITY)
80203a06:	9802      	ldr	r0, [sp, #8]
80203a08:	6980      	ldr	r0, [r0, #24]
80203a0a:	0680      	lsls	r0, r0, #26
80203a0c:	2800      	cmp	r0, #0
80203a0e:	d50a      	bpl.n	80203a26 <UART_IRQHandler+0x86>
80203a10:	e7ff      	b.n	80203a12 <UART_IRQHandler+0x72>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1482
            uart->status.rx_parity_error = 1;
80203a12:	9903      	ldr	r1, [sp, #12]
80203a14:	6a48      	ldr	r0, [r1, #36]	@ 0x24
80203a16:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
80203a1a:	6248      	str	r0, [r1, #36]	@ 0x24
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1483
            cb_event |= ARM_USART_EVENT_RX_PARITY_ERROR;
80203a1c:	9801      	ldr	r0, [sp, #4]
80203a1e:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
80203a22:	9001      	str	r0, [sp, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1484
        }
80203a24:	e7ff      	b.n	80203a26 <UART_IRQHandler+0x86>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1486
        if(transfer->status & UART_TRANSFER_STATUS_ERROR_RX_OVERRUN)
80203a26:	9802      	ldr	r0, [sp, #8]
80203a28:	6980      	ldr	r0, [r0, #24]
80203a2a:	06c0      	lsls	r0, r0, #27
80203a2c:	2800      	cmp	r0, #0
80203a2e:	d50a      	bpl.n	80203a46 <UART_IRQHandler+0xa6>
80203a30:	e7ff      	b.n	80203a32 <UART_IRQHandler+0x92>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1488
            uart->status.rx_overflow = 1;
80203a32:	9903      	ldr	r1, [sp, #12]
80203a34:	6a48      	ldr	r0, [r1, #36]	@ 0x24
80203a36:	f040 0008 	orr.w	r0, r0, #8
80203a3a:	6248      	str	r0, [r1, #36]	@ 0x24
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1489
            cb_event |= ARM_USART_EVENT_RX_OVERFLOW;
80203a3c:	9801      	ldr	r0, [sp, #4]
80203a3e:	f040 0020 	orr.w	r0, r0, #32
80203a42:	9001      	str	r0, [sp, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1490
        }
80203a44:	e7ff      	b.n	80203a46 <UART_IRQHandler+0xa6>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1493
        transfer->status = UART_TRANSFER_STATUS_NONE;
80203a46:	9902      	ldr	r1, [sp, #8]
80203a48:	2000      	movs	r0, #0
80203a4a:	6188      	str	r0, [r1, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1501
        if(uart->cb_event)
80203a4c:	9803      	ldr	r0, [sp, #12]
80203a4e:	6840      	ldr	r0, [r0, #4]
80203a50:	b128      	cbz	r0, 80203a5e <UART_IRQHandler+0xbe>
80203a52:	e7ff      	b.n	80203a54 <UART_IRQHandler+0xb4>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1502
            uart->cb_event(cb_event);
80203a54:	9803      	ldr	r0, [sp, #12]
80203a56:	6841      	ldr	r1, [r0, #4]
80203a58:	9801      	ldr	r0, [sp, #4]
80203a5a:	4788      	blx	r1
80203a5c:	e7ff      	b.n	80203a5e <UART_IRQHandler+0xbe>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1503
    }
80203a5e:	e7ff      	b.n	80203a60 <UART_IRQHandler+0xc0>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1506
    if(transfer->status & UART_TRANSFER_STATUS_SEND_COMPLETE)
80203a60:	9802      	ldr	r0, [sp, #8]
80203a62:	6980      	ldr	r0, [r0, #24]
80203a64:	07c0      	lsls	r0, r0, #31
80203a66:	b190      	cbz	r0, 80203a8e <UART_IRQHandler+0xee>
80203a68:	e7ff      	b.n	80203a6a <UART_IRQHandler+0xca>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1509
        transfer->status = UART_TRANSFER_STATUS_NONE;
80203a6a:	9902      	ldr	r1, [sp, #8]
80203a6c:	2000      	movs	r0, #0
80203a6e:	6188      	str	r0, [r1, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1512
        uart->status.tx_busy = UART_STATUS_FREE;
80203a70:	9903      	ldr	r1, [sp, #12]
80203a72:	6a48      	ldr	r0, [r1, #36]	@ 0x24
80203a74:	f020 0001 	bic.w	r0, r0, #1
80203a78:	6248      	str	r0, [r1, #36]	@ 0x24
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1515
        if(uart->cb_event)
80203a7a:	9803      	ldr	r0, [sp, #12]
80203a7c:	6840      	ldr	r0, [r0, #4]
80203a7e:	b128      	cbz	r0, 80203a8c <UART_IRQHandler+0xec>
80203a80:	e7ff      	b.n	80203a82 <UART_IRQHandler+0xe2>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1516
            uart->cb_event(ARM_USART_EVENT_SEND_COMPLETE);
80203a82:	9803      	ldr	r0, [sp, #12]
80203a84:	6841      	ldr	r1, [r0, #4]
80203a86:	2001      	movs	r0, #1
80203a88:	4788      	blx	r1
80203a8a:	e7ff      	b.n	80203a8c <UART_IRQHandler+0xec>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1517
    }
80203a8c:	e7ff      	b.n	80203a8e <UART_IRQHandler+0xee>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1520
    if(transfer->status & UART_TRANSFER_STATUS_RECEIVE_COMPLETE)
80203a8e:	9802      	ldr	r0, [sp, #8]
80203a90:	6980      	ldr	r0, [r0, #24]
80203a92:	0780      	lsls	r0, r0, #30
80203a94:	2800      	cmp	r0, #0
80203a96:	d512      	bpl.n	80203abe <UART_IRQHandler+0x11e>
80203a98:	e7ff      	b.n	80203a9a <UART_IRQHandler+0xfa>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1523
        transfer->status = UART_TRANSFER_STATUS_NONE;
80203a9a:	9902      	ldr	r1, [sp, #8]
80203a9c:	2000      	movs	r0, #0
80203a9e:	6188      	str	r0, [r1, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1526
        uart->status.rx_busy = UART_STATUS_FREE;
80203aa0:	9903      	ldr	r1, [sp, #12]
80203aa2:	6a48      	ldr	r0, [r1, #36]	@ 0x24
80203aa4:	f020 0002 	bic.w	r0, r0, #2
80203aa8:	6248      	str	r0, [r1, #36]	@ 0x24
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1529
        if(uart->cb_event)
80203aaa:	9803      	ldr	r0, [sp, #12]
80203aac:	6840      	ldr	r0, [r0, #4]
80203aae:	b128      	cbz	r0, 80203abc <UART_IRQHandler+0x11c>
80203ab0:	e7ff      	b.n	80203ab2 <UART_IRQHandler+0x112>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1530
            uart->cb_event(ARM_USART_EVENT_RECEIVE_COMPLETE);
80203ab2:	9803      	ldr	r0, [sp, #12]
80203ab4:	6841      	ldr	r1, [r0, #4]
80203ab6:	2002      	movs	r0, #2
80203ab8:	4788      	blx	r1
80203aba:	e7ff      	b.n	80203abc <UART_IRQHandler+0x11c>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1531
    }
80203abc:	e7ff      	b.n	80203abe <UART_IRQHandler+0x11e>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1534
    if(transfer->status & UART_TRANSFER_STATUS_RX_TIMEOUT)
80203abe:	9802      	ldr	r0, [sp, #8]
80203ac0:	6980      	ldr	r0, [r0, #24]
80203ac2:	0740      	lsls	r0, r0, #29
80203ac4:	2800      	cmp	r0, #0
80203ac6:	d50d      	bpl.n	80203ae4 <UART_IRQHandler+0x144>
80203ac8:	e7ff      	b.n	80203aca <UART_IRQHandler+0x12a>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1537
        transfer->status = UART_TRANSFER_STATUS_NONE;
80203aca:	9902      	ldr	r1, [sp, #8]
80203acc:	2000      	movs	r0, #0
80203ace:	6188      	str	r0, [r1, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1545
        if(uart->cb_event)
80203ad0:	9803      	ldr	r0, [sp, #12]
80203ad2:	6840      	ldr	r0, [r0, #4]
80203ad4:	b128      	cbz	r0, 80203ae2 <UART_IRQHandler+0x142>
80203ad6:	e7ff      	b.n	80203ad8 <UART_IRQHandler+0x138>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1546
            uart->cb_event(ARM_USART_EVENT_RX_TIMEOUT);
80203ad8:	9803      	ldr	r0, [sp, #12]
80203ada:	6841      	ldr	r1, [r0, #4]
80203adc:	2040      	movs	r0, #64	@ 0x40
80203ade:	4788      	blx	r1
80203ae0:	e7ff      	b.n	80203ae2 <UART_IRQHandler+0x142>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1547
    }
80203ae2:	e7ff      	b.n	80203ae4 <UART_IRQHandler+0x144>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1548
}
80203ae4:	b004      	add	sp, #16
80203ae6:	bd80      	pop	{r7, pc}

80203ae8 <UsageFault_Handler>:
UsageFault_Handler():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:338
    __asm("MOVS R0, #3\n\t"
80203ae8:	2003      	movs	r0, #3
80203aea:	f000 bf6d 	b.w	802049c8 <CommonAsmFaultHandler>
	...

80203af0 <_DoInit>:
_DoInit():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:309
static void _DoInit(void) {
80203af0:	b580      	push	{r7, lr}
80203af2:	b082      	sub	sp, #8
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:316
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
80203af4:	f240 70a4 	movw	r0, #1956	@ 0x7a4
80203af8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203afc:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:317
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
80203afe:	9801      	ldr	r0, [sp, #4]
80203b00:	21a8      	movs	r1, #168	@ 0xa8
80203b02:	f7fc ffc2 	bl	80200a8a <__aeabi_memclr4>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:318
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
80203b06:	9901      	ldr	r1, [sp, #4]
80203b08:	2003      	movs	r0, #3
80203b0a:	6108      	str	r0, [r1, #16]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:319
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
80203b0c:	9901      	ldr	r1, [sp, #4]
80203b0e:	6148      	str	r0, [r1, #20]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:323
  p->aUp[0].sName         = "Terminal";
80203b10:	9801      	ldr	r0, [sp, #4]
80203b12:	f645 51b1 	movw	r1, #23985	@ 0x5db1
80203b16:	f2c8 0120 	movt	r1, #32800	@ 0x8020
80203b1a:	6181      	str	r1, [r0, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:324
  p->aUp[0].pBuffer       = _acUpBuffer;
80203b1c:	9a01      	ldr	r2, [sp, #4]
80203b1e:	f640 005c 	movw	r0, #2140	@ 0x85c
80203b22:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203b26:	61d0      	str	r0, [r2, #28]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:325
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
80203b28:	9a01      	ldr	r2, [sp, #4]
80203b2a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
80203b2e:	6210      	str	r0, [r2, #32]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:326
  p->aUp[0].RdOff         = 0u;
80203b30:	9a01      	ldr	r2, [sp, #4]
80203b32:	2000      	movs	r0, #0
80203b34:	6290      	str	r0, [r2, #40]	@ 0x28
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:327
  p->aUp[0].WrOff         = 0u;
80203b36:	9a01      	ldr	r2, [sp, #4]
80203b38:	6250      	str	r0, [r2, #36]	@ 0x24
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:328
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
80203b3a:	9a01      	ldr	r2, [sp, #4]
80203b3c:	62d0      	str	r0, [r2, #44]	@ 0x2c
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:332
  p->aDown[0].sName         = "Terminal";
80203b3e:	9a01      	ldr	r2, [sp, #4]
80203b40:	6611      	str	r1, [r2, #96]	@ 0x60
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:333
  p->aDown[0].pBuffer       = _acDownBuffer;
80203b42:	9a01      	ldr	r2, [sp, #4]
80203b44:	f640 014c 	movw	r1, #2124	@ 0x84c
80203b48:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80203b4c:	6651      	str	r1, [r2, #100]	@ 0x64
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:334
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
80203b4e:	9a01      	ldr	r2, [sp, #4]
80203b50:	2110      	movs	r1, #16
80203b52:	6691      	str	r1, [r2, #104]	@ 0x68
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:335
  p->aDown[0].RdOff         = 0u;
80203b54:	9901      	ldr	r1, [sp, #4]
80203b56:	6708      	str	r0, [r1, #112]	@ 0x70
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:336
  p->aDown[0].WrOff         = 0u;
80203b58:	9901      	ldr	r1, [sp, #4]
80203b5a:	66c8      	str	r0, [r1, #108]	@ 0x6c
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:337
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
80203b5c:	9901      	ldr	r1, [sp, #4]
80203b5e:	6748      	str	r0, [r1, #116]	@ 0x74
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:343
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
80203b60:	f3bf 8f5f 	dmb	sy
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:344
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
80203b64:	9000      	str	r0, [sp, #0]
80203b66:	e7ff      	b.n	80203b68 <_DoInit+0x78>
80203b68:	9800      	ldr	r0, [sp, #0]
80203b6a:	280f      	cmp	r0, #15
80203b6c:	d80e      	bhi.n	80203b8c <_DoInit+0x9c>
80203b6e:	e7ff      	b.n	80203b70 <_DoInit+0x80>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:345
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
80203b70:	9a00      	ldr	r2, [sp, #0]
80203b72:	f245 70a0 	movw	r0, #22432	@ 0x57a0
80203b76:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80203b7a:	1a80      	subs	r0, r0, r2
80203b7c:	7bc0      	ldrb	r0, [r0, #15]
80203b7e:	9901      	ldr	r1, [sp, #4]
80203b80:	5488      	strb	r0, [r1, r2]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:346
  }
80203b82:	e7ff      	b.n	80203b84 <_DoInit+0x94>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:344
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
80203b84:	9800      	ldr	r0, [sp, #0]
80203b86:	3001      	adds	r0, #1
80203b88:	9000      	str	r0, [sp, #0]
80203b8a:	e7ed      	b.n	80203b68 <_DoInit+0x78>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:347
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
80203b8c:	f3bf 8f5f 	dmb	sy
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:348
}
80203b90:	b002      	add	sp, #8
80203b92:	bd80      	pop	{r7, pc}

80203b94 <_GetAvailWriteSpace>:
_GetAvailWriteSpace():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:521
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
80203b94:	b084      	sub	sp, #16
80203b96:	9003      	str	r0, [sp, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:529
  RdOff = pRing->RdOff;
80203b98:	9803      	ldr	r0, [sp, #12]
80203b9a:	6900      	ldr	r0, [r0, #16]
80203b9c:	9002      	str	r0, [sp, #8]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:530
  WrOff = pRing->WrOff;
80203b9e:	9803      	ldr	r0, [sp, #12]
80203ba0:	68c0      	ldr	r0, [r0, #12]
80203ba2:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:531
  if (RdOff <= WrOff) {
80203ba4:	9802      	ldr	r0, [sp, #8]
80203ba6:	9901      	ldr	r1, [sp, #4]
80203ba8:	4288      	cmp	r0, r1
80203baa:	d809      	bhi.n	80203bc0 <_GetAvailWriteSpace+0x2c>
80203bac:	e7ff      	b.n	80203bae <_GetAvailWriteSpace+0x1a>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:532
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
80203bae:	9803      	ldr	r0, [sp, #12]
80203bb0:	6881      	ldr	r1, [r0, #8]
80203bb2:	9801      	ldr	r0, [sp, #4]
80203bb4:	43c0      	mvns	r0, r0
80203bb6:	4408      	add	r0, r1
80203bb8:	9902      	ldr	r1, [sp, #8]
80203bba:	4408      	add	r0, r1
80203bbc:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:533
  } else {
80203bbe:	e005      	b.n	80203bcc <_GetAvailWriteSpace+0x38>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:534
    r = RdOff - WrOff - 1u;
80203bc0:	9902      	ldr	r1, [sp, #8]
80203bc2:	9801      	ldr	r0, [sp, #4]
80203bc4:	43c0      	mvns	r0, r0
80203bc6:	4408      	add	r0, r1
80203bc8:	9000      	str	r0, [sp, #0]
80203bca:	e7ff      	b.n	80203bcc <_GetAvailWriteSpace+0x38>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:536
  return r;
80203bcc:	9800      	ldr	r0, [sp, #0]
80203bce:	b004      	add	sp, #16
80203bd0:	4770      	bx	lr
	...

80203bd4 <_WriteBlocking>:
_WriteBlocking():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:369
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
80203bd4:	b580      	push	{r7, lr}
80203bd6:	b08a      	sub	sp, #40	@ 0x28
80203bd8:	9009      	str	r0, [sp, #36]	@ 0x24
80203bda:	9108      	str	r1, [sp, #32]
80203bdc:	9207      	str	r2, [sp, #28]
80203bde:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:378
  NumBytesWritten = 0u;
80203be0:	9005      	str	r0, [sp, #20]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:379
  WrOff = pRing->WrOff;
80203be2:	9809      	ldr	r0, [sp, #36]	@ 0x24
80203be4:	68c0      	ldr	r0, [r0, #12]
80203be6:	9003      	str	r0, [sp, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:380
  do {
80203be8:	e7ff      	b.n	80203bea <_WriteBlocking+0x16>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:381
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
80203bea:	9809      	ldr	r0, [sp, #36]	@ 0x24
80203bec:	6900      	ldr	r0, [r0, #16]
80203bee:	9004      	str	r0, [sp, #16]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:382
    if (RdOff > WrOff) {
80203bf0:	9804      	ldr	r0, [sp, #16]
80203bf2:	9903      	ldr	r1, [sp, #12]
80203bf4:	4288      	cmp	r0, r1
80203bf6:	d906      	bls.n	80203c06 <_WriteBlocking+0x32>
80203bf8:	e7ff      	b.n	80203bfa <_WriteBlocking+0x26>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:383
      NumBytesToWrite = RdOff - WrOff - 1u;
80203bfa:	9904      	ldr	r1, [sp, #16]
80203bfc:	9803      	ldr	r0, [sp, #12]
80203bfe:	43c0      	mvns	r0, r0
80203c00:	4408      	add	r0, r1
80203c02:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:384
    } else {
80203c04:	e008      	b.n	80203c18 <_WriteBlocking+0x44>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:385
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
80203c06:	9809      	ldr	r0, [sp, #36]	@ 0x24
80203c08:	6881      	ldr	r1, [r0, #8]
80203c0a:	9803      	ldr	r0, [sp, #12]
80203c0c:	9a04      	ldr	r2, [sp, #16]
80203c0e:	1a80      	subs	r0, r0, r2
80203c10:	43c0      	mvns	r0, r0
80203c12:	4408      	add	r0, r1
80203c14:	9006      	str	r0, [sp, #24]
80203c16:	e7ff      	b.n	80203c18 <_WriteBlocking+0x44>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:387
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
80203c18:	9806      	ldr	r0, [sp, #24]
80203c1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
80203c1c:	6889      	ldr	r1, [r1, #8]
80203c1e:	9a03      	ldr	r2, [sp, #12]
80203c20:	1a89      	subs	r1, r1, r2
80203c22:	4288      	cmp	r0, r1
80203c24:	d203      	bcs.n	80203c2e <_WriteBlocking+0x5a>
80203c26:	e7ff      	b.n	80203c28 <_WriteBlocking+0x54>
80203c28:	9806      	ldr	r0, [sp, #24]
80203c2a:	9001      	str	r0, [sp, #4]
80203c2c:	e005      	b.n	80203c3a <_WriteBlocking+0x66>
80203c2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
80203c30:	6880      	ldr	r0, [r0, #8]
80203c32:	9903      	ldr	r1, [sp, #12]
80203c34:	1a40      	subs	r0, r0, r1
80203c36:	9001      	str	r0, [sp, #4]
80203c38:	e7ff      	b.n	80203c3a <_WriteBlocking+0x66>
80203c3a:	9801      	ldr	r0, [sp, #4]
80203c3c:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:388
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
80203c3e:	9806      	ldr	r0, [sp, #24]
80203c40:	9907      	ldr	r1, [sp, #28]
80203c42:	4288      	cmp	r0, r1
80203c44:	d203      	bcs.n	80203c4e <_WriteBlocking+0x7a>
80203c46:	e7ff      	b.n	80203c48 <_WriteBlocking+0x74>
80203c48:	9806      	ldr	r0, [sp, #24]
80203c4a:	9000      	str	r0, [sp, #0]
80203c4c:	e002      	b.n	80203c54 <_WriteBlocking+0x80>
80203c4e:	9807      	ldr	r0, [sp, #28]
80203c50:	9000      	str	r0, [sp, #0]
80203c52:	e7ff      	b.n	80203c54 <_WriteBlocking+0x80>
80203c54:	9800      	ldr	r0, [sp, #0]
80203c56:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:389
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
80203c58:	9809      	ldr	r0, [sp, #36]	@ 0x24
80203c5a:	6840      	ldr	r0, [r0, #4]
80203c5c:	9903      	ldr	r1, [sp, #12]
80203c5e:	4408      	add	r0, r1
80203c60:	9002      	str	r0, [sp, #8]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:398
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
80203c62:	9802      	ldr	r0, [sp, #8]
80203c64:	9908      	ldr	r1, [sp, #32]
80203c66:	9a06      	ldr	r2, [sp, #24]
80203c68:	f7fc feca 	bl	80200a00 <__rt_memcpy>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:399
    NumBytesWritten += NumBytesToWrite;
80203c6c:	9906      	ldr	r1, [sp, #24]
80203c6e:	9805      	ldr	r0, [sp, #20]
80203c70:	4408      	add	r0, r1
80203c72:	9005      	str	r0, [sp, #20]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:400
    pBuffer         += NumBytesToWrite;
80203c74:	9906      	ldr	r1, [sp, #24]
80203c76:	9808      	ldr	r0, [sp, #32]
80203c78:	4408      	add	r0, r1
80203c7a:	9008      	str	r0, [sp, #32]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:401
    NumBytes        -= NumBytesToWrite;
80203c7c:	9906      	ldr	r1, [sp, #24]
80203c7e:	9807      	ldr	r0, [sp, #28]
80203c80:	1a40      	subs	r0, r0, r1
80203c82:	9007      	str	r0, [sp, #28]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:402
    WrOff           += NumBytesToWrite;
80203c84:	9906      	ldr	r1, [sp, #24]
80203c86:	9803      	ldr	r0, [sp, #12]
80203c88:	4408      	add	r0, r1
80203c8a:	9003      	str	r0, [sp, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:404
    if (WrOff == pRing->SizeOfBuffer) {
80203c8c:	9803      	ldr	r0, [sp, #12]
80203c8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
80203c90:	6889      	ldr	r1, [r1, #8]
80203c92:	4288      	cmp	r0, r1
80203c94:	d103      	bne.n	80203c9e <_WriteBlocking+0xca>
80203c96:	e7ff      	b.n	80203c98 <_WriteBlocking+0xc4>
80203c98:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:405
      WrOff = 0u;
80203c9a:	9003      	str	r0, [sp, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:406
    }
80203c9c:	e7ff      	b.n	80203c9e <_WriteBlocking+0xca>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:407
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
80203c9e:	f3bf 8f5f 	dmb	sy
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:408
    pRing->WrOff = WrOff;
80203ca2:	9803      	ldr	r0, [sp, #12]
80203ca4:	9909      	ldr	r1, [sp, #36]	@ 0x24
80203ca6:	60c8      	str	r0, [r1, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:409
  } while (NumBytes);
80203ca8:	e7ff      	b.n	80203caa <_WriteBlocking+0xd6>
80203caa:	9807      	ldr	r0, [sp, #28]
80203cac:	b108      	cbz	r0, 80203cb2 <_WriteBlocking+0xde>
80203cae:	f02f c065 	le	80203bea <_WriteBlocking+0x16>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:410
  return NumBytesWritten;
80203cb2:	9805      	ldr	r0, [sp, #20]
80203cb4:	b00a      	add	sp, #40	@ 0x28
80203cb6:	bd80      	pop	{r7, pc}

80203cb8 <_WriteNoCheck>:
_WriteNoCheck():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:431
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
80203cb8:	b580      	push	{r7, lr}
80203cba:	b088      	sub	sp, #32
80203cbc:	9007      	str	r0, [sp, #28]
80203cbe:	9106      	str	r1, [sp, #24]
80203cc0:	9205      	str	r2, [sp, #20]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:437
  WrOff = pRing->WrOff;
80203cc2:	9807      	ldr	r0, [sp, #28]
80203cc4:	68c0      	ldr	r0, [r0, #12]
80203cc6:	9003      	str	r0, [sp, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:438
  Rem = pRing->SizeOfBuffer - WrOff;
80203cc8:	9807      	ldr	r0, [sp, #28]
80203cca:	6880      	ldr	r0, [r0, #8]
80203ccc:	9903      	ldr	r1, [sp, #12]
80203cce:	1a40      	subs	r0, r0, r1
80203cd0:	9002      	str	r0, [sp, #8]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:439
  if (Rem > NumBytes) {
80203cd2:	9802      	ldr	r0, [sp, #8]
80203cd4:	9905      	ldr	r1, [sp, #20]
80203cd6:	4288      	cmp	r0, r1
80203cd8:	d912      	bls.n	80203d00 <_WriteNoCheck+0x48>
80203cda:	e7ff      	b.n	80203cdc <_WriteNoCheck+0x24>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:443
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
80203cdc:	9807      	ldr	r0, [sp, #28]
80203cde:	6840      	ldr	r0, [r0, #4]
80203ce0:	9903      	ldr	r1, [sp, #12]
80203ce2:	4408      	add	r0, r1
80203ce4:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:452
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
80203ce6:	9801      	ldr	r0, [sp, #4]
80203ce8:	9906      	ldr	r1, [sp, #24]
80203cea:	9a05      	ldr	r2, [sp, #20]
80203cec:	f7fc fe88 	bl	80200a00 <__rt_memcpy>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:453
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
80203cf0:	f3bf 8f5f 	dmb	sy
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:454
    pRing->WrOff = WrOff + NumBytes;
80203cf4:	9803      	ldr	r0, [sp, #12]
80203cf6:	9905      	ldr	r1, [sp, #20]
80203cf8:	4408      	add	r0, r1
80203cfa:	9907      	ldr	r1, [sp, #28]
80203cfc:	60c8      	str	r0, [r1, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:456
  } else {
80203cfe:	e01f      	b.n	80203d40 <_WriteNoCheck+0x88>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:474
    NumBytesAtOnce = Rem;
80203d00:	9802      	ldr	r0, [sp, #8]
80203d02:	9004      	str	r0, [sp, #16]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:475
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
80203d04:	9807      	ldr	r0, [sp, #28]
80203d06:	6840      	ldr	r0, [r0, #4]
80203d08:	9903      	ldr	r1, [sp, #12]
80203d0a:	4408      	add	r0, r1
80203d0c:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:476
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
80203d0e:	9801      	ldr	r0, [sp, #4]
80203d10:	9906      	ldr	r1, [sp, #24]
80203d12:	9a04      	ldr	r2, [sp, #16]
80203d14:	f7fc fe74 	bl	80200a00 <__rt_memcpy>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:477
    NumBytesAtOnce = NumBytes - Rem;
80203d18:	9805      	ldr	r0, [sp, #20]
80203d1a:	9902      	ldr	r1, [sp, #8]
80203d1c:	1a40      	subs	r0, r0, r1
80203d1e:	9004      	str	r0, [sp, #16]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:478
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
80203d20:	9807      	ldr	r0, [sp, #28]
80203d22:	6840      	ldr	r0, [r0, #4]
80203d24:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:479
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
80203d26:	9801      	ldr	r0, [sp, #4]
80203d28:	9906      	ldr	r1, [sp, #24]
80203d2a:	9a02      	ldr	r2, [sp, #8]
80203d2c:	4411      	add	r1, r2
80203d2e:	9a04      	ldr	r2, [sp, #16]
80203d30:	f7fc fe66 	bl	80200a00 <__rt_memcpy>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:480
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
80203d34:	f3bf 8f5f 	dmb	sy
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:481
    pRing->WrOff = NumBytesAtOnce;
80203d38:	9804      	ldr	r0, [sp, #16]
80203d3a:	9907      	ldr	r1, [sp, #28]
80203d3c:	60c8      	str	r0, [r1, #12]
80203d3e:	e7ff      	b.n	80203d40 <_WriteNoCheck+0x88>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/RTT/SEGGER_RTT.c:484
}
80203d40:	b008      	add	sp, #32
80203d42:	bd80      	pop	{r7, pc}

80203d44 <__NVIC_ClearPendingIRQ>:
__NVIC_ClearPendingIRQ():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3826
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
80203d44:	b081      	sub	sp, #4
80203d46:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3827
  if ((int32_t)(IRQn) >= 0)
80203d48:	9800      	ldr	r0, [sp, #0]
80203d4a:	2800      	cmp	r0, #0
80203d4c:	d40d      	bmi.n	80203d6a <__NVIC_ClearPendingIRQ+0x26>
80203d4e:	e7ff      	b.n	80203d50 <__NVIC_ClearPendingIRQ+0xc>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3829
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
80203d50:	9900      	ldr	r1, [sp, #0]
80203d52:	f001 021f 	and.w	r2, r1, #31
80203d56:	2001      	movs	r0, #1
80203d58:	4090      	lsls	r0, r2
80203d5a:	094a      	lsrs	r2, r1, #5
80203d5c:	f24e 2180 	movw	r1, #57984	@ 0xe280
80203d60:	f2ce 0100 	movt	r1, #57344	@ 0xe000
80203d64:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3830
  }
80203d68:	e7ff      	b.n	80203d6a <__NVIC_ClearPendingIRQ+0x26>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3831
}
80203d6a:	b001      	add	sp, #4
80203d6c:	4770      	bx	lr
	...

80203d70 <__NVIC_DisableIRQ>:
__NVIC_DisableIRQ():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3773
{
80203d70:	b081      	sub	sp, #4
80203d72:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3774
  if ((int32_t)(IRQn) >= 0)
80203d74:	9800      	ldr	r0, [sp, #0]
80203d76:	2800      	cmp	r0, #0
80203d78:	d411      	bmi.n	80203d9e <__NVIC_DisableIRQ+0x2e>
80203d7a:	e7ff      	b.n	80203d7c <__NVIC_DisableIRQ+0xc>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3776
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
80203d7c:	9900      	ldr	r1, [sp, #0]
80203d7e:	f001 021f 	and.w	r2, r1, #31
80203d82:	2001      	movs	r0, #1
80203d84:	4090      	lsls	r0, r2
80203d86:	094a      	lsrs	r2, r1, #5
80203d88:	f24e 1180 	movw	r1, #57728	@ 0xe180
80203d8c:	f2ce 0100 	movt	r1, #57344	@ 0xe000
80203d90:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3777
    __DSB();
80203d94:	f3bf 8f4f 	dsb	sy
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3778
    __ISB();
80203d98:	f3bf 8f6f 	isb	sy
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3779
  }
80203d9c:	e7ff      	b.n	80203d9e <__NVIC_DisableIRQ+0x2e>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3780
}
80203d9e:	b001      	add	sp, #4
80203da0:	4770      	bx	lr
	...

80203da4 <__NVIC_EnableIRQ>:
__NVIC_EnableIRQ():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3735
{
80203da4:	b081      	sub	sp, #4
80203da6:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3736
  if ((int32_t)(IRQn) >= 0)
80203da8:	9800      	ldr	r0, [sp, #0]
80203daa:	2800      	cmp	r0, #0
80203dac:	d40d      	bmi.n	80203dca <__NVIC_EnableIRQ+0x26>
80203dae:	e7ff      	b.n	80203db0 <__NVIC_EnableIRQ+0xc>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3739
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
80203db0:	9900      	ldr	r1, [sp, #0]
80203db2:	f001 021f 	and.w	r2, r1, #31
80203db6:	2001      	movs	r0, #1
80203db8:	4090      	lsls	r0, r2
80203dba:	094a      	lsrs	r2, r1, #5
80203dbc:	f24e 1100 	movw	r1, #57600	@ 0xe100
80203dc0:	f2ce 0100 	movt	r1, #57344	@ 0xe000
80203dc4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3741
  }
80203dc8:	e7ff      	b.n	80203dca <__NVIC_EnableIRQ+0x26>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3742
}
80203dca:	b001      	add	sp, #4
80203dcc:	4770      	bx	lr
	...

80203dd0 <__NVIC_SetPriority>:
__NVIC_SetPriority():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3932
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
80203dd0:	b082      	sub	sp, #8
80203dd2:	9001      	str	r0, [sp, #4]
80203dd4:	9100      	str	r1, [sp, #0]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3933
  if ((int32_t)(IRQn) >= 0)
80203dd6:	9801      	ldr	r0, [sp, #4]
80203dd8:	2800      	cmp	r0, #0
80203dda:	d408      	bmi.n	80203dee <__NVIC_SetPriority+0x1e>
80203ddc:	e7ff      	b.n	80203dde <__NVIC_SetPriority+0xe>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3935
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
80203dde:	9800      	ldr	r0, [sp, #0]
80203de0:	9901      	ldr	r1, [sp, #4]
80203de2:	f24e 4200 	movw	r2, #58368	@ 0xe400
80203de6:	f2ce 0200 	movt	r2, #57344	@ 0xe000
80203dea:	5488      	strb	r0, [r1, r2]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3936
  }
80203dec:	e009      	b.n	80203e02 <__NVIC_SetPriority+0x32>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3939
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
80203dee:	9800      	ldr	r0, [sp, #0]
80203df0:	9901      	ldr	r1, [sp, #4]
80203df2:	f001 010f 	and.w	r1, r1, #15
80203df6:	f64e 5214 	movw	r2, #60692	@ 0xed14
80203dfa:	f2ce 0200 	movt	r2, #57344	@ 0xe000
80203dfe:	5488      	strb	r0, [r1, r2]
80203e00:	e7ff      	b.n	80203e02 <__NVIC_SetPriority+0x32>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3941
  }
}
80203e02:	b002      	add	sp, #8
80203e04:	4770      	bx	lr
	...

80203e08 <_platform_pre_stackheap_init>:
_platform_pre_stackheap_init():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:136
{
80203e08:	b580      	push	{r7, lr}
80203e0a:	b084      	sub	sp, #16
80203e0c:	f24e 0000 	movw	r0, #57344	@ 0xe000
80203e10:	f2ce 0001 	movt	r0, #57345	@ 0xe001
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:138
    if (!(MEMSYSCTL->MSCR & MEMSYSCTL_MSCR_DCCLEAN_Msk))
80203e14:	6800      	ldr	r0, [r0, #0]
80203e16:	03c0      	lsls	r0, r0, #15
80203e18:	2800      	cmp	r0, #0
80203e1a:	d433      	bmi.n	80203e84 <_platform_pre_stackheap_init+0x7c>
80203e1c:	e7ff      	b.n	80203e1e <_platform_pre_stackheap_init+0x16>
80203e1e:	f64e 5184 	movw	r1, #60804	@ 0xed84
80203e22:	f2ce 0100 	movt	r1, #57344	@ 0xe000
80203e26:	2000      	movs	r0, #0
SCB_CleanDCache():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:289
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
80203e28:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:290
    __DSB();
80203e2a:	f3bf 8f4f 	dsb	sy
80203e2e:	f64e 5080 	movw	r0, #60800	@ 0xed80
80203e32:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:292

    ccsidr = SCB->CCSIDR;
80203e36:	6800      	ldr	r0, [r0, #0]
80203e38:	9003      	str	r0, [sp, #12]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:295

                                            /* clean D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
80203e3a:	9803      	ldr	r0, [sp, #12]
80203e3c:	f3c0 304e 	ubfx	r0, r0, #13, #15
80203e40:	9002      	str	r0, [sp, #8]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:296
    do {
80203e42:	e7ff      	b.n	80203e44 <_platform_pre_stackheap_init+0x3c>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:297
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
80203e44:	9803      	ldr	r0, [sp, #12]
80203e46:	f3c0 00c9 	ubfx	r0, r0, #3, #10
80203e4a:	9001      	str	r0, [sp, #4]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:298
      do {
80203e4c:	e7ff      	b.n	80203e4e <_platform_pre_stackheap_init+0x46>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:299
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
80203e4e:	9902      	ldr	r1, [sp, #8]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:300
                      ((ways << SCB_DCCSW_WAY_Pos) & SCB_DCCSW_WAY_Msk)  );
80203e50:	9801      	ldr	r0, [sp, #4]
80203e52:	0780      	lsls	r0, r0, #30
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:299
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
80203e54:	f361 104d 	bfi	r0, r1, #5, #9
80203e58:	f64e 716c 	movw	r1, #61292	@ 0xef6c
80203e5c:	f2ce 0100 	movt	r1, #57344	@ 0xe000
80203e60:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:304
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
80203e62:	9801      	ldr	r0, [sp, #4]
80203e64:	1e41      	subs	r1, r0, #1
80203e66:	9101      	str	r1, [sp, #4]
80203e68:	b108      	cbz	r0, 80203e6e <_platform_pre_stackheap_init+0x66>
80203e6a:	f02f c011 	le	80203e4e <_platform_pre_stackheap_init+0x46>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:305
    } while(sets-- != 0U);
80203e6e:	9802      	ldr	r0, [sp, #8]
80203e70:	1e41      	subs	r1, r0, #1
80203e72:	9102      	str	r1, [sp, #8]
80203e74:	b108      	cbz	r0, 80203e7a <_platform_pre_stackheap_init+0x72>
80203e76:	f02f c81b 	le	80203e44 <_platform_pre_stackheap_init+0x3c>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:307

    __DSB();
80203e7a:	f3bf 8f4f 	dsb	sy
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:308
    __ISB();
80203e7e:	f3bf 8f6f 	isb	sy
_platform_pre_stackheap_init():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:141
    }
80203e82:	e7ff      	b.n	80203e84 <_platform_pre_stackheap_init+0x7c>
SCB_InvalidateICache():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:96
    __DSB();
80203e84:	f3bf 8f4f 	dsb	sy
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:97
    __ISB();
80203e88:	f3bf 8f6f 	isb	sy
80203e8c:	f64e 7150 	movw	r1, #61264	@ 0xef50
80203e90:	f2ce 0100 	movt	r1, #57344	@ 0xe000
80203e94:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:98
    SCB->ICIALLU = 0UL;
80203e96:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:99
    __DSB();
80203e98:	f3bf 8f4f 	dsb	sy
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:100
    __ISB();
80203e9c:	f3bf 8f6f 	isb	sy
_platform_pre_stackheap_init():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:145
    sys_busy_loop_init();
80203ea0:	f000 fe5c 	bl	80204b5c <sys_busy_loop_init>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:146
}
80203ea4:	b004      	add	sp, #16
80203ea6:	bd80      	pop	{r7, pc}

80203ea8 <_sys_close>:
_sys_close():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:164
*
*  Return value:
*    0     - device/file closed
*
*/
int _sys_close(FILEHANDLE hFile) {
80203ea8:	b081      	sub	sp, #4
80203eaa:	9000      	str	r0, [sp, #0]
80203eac:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:166
  (void)hFile;
  return 0;  // Not implemented
80203eae:	b001      	add	sp, #4
80203eb0:	4770      	bx	lr
	...

80203eb4 <_sys_flen>:
_sys_flen():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:256
*
*  Return value:
*    Length of the file
*
*/
long _sys_flen(FILEHANDLE hFile) {
80203eb4:	b081      	sub	sp, #4
80203eb6:	9000      	str	r0, [sp, #0]
80203eb8:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:258
  (void)hFile;
  return (0);  // Not implemented
80203eba:	b001      	add	sp, #4
80203ebc:	4770      	bx	lr
	...

80203ec0 <_sys_istty>:
_sys_istty():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:214
int _sys_istty(FILEHANDLE hFile) {
80203ec0:	b082      	sub	sp, #8
80203ec2:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:215
  if (hFile > 0x8000) {
80203ec4:	9800      	ldr	r0, [sp, #0]
80203ec6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
80203eca:	dd03      	ble.n	80203ed4 <_sys_istty+0x14>
80203ecc:	e7ff      	b.n	80203ece <_sys_istty+0xe>
80203ece:	2001      	movs	r0, #1
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:216
    return (1);
80203ed0:	9001      	str	r0, [sp, #4]
80203ed2:	e002      	b.n	80203eda <_sys_istty+0x1a>
80203ed4:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:218
  return (0);  // Not implemented
80203ed6:	9001      	str	r0, [sp, #4]
80203ed8:	e7ff      	b.n	80203eda <_sys_istty+0x1a>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:219
}
80203eda:	9801      	ldr	r0, [sp, #4]
80203edc:	b002      	add	sp, #8
80203ede:	4770      	bx	lr

80203ee0 <_sys_open>:
_sys_open():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:139
FILEHANDLE _sys_open(const char * sName, int OpenMode) {
80203ee0:	b580      	push	{r7, lr}
80203ee2:	b084      	sub	sp, #16
80203ee4:	9002      	str	r0, [sp, #8]
80203ee6:	9101      	str	r1, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:142
  if (strcmp(sName, __stdout_name) == 0) {
80203ee8:	9802      	ldr	r0, [sp, #8]
80203eea:	f245 617a 	movw	r1, #22138	@ 0x567a
80203eee:	f2c8 0120 	movt	r1, #32800	@ 0x8020
80203ef2:	f7fc fdf1 	bl	80200ad8 <strcmp>
80203ef6:	b920      	cbnz	r0, 80203f02 <_sys_open+0x22>
80203ef8:	e7ff      	b.n	80203efa <_sys_open+0x1a>
80203efa:	f248 0002 	movw	r0, #32770	@ 0x8002
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:143
    return (STDOUT);
80203efe:	9003      	str	r0, [sp, #12]
80203f00:	e00f      	b.n	80203f22 <_sys_open+0x42>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:144
  } else if (strcmp(sName, __stderr_name) == 0) {
80203f02:	9802      	ldr	r0, [sp, #8]
80203f04:	f245 617e 	movw	r1, #22142	@ 0x567e
80203f08:	f2c8 0120 	movt	r1, #32800	@ 0x8020
80203f0c:	f7fc fde4 	bl	80200ad8 <strcmp>
80203f10:	b920      	cbnz	r0, 80203f1c <_sys_open+0x3c>
80203f12:	e7ff      	b.n	80203f14 <_sys_open+0x34>
80203f14:	f248 0003 	movw	r0, #32771	@ 0x8003
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:145
    return (STDERR);
80203f18:	9003      	str	r0, [sp, #12]
80203f1a:	e002      	b.n	80203f22 <_sys_open+0x42>
80203f1c:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:147
  return (0);  // Not implemented
80203f1e:	9003      	str	r0, [sp, #12]
80203f20:	e7ff      	b.n	80203f22 <_sys_open+0x42>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:148
}
80203f22:	9803      	ldr	r0, [sp, #12]
80203f24:	b004      	add	sp, #16
80203f26:	bd80      	pop	{r7, pc}

80203f28 <_sys_seek>:
_sys_seek():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:236
int _sys_seek(FILEHANDLE hFile, long Pos) {
80203f28:	b082      	sub	sp, #8
80203f2a:	9001      	str	r0, [sp, #4]
80203f2c:	9100      	str	r1, [sp, #0]
80203f2e:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:239
  return (0);  // Not implemented
80203f30:	b002      	add	sp, #8
80203f32:	4770      	bx	lr

80203f34 <_sys_write>:
_sys_write():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:187
int _sys_write(FILEHANDLE hFile, const unsigned char * pBuffer, unsigned NumBytes, int Mode) {
80203f34:	b580      	push	{r7, lr}
80203f36:	b088      	sub	sp, #32
80203f38:	9006      	str	r0, [sp, #24]
80203f3a:	9105      	str	r1, [sp, #20]
80203f3c:	9204      	str	r2, [sp, #16]
80203f3e:	9303      	str	r3, [sp, #12]
80203f40:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:188
  int r = 0;
80203f42:	9002      	str	r0, [sp, #8]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:191
  if (hFile == STDOUT) {
80203f44:	9806      	ldr	r0, [sp, #24]
80203f46:	f248 0102 	movw	r1, #32770	@ 0x8002
80203f4a:	4288      	cmp	r0, r1
80203f4c:	d109      	bne.n	80203f62 <_sys_write+0x2e>
80203f4e:	e7ff      	b.n	80203f50 <_sys_write+0x1c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:192
    SEGGER_RTT_Write(0, (const char*)pBuffer, NumBytes);
80203f50:	9905      	ldr	r1, [sp, #20]
80203f52:	9a04      	ldr	r2, [sp, #16]
80203f54:	2000      	movs	r0, #0
80203f56:	9001      	str	r0, [sp, #4]
80203f58:	f7ff fb4c 	bl	802035f4 <SEGGER_RTT_Write>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:193
		return 0;
80203f5c:	9801      	ldr	r0, [sp, #4]
80203f5e:	9007      	str	r0, [sp, #28]
80203f60:	e002      	b.n	80203f68 <_sys_write+0x34>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:195
  return r;
80203f62:	9802      	ldr	r0, [sp, #8]
80203f64:	9007      	str	r0, [sp, #28]
80203f66:	e7ff      	b.n	80203f68 <_sys_write+0x34>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:196
}
80203f68:	9807      	ldr	r0, [sp, #28]
80203f6a:	b008      	add	sp, #32
80203f6c:	bd80      	pop	{r7, pc}
	...

80203f70 <_ttywrch>:
_ttywrch():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:118
void _ttywrch(int c) {
80203f70:	b580      	push	{r7, lr}
80203f72:	b082      	sub	sp, #8
80203f74:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:119
  fputc(c, stdout); // stdout
80203f76:	9801      	ldr	r0, [sp, #4]
80203f78:	f240 619c 	movw	r1, #1692	@ 0x69c
80203f7c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80203f80:	9100      	str	r1, [sp, #0]
80203f82:	f001 fb2a 	bl	802055da <fputc>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:120
  fflush(stdout);
80203f86:	9800      	ldr	r0, [sp, #0]
80203f88:	f7fc fd0b 	bl	802009a2 <fflush>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/SEGGER_RTT_V796h/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:121
}
80203f8c:	b002      	add	sp, #8
80203f8e:	bd80      	pop	{r7, pc}

80203f90 <disable_lprtc_clk>:
disable_lprtc_clk():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_rtc.h:48
  \brief        VBAT clock disable for LPRTC
  \param        none
  \return       none
*/
static inline void disable_lprtc_clk (void)
{
80203f90:	f249 0110 	movw	r1, #36880	@ 0x9010
80203f94:	f6c1 2160 	movt	r1, #6752	@ 0x1a60
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_rtc.h:49
    VBAT->RTC_CLK_EN &= ~RTC_CLK_ENABLE;
80203f98:	6808      	ldr	r0, [r1, #0]
80203f9a:	f020 0001 	bic.w	r0, r0, #1
80203f9e:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_rtc.h:50
}
80203fa0:	4770      	bx	lr
	...

80203fa4 <enable_force_apb_interface_clk>:
enable_force_apb_interface_clk():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/include/clk.h:34
{
    CLKCTL_PER_SLV->EXPMST0_CTRL &= ~EXPMST0_CTRL_IPCLK_FORCE;
}

static inline void enable_force_apb_interface_clk(void)
{
80203fa4:	f24f 0100 	movw	r1, #61440	@ 0xf000
80203fa8:	f6c4 1102 	movt	r1, #18690	@ 0x4902
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/include/clk.h:35
    CLKCTL_PER_SLV->EXPMST0_CTRL |= EXPMST0_CTRL_PCLK_FORCE;
80203fac:	6808      	ldr	r0, [r1, #0]
80203fae:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
80203fb2:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/include/clk.h:36
}
80203fb4:	4770      	bx	lr
	...

80203fb8 <enable_force_peripheral_functional_clk>:
enable_force_peripheral_functional_clk():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/include/clk.h:24
{
80203fb8:	f24f 0100 	movw	r1, #61440	@ 0xf000
80203fbc:	f6c4 1102 	movt	r1, #18690	@ 0x4902
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/include/clk.h:25
    CLKCTL_PER_SLV->EXPMST0_CTRL |= EXPMST0_CTRL_IPCLK_FORCE;
80203fc0:	6808      	ldr	r0, [r1, #0]
80203fc2:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
80203fc6:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/include/clk.h:26
}
80203fc8:	4770      	bx	lr
	...

80203fcc <enable_lprtc_clk>:
enable_lprtc_clk():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_rtc.h:37
{
80203fcc:	f249 0110 	movw	r1, #36880	@ 0x9010
80203fd0:	f6c1 2160 	movt	r1, #6752	@ 0x1a60
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_rtc.h:38
    VBAT->RTC_CLK_EN |= RTC_CLK_ENABLE;
80203fd4:	6808      	ldr	r0, [r1, #0]
80203fd6:	f040 0001 	orr.w	r0, r0, #1
80203fda:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_rtc.h:39
}
80203fdc:	4770      	bx	lr
	...

80203fe0 <fault_dump_enable>:
fault_dump_enable():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:300
{
80203fe0:	b580      	push	{r7, lr}
80203fe2:	b084      	sub	sp, #16
80203fe4:	f88d 000b 	strb.w	r0, [sp, #11]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:301
    fault_dump_enabled = enable;
80203fe8:	f89d 000b 	ldrb.w	r0, [sp, #11]
80203fec:	f000 0001 	and.w	r0, r0, #1
80203ff0:	f640 4160 	movw	r1, #3168	@ 0xc60
80203ff4:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80203ff8:	7008      	strb	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:302
    fault_handler_active = false;
80203ffa:	f640 4161 	movw	r1, #3169	@ 0xc61
80203ffe:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80204002:	2000      	movs	r0, #0
80204004:	7008      	strb	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:305
    print_faults();
80204006:	f000 f9b1 	bl	8020436c <print_faults>
__get_IPSR():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/./m-profile/cmsis_armclang_m.h:778
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
8020400a:	f3ef 8005 	mrs	r0, IPSR
8020400e:	9003      	str	r0, [sp, #12]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/./m-profile/cmsis_armclang_m.h:779
  return (result);
80204010:	9803      	ldr	r0, [sp, #12]
fault_dump_enable():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:308
    ipsr.w = __get_IPSR();
80204012:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:309
    if (ipsr.b.ISR != 0) {
80204014:	f8bd 0004 	ldrh.w	r0, [sp, #4]
80204018:	05c0      	lsls	r0, r0, #23
8020401a:	b150      	cbz	r0, 80204032 <fault_dump_enable+0x52>
8020401c:	e7ff      	b.n	8020401e <fault_dump_enable+0x3e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:310
        printf("!!! In exception %d !!!\n", ipsr.b.ISR);
8020401e:	9901      	ldr	r1, [sp, #4]
80204020:	f36f 215f 	bfc	r1, #9, #23
80204024:	f645 30a5 	movw	r0, #23461	@ 0x5ba5
80204028:	f2c8 0020 	movt	r0, #32800	@ 0x8020
8020402c:	f7fc fc92 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:311
    }
80204030:	e7ff      	b.n	80204032 <fault_dump_enable+0x52>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:312
}
80204032:	b004      	add	sp, #16
80204034:	bd80      	pop	{r7, pc}
	...

80204038 <gpio_interrupt_eoi>:
gpio_interrupt_eoi():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:348
  \param       gpio     Pointer to the GPIO register map
  \param       pin_no   pin number
  \return      none
*/
static inline void gpio_interrupt_eoi (GPIO_Type *gpio, uint8_t pin_no)
{
80204038:	b082      	sub	sp, #8
8020403a:	9001      	str	r0, [sp, #4]
8020403c:	f88d 1003 	strb.w	r1, [sp, #3]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:349
    gpio->GPIO_PORTA_EOI |= (1 << pin_no);
80204040:	f89d 1003 	ldrb.w	r1, [sp, #3]
80204044:	2001      	movs	r0, #1
80204046:	fa00 f201 	lsl.w	r2, r0, r1
8020404a:	9901      	ldr	r1, [sp, #4]
8020404c:	6cc8      	ldr	r0, [r1, #76]	@ 0x4c
8020404e:	4310      	orrs	r0, r2
80204050:	64c8      	str	r0, [r1, #76]	@ 0x4c
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:350
    (void) gpio->GPIO_PORTA_EOI;
80204052:	9801      	ldr	r0, [sp, #4]
80204054:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:351
}
80204056:	b002      	add	sp, #8
80204058:	4770      	bx	lr
	...

8020405c <lprtc_counter_disable>:
lprtc_counter_disable():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:68
  \brief        Disable lprtc counter
  \param[in]    lprtc  : Pointer to lprtc register block
  \return       none
*/
static inline void lprtc_counter_disable (LPRTC_Type *lprtc)
{
8020405c:	b081      	sub	sp, #4
8020405e:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:69
    lprtc->LPRTC_CCR &= ~(CCR_LPRTC_EN);
80204060:	9900      	ldr	r1, [sp, #0]
80204062:	68c8      	ldr	r0, [r1, #12]
80204064:	f020 0004 	bic.w	r0, r0, #4
80204068:	60c8      	str	r0, [r1, #12]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:70
}
8020406a:	b001      	add	sp, #4
8020406c:	4770      	bx	lr
	...

80204070 <lprtc_counter_enable>:
lprtc_counter_enable():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:57
{
80204070:	b081      	sub	sp, #4
80204072:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:58
    lprtc->LPRTC_CCR |= (CCR_LPRTC_EN);
80204074:	9900      	ldr	r1, [sp, #0]
80204076:	68c8      	ldr	r0, [r1, #12]
80204078:	f040 0004 	orr.w	r0, r0, #4
8020407c:	60c8      	str	r0, [r1, #12]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:59
}
8020407e:	b001      	add	sp, #4
80204080:	4770      	bx	lr
	...

80204084 <lprtc_counter_wrap_disable>:
lprtc_counter_wrap_disable():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:112
  \brief        Disable lprtc counter wrap
  \param[in]    lprtc  : Pointer to lprtc register block
  \return       none
*/
static inline void lprtc_counter_wrap_disable (LPRTC_Type *lprtc)
{
80204084:	b081      	sub	sp, #4
80204086:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:113
    lprtc->LPRTC_CCR &= ~(CCR_LPRTC_WEN);
80204088:	9900      	ldr	r1, [sp, #0]
8020408a:	68c8      	ldr	r0, [r1, #12]
8020408c:	f020 0008 	bic.w	r0, r0, #8
80204090:	60c8      	str	r0, [r1, #12]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:114
}
80204092:	b001      	add	sp, #4
80204094:	4770      	bx	lr
	...

80204098 <lprtc_get_count>:
lprtc_get_count():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:216
  \brief        Read lprtc current counter value
  \param[in]    lprtc   : Pointer to lprtc register block
  \return       lprtc current counter value
*/
static inline uint32_t lprtc_get_count (LPRTC_Type *lprtc)
{
80204098:	b081      	sub	sp, #4
8020409a:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:217
    return lprtc->LPRTC_CCVR;
8020409c:	9800      	ldr	r0, [sp, #0]
8020409e:	6800      	ldr	r0, [r0, #0]
802040a0:	b001      	add	sp, #4
802040a2:	4770      	bx	lr

802040a4 <lprtc_interrupt_ack>:
lprtc_interrupt_ack():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:167
{
802040a4:	b081      	sub	sp, #4
802040a6:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:169
    (void) (lprtc->LPRTC_EOI);
802040a8:	9800      	ldr	r0, [sp, #0]
802040aa:	6980      	ldr	r0, [r0, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:170
}
802040ac:	b001      	add	sp, #4
802040ae:	4770      	bx	lr

802040b0 <lprtc_interrupt_disable>:
lprtc_interrupt_disable():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:134
{
802040b0:	b081      	sub	sp, #4
802040b2:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:135
    lprtc->LPRTC_CCR &= ~(CCR_LPRTC_IEN);
802040b4:	9900      	ldr	r1, [sp, #0]
802040b6:	68c8      	ldr	r0, [r1, #12]
802040b8:	f020 0001 	bic.w	r0, r0, #1
802040bc:	60c8      	str	r0, [r1, #12]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:136
}
802040be:	b001      	add	sp, #4
802040c0:	4770      	bx	lr
	...

802040c4 <lprtc_interrupt_enable>:
lprtc_interrupt_enable():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:123
{
802040c4:	b081      	sub	sp, #4
802040c6:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:124
    lprtc->LPRTC_CCR |= (CCR_LPRTC_IEN);
802040c8:	9900      	ldr	r1, [sp, #0]
802040ca:	68c8      	ldr	r0, [r1, #12]
802040cc:	f040 0001 	orr.w	r0, r0, #1
802040d0:	60c8      	str	r0, [r1, #12]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:125
}
802040d2:	b001      	add	sp, #4
802040d4:	4770      	bx	lr
	...

802040d8 <lprtc_interrupt_unmask>:
lprtc_interrupt_unmask():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:156
{
802040d8:	b081      	sub	sp, #4
802040da:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:157
    lprtc->LPRTC_CCR &= ~(CCR_LPRTC_MASK);
802040dc:	9900      	ldr	r1, [sp, #0]
802040de:	68c8      	ldr	r0, [r1, #12]
802040e0:	f020 0002 	bic.w	r0, r0, #2
802040e4:	60c8      	str	r0, [r1, #12]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:158
}
802040e6:	b001      	add	sp, #4
802040e8:	4770      	bx	lr
	...

802040ec <lprtc_load_count>:
lprtc_load_count():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:192
{
802040ec:	b082      	sub	sp, #8
802040ee:	9001      	str	r0, [sp, #4]
802040f0:	9100      	str	r1, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:193
    lprtc->LPRTC_CLR = value;
802040f2:	9800      	ldr	r0, [sp, #0]
802040f4:	9901      	ldr	r1, [sp, #4]
802040f6:	6088      	str	r0, [r1, #8]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:194
}
802040f8:	b002      	add	sp, #8
802040fa:	4770      	bx	lr

802040fc <lprtc_load_counter_match_register>:
lprtc_load_counter_match_register():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:205
{
802040fc:	b082      	sub	sp, #8
802040fe:	9001      	str	r0, [sp, #4]
80204100:	9100      	str	r1, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:206
    lprtc->LPRTC_CMR = value;
80204102:	9800      	ldr	r0, [sp, #0]
80204104:	9901      	ldr	r1, [sp, #4]
80204106:	6048      	str	r0, [r1, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:207
}
80204108:	b002      	add	sp, #8
8020410a:	4770      	bx	lr

8020410c <lprtc_load_prescaler>:
lprtc_load_prescaler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:180
{
8020410c:	b082      	sub	sp, #8
8020410e:	9001      	str	r0, [sp, #4]
80204110:	9100      	str	r1, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:181
    lprtc->LPRTC_CPSR = value;
80204112:	9800      	ldr	r0, [sp, #0]
80204114:	9901      	ldr	r1, [sp, #4]
80204116:	6208      	str	r0, [r1, #32]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:182
}
80204118:	b002      	add	sp, #8
8020411a:	4770      	bx	lr

8020411c <lprtc_prescaler_disable>:
lprtc_prescaler_disable():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:90
{
8020411c:	b081      	sub	sp, #4
8020411e:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:91
    lprtc->LPRTC_CCR &= ~(CCR_LPRTC_PSCLR_EN);
80204120:	9900      	ldr	r1, [sp, #0]
80204122:	68c8      	ldr	r0, [r1, #12]
80204124:	f020 0010 	bic.w	r0, r0, #16
80204128:	60c8      	str	r0, [r1, #12]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:92
}
8020412a:	b001      	add	sp, #4
8020412c:	4770      	bx	lr
	...

80204130 <lprtc_prescaler_enable>:
lprtc_prescaler_enable():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:79
{
80204130:	b081      	sub	sp, #4
80204132:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:80
    lprtc->LPRTC_CCR |= (CCR_LPRTC_PSCLR_EN);
80204134:	9900      	ldr	r1, [sp, #0]
80204136:	68c8      	ldr	r0, [r1, #12]
80204138:	f040 0010 	orr.w	r0, r0, #16
8020413c:	60c8      	str	r0, [r1, #12]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/rtc.h:81
}
8020413e:	b001      	add	sp, #4
80204140:	4770      	bx	lr
	...

80204144 <main>:
main():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:153
}


/* Define main entry point.  */
int main()
{
80204144:	b580      	push	{r7, lr}
80204146:	b082      	sub	sp, #8
80204148:	2000      	movs	r0, #0
8020414a:	9000      	str	r0, [sp, #0]
8020414c:	9001      	str	r0, [sp, #4]
8020414e:	2001      	movs	r0, #1
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:154
    fault_dump_enable(true);
80204150:	f7ff ff46 	bl	80203fe0 <fault_dump_enable>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:166
        while(1)
        {
        }
    }
    #endif
    rtc_demo_Thread_entry();
80204154:	f000 f814 	bl	80204180 <rtc_demo_Thread_entry>
80204158:	9800      	ldr	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:167
    return 0;
8020415a:	b002      	add	sp, #8
8020415c:	bd80      	pop	{r7, pc}
	...

80204160 <rtc_callback>:
rtc_callback():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:50
{
80204160:	b081      	sub	sp, #4
80204162:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:51
    if (event & ARM_RTC_EVENT_ALARM_TRIGGER)
80204164:	f89d 0000 	ldrb.w	r0, [sp]
80204168:	07c0      	lsls	r0, r0, #31
8020416a:	b138      	cbz	r0, 8020417c <rtc_callback+0x1c>
8020416c:	e7ff      	b.n	8020416e <rtc_callback+0xe>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:54
        cb_status = CB_EVENT_SET;
8020416e:	f640 415c 	movw	r1, #3164	@ 0xc5c
80204172:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80204176:	2001      	movs	r0, #1
80204178:	6008      	str	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:55
    }
8020417a:	e7ff      	b.n	8020417c <rtc_callback+0x1c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:56
}
8020417c:	b001      	add	sp, #4
8020417e:	4770      	bx	lr

80204180 <rtc_demo_Thread_entry>:
rtc_demo_Thread_entry():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:69
{
80204180:	b580      	push	{r7, lr}
80204182:	b08a      	sub	sp, #40	@ 0x28
80204184:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:70
    uint32_t  val      = 0;
80204186:	9009      	str	r0, [sp, #36]	@ 0x24
80204188:	2101      	movs	r1, #1
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:71
    uint32_t  iter     = 1;
8020418a:	9108      	str	r1, [sp, #32]
8020418c:	2105      	movs	r1, #5
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:72
    uint32_t  timeout  = 5;
8020418e:	9107      	str	r1, [sp, #28]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:73
    int32_t   ret      = 0;
80204190:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:77
    printf("\r\n >>> RTC demo thread is starting up!!! <<< \r\n");
80204192:	f645 10c9 	movw	r0, #22985	@ 0x59c9
80204196:	f2c8 0020 	movt	r0, #32800	@ 0x8020
8020419a:	f7fc fbdb 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:79
    version = RTCdrv->GetVersion();
8020419e:	f240 30e0 	movw	r0, #992	@ 0x3e0
802041a2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802041a6:	9001      	str	r0, [sp, #4]
802041a8:	6800      	ldr	r0, [r0, #0]
802041aa:	6800      	ldr	r0, [r0, #0]
802041ac:	4780      	blx	r0
802041ae:	9003      	str	r0, [sp, #12]
802041b0:	9803      	ldr	r0, [sp, #12]
802041b2:	9005      	str	r0, [sp, #20]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:80
    printf("\r\n RTC version api:%X driver:%X...\r\n",version.api, version.drv);
802041b4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
802041b8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
802041bc:	f645 2032 	movw	r0, #23090	@ 0x5a32
802041c0:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802041c4:	f7fc fbc6 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:82
    capabilities = RTCdrv->GetCapabilities();
802041c8:	9801      	ldr	r0, [sp, #4]
802041ca:	6800      	ldr	r0, [r0, #0]
802041cc:	6840      	ldr	r0, [r0, #4]
802041ce:	4780      	blx	r0
802041d0:	9002      	str	r0, [sp, #8]
802041d2:	9802      	ldr	r0, [sp, #8]
802041d4:	9004      	str	r0, [sp, #16]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:83
    if(!capabilities.alarm){
802041d6:	f89d 0010 	ldrb.w	r0, [sp, #16]
802041da:	07c0      	lsls	r0, r0, #31
802041dc:	b938      	cbnz	r0, 802041ee <rtc_demo_Thread_entry+0x6e>
802041de:	e7ff      	b.n	802041e0 <rtc_demo_Thread_entry+0x60>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:84
        printf("\r\n Error: RTC alarm capability is not available.\n");
802041e0:	f645 20c9 	movw	r0, #23241	@ 0x5ac9
802041e4:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802041e8:	f7fc fbb4 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:85
        return;
802041ec:	e0a8      	b.n	80204340 <rtc_demo_Thread_entry+0x1c0>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:89
    ret = RTCdrv->Initialize(rtc_callback);
802041ee:	f240 30e0 	movw	r0, #992	@ 0x3e0
802041f2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802041f6:	6800      	ldr	r0, [r0, #0]
802041f8:	6881      	ldr	r1, [r0, #8]
802041fa:	f244 1061 	movw	r0, #16737	@ 0x4161
802041fe:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204202:	4788      	blx	r1
80204204:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:90
    if(ret != ARM_DRIVER_OK){
80204206:	9806      	ldr	r0, [sp, #24]
80204208:	b138      	cbz	r0, 8020421a <rtc_demo_Thread_entry+0x9a>
8020420a:	e7ff      	b.n	8020420c <rtc_demo_Thread_entry+0x8c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:91
        printf("\r\n Error: RTC init failed\n");
8020420c:	f645 3035 	movw	r0, #23349	@ 0x5b35
80204210:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204214:	f7fc fb9e 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:92
        return;
80204218:	e092      	b.n	80204340 <rtc_demo_Thread_entry+0x1c0>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:96
    ret = RTCdrv->PowerControl(ARM_POWER_FULL);
8020421a:	f240 30e0 	movw	r0, #992	@ 0x3e0
8020421e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204222:	6800      	ldr	r0, [r0, #0]
80204224:	6901      	ldr	r1, [r0, #16]
80204226:	2002      	movs	r0, #2
80204228:	4788      	blx	r1
8020422a:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:97
    if(ret != ARM_DRIVER_OK){
8020422c:	9806      	ldr	r0, [sp, #24]
8020422e:	b138      	cbz	r0, 80204240 <rtc_demo_Thread_entry+0xc0>
80204230:	e7ff      	b.n	80204232 <rtc_demo_Thread_entry+0xb2>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:98
        printf("\r\n Error: RTC Power up failed\n");
80204232:	f645 3016 	movw	r0, #23318	@ 0x5b16
80204236:	f2c8 0020 	movt	r0, #32800	@ 0x8020
8020423a:	f7fc fb8b 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:99
        goto error_uninitialize;
8020423e:	e066      	b.n	8020430e <rtc_demo_Thread_entry+0x18e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:102
    while (iter <= 5)
80204240:	e7ff      	b.n	80204242 <rtc_demo_Thread_entry+0xc2>
80204242:	9808      	ldr	r0, [sp, #32]
80204244:	2805      	cmp	r0, #5
80204246:	d84d      	bhi.n	802042e4 <rtc_demo_Thread_entry+0x164>
80204248:	e7ff      	b.n	8020424a <rtc_demo_Thread_entry+0xca>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:104
        ret = RTCdrv->ReadCounter(&val);
8020424a:	f240 30e0 	movw	r0, #992	@ 0x3e0
8020424e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204252:	6800      	ldr	r0, [r0, #0]
80204254:	6981      	ldr	r1, [r0, #24]
80204256:	a809      	add	r0, sp, #36	@ 0x24
80204258:	4788      	blx	r1
8020425a:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:105
        if(ret != ARM_DRIVER_OK){
8020425c:	9806      	ldr	r0, [sp, #24]
8020425e:	b138      	cbz	r0, 80204270 <rtc_demo_Thread_entry+0xf0>
80204260:	e7ff      	b.n	80204262 <rtc_demo_Thread_entry+0xe2>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:106
            printf("\r\n Error: RTC read failed\n");
80204262:	f645 20fb 	movw	r0, #23291	@ 0x5afb
80204266:	f2c8 0020 	movt	r0, #32800	@ 0x8020
8020426a:	f7fc fb73 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:107
            goto error_poweroff;
8020426e:	e03a      	b.n	802042e6 <rtc_demo_Thread_entry+0x166>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:110
        printf("\r\n Setting alarm after %d counts \r\n", timeout);
80204270:	9907      	ldr	r1, [sp, #28]
80204272:	f645 200e 	movw	r0, #23054	@ 0x5a0e
80204276:	f2c8 0020 	movt	r0, #32800	@ 0x8020
8020427a:	f7fc fb6b 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:111
        ret = RTCdrv->Control(ARM_RTC_SET_ALARM, val + timeout);
8020427e:	f240 30e0 	movw	r0, #992	@ 0x3e0
80204282:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204286:	6800      	ldr	r0, [r0, #0]
80204288:	6942      	ldr	r2, [r0, #20]
8020428a:	9809      	ldr	r0, [sp, #36]	@ 0x24
8020428c:	9907      	ldr	r1, [sp, #28]
8020428e:	4401      	add	r1, r0
80204290:	2002      	movs	r0, #2
80204292:	4790      	blx	r2
80204294:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:112
        if(ret != ARM_DRIVER_OK){
80204296:	9806      	ldr	r0, [sp, #24]
80204298:	b138      	cbz	r0, 802042aa <rtc_demo_Thread_entry+0x12a>
8020429a:	e7ff      	b.n	8020429c <rtc_demo_Thread_entry+0x11c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:113
            printf("\r\n Error: RTC Could not set alarm\n");
8020429c:	f645 3050 	movw	r0, #23376	@ 0x5b50
802042a0:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802042a4:	f7fc fb56 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:114
            goto error_poweroff;
802042a8:	e01d      	b.n	802042e6 <rtc_demo_Thread_entry+0x166>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:118
        while (1)
802042aa:	e7ff      	b.n	802042ac <rtc_demo_Thread_entry+0x12c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:120
            if (cb_status)
802042ac:	f640 405c 	movw	r0, #3164	@ 0xc5c
802042b0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802042b4:	6800      	ldr	r0, [r0, #0]
802042b6:	b168      	cbz	r0, 802042d4 <rtc_demo_Thread_entry+0x154>
802042b8:	e7ff      	b.n	802042ba <rtc_demo_Thread_entry+0x13a>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:122
                printf("\r\n Received alarm \r\n");
802042ba:	f645 10f9 	movw	r0, #23033	@ 0x59f9
802042be:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802042c2:	f7fc fb47 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:123
                cb_status = CB_EVENT_CLEAR;
802042c6:	f640 415c 	movw	r1, #3164	@ 0xc5c
802042ca:	f2c2 0100 	movt	r1, #8192	@ 0x2000
802042ce:	2000      	movs	r0, #0
802042d0:	6008      	str	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:124
                break;
802042d2:	e000      	b.n	802042d6 <rtc_demo_Thread_entry+0x156>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:118
        while (1)
802042d4:	e7ea      	b.n	802042ac <rtc_demo_Thread_entry+0x12c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:127
        timeout += 5;
802042d6:	9807      	ldr	r0, [sp, #28]
802042d8:	3005      	adds	r0, #5
802042da:	9007      	str	r0, [sp, #28]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:128
        iter ++;
802042dc:	9808      	ldr	r0, [sp, #32]
802042de:	3001      	adds	r0, #1
802042e0:	9008      	str	r0, [sp, #32]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:102
    while (iter <= 5)
802042e2:	e7ae      	b.n	80204242 <rtc_demo_Thread_entry+0xc2>
802042e4:	e7ff      	b.n	802042e6 <rtc_demo_Thread_entry+0x166>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:134
        ret = RTCdrv->PowerControl(ARM_POWER_OFF);
802042e6:	f240 30e0 	movw	r0, #992	@ 0x3e0
802042ea:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802042ee:	6800      	ldr	r0, [r0, #0]
802042f0:	6901      	ldr	r1, [r0, #16]
802042f2:	2000      	movs	r0, #0
802042f4:	4788      	blx	r1
802042f6:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:135
        if(ret != ARM_DRIVER_OK){
802042f8:	9806      	ldr	r0, [sp, #24]
802042fa:	b138      	cbz	r0, 8020430c <rtc_demo_Thread_entry+0x18c>
802042fc:	e7ff      	b.n	802042fe <rtc_demo_Thread_entry+0x17e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:136
            printf("\r\n Error: RTC Power OFF failed.\r\n");
802042fe:	f645 2082 	movw	r0, #23170	@ 0x5a82
80204302:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204306:	f7fc fb25 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:137
        }
8020430a:	e7ff      	b.n	8020430c <rtc_demo_Thread_entry+0x18c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:135
        if(ret != ARM_DRIVER_OK){
8020430c:	e7ff      	b.n	8020430e <rtc_demo_Thread_entry+0x18e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:142
        ret = RTCdrv->Uninitialize();
8020430e:	f240 30e0 	movw	r0, #992	@ 0x3e0
80204312:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204316:	6800      	ldr	r0, [r0, #0]
80204318:	68c0      	ldr	r0, [r0, #12]
8020431a:	4780      	blx	r0
8020431c:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:143
        if(ret != ARM_DRIVER_OK){
8020431e:	9806      	ldr	r0, [sp, #24]
80204320:	b138      	cbz	r0, 80204332 <rtc_demo_Thread_entry+0x1b2>
80204322:	e7ff      	b.n	80204324 <rtc_demo_Thread_entry+0x1a4>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:144
            printf("\r\n Error: RTC Uninitialize failed.\r\n");
80204324:	f645 20a4 	movw	r0, #23204	@ 0x5aa4
80204328:	f2c8 0020 	movt	r0, #32800	@ 0x8020
8020432c:	f7fc fb12 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:145
        }
80204330:	e7ff      	b.n	80204332 <rtc_demo_Thread_entry+0x1b2>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:147
    printf("\r\n XXX RTC demo thread is exiting XXX...\r\n");
80204332:	f645 2057 	movw	r0, #23127	@ 0x5a57
80204336:	f2c8 0020 	movt	r0, #32800	@ 0x8020
8020433a:	f7fc fb0b 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/test_ac6/RTC_Baremetal.c:148
}
8020433e:	e7ff      	b.n	80204340 <rtc_demo_Thread_entry+0x1c0>
80204340:	b00a      	add	sp, #40	@ 0x28
80204342:	bd80      	pop	{r7, pc}

80204344 <setup_tcm_ns_partition>:
setup_tcm_ns_partition():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:80

void setup_tcm_ns_partition (void)
{
80204344:	b580      	push	{r7, lr}
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:82
    /* Do nothing if partitions are not defined in the linker script */
    if (&ns_region_0_end == &ns_region_0_start)
80204346:	f244 0100 	movw	r1, #16384	@ 0x4000
8020434a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
8020434e:	f244 0000 	movw	r0, #16384	@ 0x4000
80204352:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204356:	4288      	cmp	r0, r1
80204358:	d101      	bne.n	8020435e <setup_tcm_ns_partition+0x1a>
8020435a:	e7ff      	b.n	8020435c <setup_tcm_ns_partition+0x18>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:83
        return;
8020435c:	e004      	b.n	80204368 <setup_tcm_ns_partition+0x24>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:85

    SAU_TCM_NS_Setup();
8020435e:	f7ff f925 	bl	802035ac <SAU_TCM_NS_Setup>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:86
    TGU_Setup();
80204362:	f7ff fa15 	bl	80203790 <TGU_Setup>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:87
}
80204366:	e7ff      	b.n	80204368 <setup_tcm_ns_partition+0x24>
80204368:	bd80      	pop	{r7, pc}
	...

8020436c <print_faults>:
print_faults():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:284
{
8020436c:	b580      	push	{r7, lr}
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:285
    print_usagefault();
8020436e:	f000 f9b1 	bl	802046d4 <print_usagefault>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:286
    print_memmanage();
80204372:	f000 f9d3 	bl	8020471c <print_memmanage>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:287
    print_busfault();
80204376:	f000 fa07 	bl	80204788 <print_busfault>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:288
    print_securefault();
8020437a:	f000 fa53 	bl	80204824 <print_securefault>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:289
    print_debugfault();
8020437e:	f000 fa75 	bl	8020486c <print_debugfault>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:290
    print_hardfault();
80204382:	f000 fa97 	bl	802048b4 <print_hardfault>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:291
}
80204386:	bd80      	pop	{r7, pc}

80204388 <FaultDump>:
FaultDump():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:446
    JumpToDump(new_exc_return, new_sp);
}

FAULT_HANDLER_XO_MEMORY_LOCATION
static void FaultDump(void)
{
80204388:	b580      	push	{r7, lr}
8020438a:	b08c      	sub	sp, #48	@ 0x30
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:447
    printf("\n==== %s exception ====\n\n", FaultNames[fault_type]);
8020438c:	f640 406c 	movw	r0, #3180	@ 0xc6c
80204390:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204394:	6801      	ldr	r1, [r0, #0]
80204396:	f645 10a0 	movw	r0, #22944	@ 0x59a0
8020439a:	f2c8 0020 	movt	r0, #32800	@ 0x8020
8020439e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
802043a2:	f645 3073 	movw	r0, #23411	@ 0x5b73
802043a6:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802043aa:	f7fc fad3 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:449

    print_faults();
802043ae:	f7ff ffdd 	bl	8020436c <print_faults>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:452

    printf("\nEXC_RETURN = %08" PRIX32 "\n\n"
           "Register dump (stored at &%08" PRIXPTR ") is:\n", exc_return, (uintptr_t) regs);
802043b2:	f640 4068 	movw	r0, #3176	@ 0xc68
802043b6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802043ba:	6801      	ldr	r1, [r0, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:451
    printf("\nEXC_RETURN = %08" PRIX32 "\n\n"
802043bc:	f645 30be 	movw	r0, #23486	@ 0x5bbe
802043c0:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802043c4:	f640 4270 	movw	r2, #3184	@ 0xc70
802043c8:	f2c2 0200 	movt	r2, #8192	@ 0x2000
802043cc:	f7fc fac2 	bl	80200954 <printf>
802043d0:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:453
    for (int i = 0; i < 13; i++) {
802043d2:	900b      	str	r0, [sp, #44]	@ 0x2c
802043d4:	e7ff      	b.n	802043d6 <FaultDump+0x4e>
802043d6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
802043d8:	280c      	cmp	r0, #12
802043da:	dc1c      	bgt.n	80204416 <FaultDump+0x8e>
802043dc:	e7ff      	b.n	802043de <FaultDump+0x56>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:454
        printf("R%-3d= %08" PRIX32 "%c", i, regs[i], i % 4 < 3 ? ' ' : '\n');
802043de:	990b      	ldr	r1, [sp, #44]	@ 0x2c
802043e0:	f640 4070 	movw	r0, #3184	@ 0xc70
802043e4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802043e8:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
802043ec:	17c8      	asrs	r0, r1, #31
802043ee:	eb01 7090 	add.w	r0, r1, r0, lsr #30
802043f2:	f020 0003 	bic.w	r0, r0, #3
802043f6:	1a08      	subs	r0, r1, r0
802043f8:	230a      	movs	r3, #10
802043fa:	2803      	cmp	r0, #3
802043fc:	bfb8      	it	lt
802043fe:	2320      	movlt	r3, #32
80204400:	f645 504c 	movw	r0, #23884	@ 0x5d4c
80204404:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204408:	f7fc faa4 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:455
    }
8020440c:	e7ff      	b.n	8020440e <FaultDump+0x86>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:453
    for (int i = 0; i < 13; i++) {
8020440e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
80204410:	3001      	adds	r0, #1
80204412:	900b      	str	r0, [sp, #44]	@ 0x2c
80204414:	e7df      	b.n	802043d6 <FaultDump+0x4e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:456
    printf("SP  = %08" PRIX32 " LR  = %08" PRIX32 " PC  = %08" PRIX32 "\n", regs[13], regs[14], regs[15]);
80204416:	f640 4070 	movw	r0, #3184	@ 0xc70
8020441a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020441e:	6b41      	ldr	r1, [r0, #52]	@ 0x34
80204420:	6b82      	ldr	r2, [r0, #56]	@ 0x38
80204422:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
80204424:	f645 4012 	movw	r0, #23570	@ 0x5c12
80204428:	f2c8 0020 	movt	r0, #32800	@ 0x8020
8020442c:	f7fc fa92 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:457
    printf("Mode %-8sflags set: ", exc_return & 8 ? "Thread" : "Handler");
80204430:	f640 4068 	movw	r0, #3176	@ 0xc68
80204434:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204438:	6800      	ldr	r0, [r0, #0]
8020443a:	0702      	lsls	r2, r0, #28
8020443c:	f645 505a 	movw	r0, #23898	@ 0x5d5a
80204440:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204444:	f645 516b 	movw	r1, #23915	@ 0x5d6b
80204448:	f2c8 0120 	movt	r1, #32800	@ 0x8020
8020444c:	2a00      	cmp	r2, #0
8020444e:	bf48      	it	mi
80204450:	4601      	movmi	r1, r0
80204452:	f645 40c7 	movw	r0, #23751	@ 0x5cc7
80204456:	f2c8 0020 	movt	r0, #32800	@ 0x8020
8020445a:	f7fc fa7b 	bl	80200954 <printf>
8020445e:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:458
    for (size_t i = 0, bit = 1u<<31; i < 24; i++) {
80204460:	900a      	str	r0, [sp, #40]	@ 0x28
80204462:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
80204466:	9009      	str	r0, [sp, #36]	@ 0x24
80204468:	e7ff      	b.n	8020446a <FaultDump+0xe2>
8020446a:	980a      	ldr	r0, [sp, #40]	@ 0x28
8020446c:	2817      	cmp	r0, #23
8020446e:	d840      	bhi.n	802044f2 <FaultDump+0x16a>
80204470:	e7ff      	b.n	80204472 <FaultDump+0xea>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:459
        if (i < sizeof flag_names - 1) {
80204472:	980a      	ldr	r0, [sp, #40]	@ 0x28
80204474:	280f      	cmp	r0, #15
80204476:	d82f      	bhi.n	802044d8 <FaultDump+0x150>
80204478:	e7ff      	b.n	8020447a <FaultDump+0xf2>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:460
            if (flag_names[i] != '0') {
8020447a:	990a      	ldr	r1, [sp, #40]	@ 0x28
8020447c:	f645 10b8 	movw	r0, #22968	@ 0x59b8
80204480:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204484:	5c40      	ldrb	r0, [r0, r1]
80204486:	2830      	cmp	r0, #48	@ 0x30
80204488:	d022      	beq.n	802044d0 <FaultDump+0x148>
8020448a:	e7ff      	b.n	8020448c <FaultDump+0x104>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:461
                putchar(regs[16] & bit ? flag_names[i] : flag_names[i] + 'a' - 'A');
8020448c:	f640 4070 	movw	r0, #3184	@ 0xc70
80204490:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204494:	6c00      	ldr	r0, [r0, #64]	@ 0x40
80204496:	9909      	ldr	r1, [sp, #36]	@ 0x24
80204498:	4208      	tst	r0, r1
8020449a:	d008      	beq.n	802044ae <FaultDump+0x126>
8020449c:	e7ff      	b.n	8020449e <FaultDump+0x116>
8020449e:	990a      	ldr	r1, [sp, #40]	@ 0x28
802044a0:	f645 10b8 	movw	r0, #22968	@ 0x59b8
802044a4:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802044a8:	5c40      	ldrb	r0, [r0, r1]
802044aa:	9002      	str	r0, [sp, #8]
802044ac:	e008      	b.n	802044c0 <FaultDump+0x138>
802044ae:	990a      	ldr	r1, [sp, #40]	@ 0x28
802044b0:	f645 10b8 	movw	r0, #22968	@ 0x59b8
802044b4:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802044b8:	5c40      	ldrb	r0, [r0, r1]
802044ba:	3020      	adds	r0, #32
802044bc:	9002      	str	r0, [sp, #8]
802044be:	e7ff      	b.n	802044c0 <FaultDump+0x138>
802044c0:	9802      	ldr	r0, [sp, #8]
802044c2:	f240 619c 	movw	r1, #1692	@ 0x69c
802044c6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
802044ca:	f7fc fa81 	bl	802009d0 <putc>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:462
            }
802044ce:	e7ff      	b.n	802044d0 <FaultDump+0x148>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:463
            bit >>= 1;
802044d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
802044d2:	0840      	lsrs	r0, r0, #1
802044d4:	9009      	str	r0, [sp, #36]	@ 0x24
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:464
        } else {
802044d6:	e007      	b.n	802044e8 <FaultDump+0x160>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:465
            putchar(' ');
802044d8:	f240 619c 	movw	r1, #1692	@ 0x69c
802044dc:	f2c2 0100 	movt	r1, #8192	@ 0x2000
802044e0:	2020      	movs	r0, #32
802044e2:	f7fc fa75 	bl	802009d0 <putc>
802044e6:	e7ff      	b.n	802044e8 <FaultDump+0x160>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:467
        }
    }
802044e8:	e7ff      	b.n	802044ea <FaultDump+0x162>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:458
    for (size_t i = 0, bit = 1u<<31; i < 24; i++) {
802044ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
802044ec:	3001      	adds	r0, #1
802044ee:	900a      	str	r0, [sp, #40]	@ 0x28
802044f0:	e7bb      	b.n	8020446a <FaultDump+0xe2>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:468
    printf("PSR = %08" PRIX32 "\n", regs[16]);
802044f2:	f640 4070 	movw	r0, #3184	@ 0xc70
802044f6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802044fa:	6c01      	ldr	r1, [r0, #64]	@ 0x40
802044fc:	f645 4050 	movw	r0, #23632	@ 0x5c50
80204500:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204504:	f7fc fa26 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:469
    if (!(exc_return & 8)) {
80204508:	f640 4068 	movw	r0, #3176	@ 0xc68
8020450c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204510:	7800      	ldrb	r0, [r0, #0]
80204512:	0700      	lsls	r0, r0, #28
80204514:	2800      	cmp	r0, #0
80204516:	d40e      	bmi.n	80204536 <FaultDump+0x1ae>
80204518:	e7ff      	b.n	8020451a <FaultDump+0x192>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:470
        printf("Exception %" PRId32 "\n", regs[16] & 0x1FF);
8020451a:	f640 4070 	movw	r0, #3184	@ 0xc70
8020451e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204522:	6c01      	ldr	r1, [r0, #64]	@ 0x40
80204524:	f36f 215f 	bfc	r1, #9, #23
80204528:	f645 40a9 	movw	r0, #23721	@ 0x5ca9
8020452c:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204530:	f7fc fa10 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:471
    }
80204534:	e7ff      	b.n	80204536 <FaultDump+0x1ae>
80204536:	f64e 5008 	movw	r0, #60680	@ 0xed08
8020453a:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:473

    uintptr_t stack_top = VTOR_STACK_TOP;
8020453e:	6800      	ldr	r0, [r0, #0]
80204540:	6800      	ldr	r0, [r0, #0]
80204542:	9008      	str	r0, [sp, #32]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:474
    printf("Stack top from VTOR: %08" PRIXPTR "\n", stack_top);
80204544:	9908      	ldr	r1, [sp, #32]
80204546:	f645 30f7 	movw	r0, #23543	@ 0x5bf7
8020454a:	f2c8 0020 	movt	r0, #32800	@ 0x8020
8020454e:	f7fc fa01 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:475
    printf("\n==== Stack dump ====\n\n");
80204552:	f645 308d 	movw	r0, #23437	@ 0x5b8d
80204556:	f2c8 0020 	movt	r0, #32800	@ 0x8020
8020455a:	f7fc f9fb 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:476
    const uintptr_t stack_point = regs[13];
8020455e:	f640 4070 	movw	r0, #3184	@ 0xc70
80204562:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204566:	6b40      	ldr	r0, [r0, #52]	@ 0x34
80204568:	9007      	str	r0, [sp, #28]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:480

    // not using the default stack so we have to just
    // print the defined maximum (STACK_DUMP_MAX_LINES)
    if (stack_top < stack_point) {
8020456a:	9808      	ldr	r0, [sp, #32]
8020456c:	9907      	ldr	r1, [sp, #28]
8020456e:	4288      	cmp	r0, r1
80204570:	d204      	bcs.n	8020457c <FaultDump+0x1f4>
80204572:	e7ff      	b.n	80204574 <FaultDump+0x1ec>
80204574:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:481
        stack_top = UINTPTR_MAX;
80204578:	9008      	str	r0, [sp, #32]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:482
    }
8020457a:	e7ff      	b.n	8020457c <FaultDump+0x1f4>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:489
    // these are for readability(?), can't be changed without modifying code below
    #define VALUES_PER_LINE 4
    #define BYTES_IN_VALUE 4

    // start printing from aligned address
    const uintptr_t loop_start = stack_point - stack_point % (VALUES_PER_LINE * BYTES_IN_VALUE);
8020457c:	9807      	ldr	r0, [sp, #28]
8020457e:	f020 000f 	bic.w	r0, r0, #15
80204582:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:492

    // Dump uint32 values from SP until stack top or until defined number of lines is printed
    printf("Address  :     3 2 1 0     7 6 5 4     B A 9 8     F E D C       ASCII Data\n");
80204584:	f645 405c 	movw	r0, #23644	@ 0x5c5c
80204588:	f2c8 0020 	movt	r0, #32800	@ 0x8020
8020458c:	f7fc f9e2 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:494
    //      80008010 :    FFEEAABB    CC001133    12345678    1A2B3C4D    ....3...xV".M<+.
    for (uint32_t *p = (uint32_t *)loop_start; p < ((uint32_t *)loop_start + STACK_DUMP_MAX_LINES * VALUES_PER_LINE) && p < (uint32_t *)stack_top; p += VALUES_PER_LINE) {
80204590:	9806      	ldr	r0, [sp, #24]
80204592:	9005      	str	r0, [sp, #20]
80204594:	e7ff      	b.n	80204596 <FaultDump+0x20e>
80204596:	9905      	ldr	r1, [sp, #20]
80204598:	9806      	ldr	r0, [sp, #24]
8020459a:	f500 72a0 	add.w	r2, r0, #320	@ 0x140
8020459e:	2000      	movs	r0, #0
802045a0:	4291      	cmp	r1, r2
802045a2:	9001      	str	r0, [sp, #4]
802045a4:	d207      	bcs.n	802045b6 <FaultDump+0x22e>
802045a6:	e7ff      	b.n	802045a8 <FaultDump+0x220>
802045a8:	9805      	ldr	r0, [sp, #20]
802045aa:	9908      	ldr	r1, [sp, #32]
802045ac:	4288      	cmp	r0, r1
802045ae:	ea5f 902f 			@ <UNDEFINED> instruction: 0xea5f902f
802045b2:	9001      	str	r0, [sp, #4]
802045b4:	e7ff      	b.n	802045b6 <FaultDump+0x22e>
802045b6:	9801      	ldr	r0, [sp, #4]
802045b8:	07c0      	lsls	r0, r0, #31
802045ba:	2800      	cmp	r0, #0
802045bc:	d07c      	beq.n	802046b8 <FaultDump+0x330>
802045be:	e7ff      	b.n	802045c0 <FaultDump+0x238>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:496

        printf("%08" PRIXPTR " :", (uintptr_t)p);
802045c0:	9905      	ldr	r1, [sp, #20]
802045c2:	f645 40e1 	movw	r0, #23777	@ 0x5ce1
802045c6:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802045ca:	f7fc f9c3 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:498
        // print the stack values for 1 line
        for (uint32_t *vp = p; vp < p + VALUES_PER_LINE; vp++) {
802045ce:	9805      	ldr	r0, [sp, #20]
802045d0:	9004      	str	r0, [sp, #16]
802045d2:	e7ff      	b.n	802045d4 <FaultDump+0x24c>
802045d4:	9804      	ldr	r0, [sp, #16]
802045d6:	9905      	ldr	r1, [sp, #20]
802045d8:	3110      	adds	r1, #16
802045da:	4288      	cmp	r0, r1
802045dc:	d21f      	bcs.n	8020461e <FaultDump+0x296>
802045de:	e7ff      	b.n	802045e0 <FaultDump+0x258>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:499
            if (vp >= (uint32_t*)stack_point && vp < (uint32_t*)stack_top) {
802045e0:	9804      	ldr	r0, [sp, #16]
802045e2:	9907      	ldr	r1, [sp, #28]
802045e4:	4288      	cmp	r0, r1
802045e6:	d30e      	bcc.n	80204606 <FaultDump+0x27e>
802045e8:	e7ff      	b.n	802045ea <FaultDump+0x262>
802045ea:	9804      	ldr	r0, [sp, #16]
802045ec:	9908      	ldr	r1, [sp, #32]
802045ee:	4288      	cmp	r0, r1
802045f0:	d209      	bcs.n	80204606 <FaultDump+0x27e>
802045f2:	e7ff      	b.n	802045f4 <FaultDump+0x26c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:500
                printf("    %08" PRIX32, *vp);
802045f4:	9804      	ldr	r0, [sp, #16]
802045f6:	6801      	ldr	r1, [r0, #0]
802045f8:	f645 500f 	movw	r0, #23823	@ 0x5d0f
802045fc:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204600:	f7fc f9a8 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:501
            }
80204604:	e006      	b.n	80204614 <FaultDump+0x28c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:503
            else {
                printf("            ");
80204606:	f645 40b7 	movw	r0, #23735	@ 0x5cb7
8020460a:	f2c8 0020 	movt	r0, #32800	@ 0x8020
8020460e:	f7fc f9a1 	bl	80200954 <printf>
80204612:	e7ff      	b.n	80204614 <FaultDump+0x28c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:505
            }
        }
80204614:	e7ff      	b.n	80204616 <FaultDump+0x28e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:498
        for (uint32_t *vp = p; vp < p + VALUES_PER_LINE; vp++) {
80204616:	9804      	ldr	r0, [sp, #16]
80204618:	3004      	adds	r0, #4
8020461a:	9004      	str	r0, [sp, #16]
8020461c:	e7da      	b.n	802045d4 <FaultDump+0x24c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:506
        printf("    ");
8020461e:	f645 40bf 	movw	r0, #23743	@ 0x5cbf
80204622:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204626:	f7fc f995 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:509

        // print the ascii characters for one line
        for (char *cp = (char *)p; cp < (char *)p + VALUES_PER_LINE * BYTES_IN_VALUE; cp++) {
8020462a:	9805      	ldr	r0, [sp, #20]
8020462c:	9003      	str	r0, [sp, #12]
8020462e:	e7ff      	b.n	80204630 <FaultDump+0x2a8>
80204630:	9803      	ldr	r0, [sp, #12]
80204632:	9905      	ldr	r1, [sp, #20]
80204634:	3110      	adds	r1, #16
80204636:	4288      	cmp	r0, r1
80204638:	d233      	bcs.n	802046a2 <FaultDump+0x31a>
8020463a:	e7ff      	b.n	8020463c <FaultDump+0x2b4>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:510
            if (cp >= (char*)stack_point && cp < (char*)stack_top) {
8020463c:	9803      	ldr	r0, [sp, #12]
8020463e:	9907      	ldr	r1, [sp, #28]
80204640:	4288      	cmp	r0, r1
80204642:	d321      	bcc.n	80204688 <FaultDump+0x300>
80204644:	e7ff      	b.n	80204646 <FaultDump+0x2be>
80204646:	9803      	ldr	r0, [sp, #12]
80204648:	9908      	ldr	r1, [sp, #32]
8020464a:	4288      	cmp	r0, r1
8020464c:	d21c      	bcs.n	80204688 <FaultDump+0x300>
8020464e:	e7ff      	b.n	80204650 <FaultDump+0x2c8>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:512
                // only print printable ascii characters
                if(*cp > 31 && *cp < 127) {
80204650:	9803      	ldr	r0, [sp, #12]
80204652:	7800      	ldrb	r0, [r0, #0]
80204654:	2820      	cmp	r0, #32
80204656:	db0e      	blt.n	80204676 <FaultDump+0x2ee>
80204658:	e7ff      	b.n	8020465a <FaultDump+0x2d2>
8020465a:	9803      	ldr	r0, [sp, #12]
8020465c:	7800      	ldrb	r0, [r0, #0]
8020465e:	287e      	cmp	r0, #126	@ 0x7e
80204660:	dc09      	bgt.n	80204676 <FaultDump+0x2ee>
80204662:	e7ff      	b.n	80204664 <FaultDump+0x2dc>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:513
                    putchar(*cp);
80204664:	9803      	ldr	r0, [sp, #12]
80204666:	7800      	ldrb	r0, [r0, #0]
80204668:	f240 619c 	movw	r1, #1692	@ 0x69c
8020466c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80204670:	f7fc f9ae 	bl	802009d0 <putc>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:514
                }
80204674:	e007      	b.n	80204686 <FaultDump+0x2fe>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:516
                else {
                    putchar('.');
80204676:	f240 619c 	movw	r1, #1692	@ 0x69c
8020467a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
8020467e:	202e      	movs	r0, #46	@ 0x2e
80204680:	f7fc f9a6 	bl	802009d0 <putc>
80204684:	e7ff      	b.n	80204686 <FaultDump+0x2fe>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:518
                }
            }
80204686:	e007      	b.n	80204698 <FaultDump+0x310>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:520
            else {
                putchar(' ');
80204688:	f240 619c 	movw	r1, #1692	@ 0x69c
8020468c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80204690:	2020      	movs	r0, #32
80204692:	f7fc f99d 	bl	802009d0 <putc>
80204696:	e7ff      	b.n	80204698 <FaultDump+0x310>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:522
            }
        }
80204698:	e7ff      	b.n	8020469a <FaultDump+0x312>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:509
        for (char *cp = (char *)p; cp < (char *)p + VALUES_PER_LINE * BYTES_IN_VALUE; cp++) {
8020469a:	9803      	ldr	r0, [sp, #12]
8020469c:	3001      	adds	r0, #1
8020469e:	9003      	str	r0, [sp, #12]
802046a0:	e7c6      	b.n	80204630 <FaultDump+0x2a8>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:523
        printf("\n");
802046a2:	f645 3071 	movw	r0, #23409	@ 0x5b71
802046a6:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802046aa:	f7fc f953 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:524
    }
802046ae:	e7ff      	b.n	802046b0 <FaultDump+0x328>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:494
    for (uint32_t *p = (uint32_t *)loop_start; p < ((uint32_t *)loop_start + STACK_DUMP_MAX_LINES * VALUES_PER_LINE) && p < (uint32_t *)stack_top; p += VALUES_PER_LINE) {
802046b0:	9805      	ldr	r0, [sp, #20]
802046b2:	3010      	adds	r0, #16
802046b4:	9005      	str	r0, [sp, #20]
802046b6:	e76e      	b.n	80204596 <FaultDump+0x20e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:526

    for (;;) {
802046b8:	e7ff      	b.n	802046ba <FaultDump+0x332>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:527
        __WFE();
802046ba:	bf20      	wfe
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:526
    for (;;) {
802046bc:	e7fd      	b.n	802046ba <FaultDump+0x332>
802046be:	bf00      	nop

802046c0 <JumpToDump>:
JumpToDump():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:380
{
802046c0:	b082      	sub	sp, #8
802046c2:	9001      	str	r0, [sp, #4]
802046c4:	9100      	str	r1, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:382
          "BX    %1" :: "r"(sp), "r"(exc_return));
802046c6:	9800      	ldr	r0, [sp, #0]
802046c8:	9901      	ldr	r1, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:381
    __asm("MOV   SP, %0\n\t" // sp parameter to SP
802046ca:	4685      	mov	sp, r0
802046cc:	4708      	bx	r1
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:383
}
802046ce:	b002      	add	sp, #8
802046d0:	4770      	bx	lr
802046d2:	bf00      	nop

802046d4 <print_usagefault>:
print_usagefault():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:236
{
802046d4:	b580      	push	{r7, lr}
802046d6:	b082      	sub	sp, #8
802046d8:	f64e 502a 	movw	r0, #60714	@ 0xed2a
802046dc:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:237
     uint32_t ufsr = UFSR;
802046e0:	8800      	ldrh	r0, [r0, #0]
802046e2:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:238
     if (ufsr == 0) {
802046e4:	9801      	ldr	r0, [sp, #4]
802046e6:	b908      	cbnz	r0, 802046ec <print_usagefault+0x18>
802046e8:	e7ff      	b.n	802046ea <print_usagefault+0x16>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:239
         return;
802046ea:	e014      	b.n	80204716 <print_usagefault+0x42>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:241
     printf("UFSR  = %04" PRIX32, ufsr);
802046ec:	9901      	ldr	r1, [sp, #4]
802046ee:	f645 5002 	movw	r0, #23810	@ 0x5d02
802046f2:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802046f6:	f7fc f92d 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:242
     print_fsrbits(ufsr, ufsr_bits);
802046fa:	9801      	ldr	r0, [sp, #4]
802046fc:	f245 71b4 	movw	r1, #22452	@ 0x57b4
80204700:	f2c8 0120 	movt	r1, #32800	@ 0x8020
80204704:	f000 f8fa 	bl	802048fc <print_fsrbits>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:243
     UFSR = ufsr;
80204708:	9801      	ldr	r0, [sp, #4]
8020470a:	f64e 512a 	movw	r1, #60714	@ 0xed2a
8020470e:	f2ce 0100 	movt	r1, #57344	@ 0xe000
80204712:	8008      	strh	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:244
}
80204714:	e7ff      	b.n	80204716 <print_usagefault+0x42>
80204716:	b002      	add	sp, #8
80204718:	bd80      	pop	{r7, pc}
8020471a:	bf00      	nop

8020471c <print_memmanage>:
print_memmanage():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:199
{
8020471c:	b580      	push	{r7, lr}
8020471e:	b082      	sub	sp, #8
80204720:	f64e 5028 	movw	r0, #60712	@ 0xed28
80204724:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:200
     uint32_t mmfsr = MMFSR;
80204728:	7800      	ldrb	r0, [r0, #0]
8020472a:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:201
     if (mmfsr == 0) {
8020472c:	9801      	ldr	r0, [sp, #4]
8020472e:	b908      	cbnz	r0, 80204734 <print_memmanage+0x18>
80204730:	e7ff      	b.n	80204732 <print_memmanage+0x16>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:202
         return;
80204732:	e026      	b.n	80204782 <print_memmanage+0x66>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:204
     printf("MMFSR = %02" PRIX32, mmfsr);
80204734:	9901      	ldr	r1, [sp, #4]
80204736:	f645 40f5 	movw	r0, #23797	@ 0x5cf5
8020473a:	f2c8 0020 	movt	r0, #32800	@ 0x8020
8020473e:	f7fc f909 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:205
     print_fsrbits(mmfsr, mmfsr_bits);
80204742:	9801      	ldr	r0, [sp, #4]
80204744:	f245 71ef 	movw	r1, #22511	@ 0x57ef
80204748:	f2c8 0120 	movt	r1, #32800	@ 0x8020
8020474c:	f000 f8d6 	bl	802048fc <print_fsrbits>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:206
     if (mmfsr & 0x80) {
80204750:	f89d 0004 	ldrb.w	r0, [sp, #4]
80204754:	0600      	lsls	r0, r0, #24
80204756:	2800      	cmp	r0, #0
80204758:	d50c      	bpl.n	80204774 <print_memmanage+0x58>
8020475a:	e7ff      	b.n	8020475c <print_memmanage+0x40>
8020475c:	f64e 5034 	movw	r0, #60724	@ 0xed34
80204760:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:207
        printf("MMFAR = %08" PRIX32 "\n", SCB->MMFAR);
80204764:	6801      	ldr	r1, [r0, #0]
80204766:	f645 4042 	movw	r0, #23618	@ 0x5c42
8020476a:	f2c8 0020 	movt	r0, #32800	@ 0x8020
8020476e:	f7fc f8f1 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:208
     }
80204772:	e7ff      	b.n	80204774 <print_memmanage+0x58>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:209
     MMFSR = mmfsr;
80204774:	9801      	ldr	r0, [sp, #4]
80204776:	f64e 5128 	movw	r1, #60712	@ 0xed28
8020477a:	f2ce 0100 	movt	r1, #57344	@ 0xe000
8020477e:	7008      	strb	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:210
}
80204780:	e7ff      	b.n	80204782 <print_memmanage+0x66>
80204782:	b002      	add	sp, #8
80204784:	bd80      	pop	{r7, pc}
80204786:	bf00      	nop

80204788 <print_busfault>:
print_busfault():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:214
{
80204788:	b580      	push	{r7, lr}
8020478a:	b084      	sub	sp, #16
8020478c:	f64e 5029 	movw	r0, #60713	@ 0xed29
80204790:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:215
     uint32_t bfsr = BFSR;
80204794:	7800      	ldrb	r0, [r0, #0]
80204796:	9003      	str	r0, [sp, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:216
     if (bfsr == 0) {
80204798:	9803      	ldr	r0, [sp, #12]
8020479a:	b908      	cbnz	r0, 802047a0 <print_busfault+0x18>
8020479c:	e7ff      	b.n	8020479e <print_busfault+0x16>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:217
         return;
8020479e:	e03e      	b.n	8020481e <print_busfault+0x96>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:219
     printf("BFSR  = %02" PRIX32, bfsr);
802047a0:	9903      	ldr	r1, [sp, #12]
802047a2:	f645 40e8 	movw	r0, #23784	@ 0x5ce8
802047a6:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802047aa:	f7fc f8d3 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:220
     print_fsrbits(bfsr, bfsr_bits);
802047ae:	9803      	ldr	r0, [sp, #12]
802047b0:	f645 0127 	movw	r1, #22567	@ 0x5827
802047b4:	f2c8 0120 	movt	r1, #32800	@ 0x8020
802047b8:	f000 f8a0 	bl	802048fc <print_fsrbits>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:221
     if (bfsr & 0x80) {
802047bc:	f89d 000c 	ldrb.w	r0, [sp, #12]
802047c0:	0600      	lsls	r0, r0, #24
802047c2:	2800      	cmp	r0, #0
802047c4:	d50c      	bpl.n	802047e0 <print_busfault+0x58>
802047c6:	e7ff      	b.n	802047c8 <print_busfault+0x40>
802047c8:	f64e 5038 	movw	r0, #60728	@ 0xed38
802047cc:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:222
        printf("BFAR  = %08" PRIX32 "\n", SCB->BFAR);
802047d0:	6801      	ldr	r1, [r0, #0]
802047d2:	f645 4034 	movw	r0, #23604	@ 0x5c34
802047d6:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802047da:	f7fc f8bb 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:223
     }
802047de:	e7ff      	b.n	802047e0 <print_busfault+0x58>
802047e0:	f64e 503c 	movw	r0, #60732	@ 0xed3c
802047e4:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:225
     uint32_t afsr = SCB->AFSR;
802047e8:	9001      	str	r0, [sp, #4]
802047ea:	6800      	ldr	r0, [r0, #0]
802047ec:	9002      	str	r0, [sp, #8]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:226
     printf("AFSR  = %08" PRIX32, afsr);
802047ee:	9902      	ldr	r1, [sp, #8]
802047f0:	f645 5018 	movw	r0, #23832	@ 0x5d18
802047f4:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802047f8:	f7fc f8ac 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:228
     print_fsrbits(afsr, afsr_bits);
802047fc:	9802      	ldr	r0, [sp, #8]
802047fe:	f645 0168 	movw	r1, #22632	@ 0x5868
80204802:	f2c8 0120 	movt	r1, #32800	@ 0x8020
80204806:	f000 f879 	bl	802048fc <print_fsrbits>
8020480a:	9901      	ldr	r1, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:229
     SCB->AFSR = afsr;
8020480c:	9802      	ldr	r0, [sp, #8]
8020480e:	6008      	str	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:231
     BFSR = bfsr;
80204810:	9803      	ldr	r0, [sp, #12]
80204812:	f64e 5129 	movw	r1, #60713	@ 0xed29
80204816:	f2ce 0100 	movt	r1, #57344	@ 0xe000
8020481a:	7008      	strb	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:232
}
8020481c:	e7ff      	b.n	8020481e <print_busfault+0x96>
8020481e:	b004      	add	sp, #16
80204820:	bd80      	pop	{r7, pc}
80204822:	bf00      	nop

80204824 <print_securefault>:
print_securefault():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:260
{
80204824:	b580      	push	{r7, lr}
80204826:	b082      	sub	sp, #8
80204828:	f64e 50e4 	movw	r0, #60900	@ 0xede4
8020482c:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:261
     uint32_t sfsr = SCB->SFSR;
80204830:	6800      	ldr	r0, [r0, #0]
80204832:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:262
     if (sfsr == 0) {
80204834:	9801      	ldr	r0, [sp, #4]
80204836:	b908      	cbnz	r0, 8020483c <print_securefault+0x18>
80204838:	e7ff      	b.n	8020483a <print_securefault+0x16>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:263
         return;
8020483a:	e014      	b.n	80204866 <print_securefault+0x42>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:265
     printf("SFSR  = %08" PRIX32, sfsr);
8020483c:	9901      	ldr	r1, [sp, #4]
8020483e:	f645 503f 	movw	r0, #23871	@ 0x5d3f
80204842:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204846:	f7fc f885 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:266
     print_fsrbits(sfsr, sfsr_bits);
8020484a:	9801      	ldr	r0, [sp, #4]
8020484c:	f645 1122 	movw	r1, #22818	@ 0x5922
80204850:	f2c8 0120 	movt	r1, #32800	@ 0x8020
80204854:	f000 f852 	bl	802048fc <print_fsrbits>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:267
     SCB->SFSR = sfsr;
80204858:	9801      	ldr	r0, [sp, #4]
8020485a:	f64e 51e4 	movw	r1, #60900	@ 0xede4
8020485e:	f2ce 0100 	movt	r1, #57344	@ 0xe000
80204862:	6008      	str	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:268
}
80204864:	e7ff      	b.n	80204866 <print_securefault+0x42>
80204866:	b002      	add	sp, #8
80204868:	bd80      	pop	{r7, pc}
8020486a:	bf00      	nop

8020486c <print_debugfault>:
print_debugfault():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:272
{
8020486c:	b580      	push	{r7, lr}
8020486e:	b082      	sub	sp, #8
80204870:	f64e 5030 	movw	r0, #60720	@ 0xed30
80204874:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:273
     uint32_t dfsr = SCB->DFSR;
80204878:	6800      	ldr	r0, [r0, #0]
8020487a:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:274
     if (dfsr == 0) {
8020487c:	9801      	ldr	r0, [sp, #4]
8020487e:	b908      	cbnz	r0, 80204884 <print_debugfault+0x18>
80204880:	e7ff      	b.n	80204882 <print_debugfault+0x16>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:275
         return;
80204882:	e014      	b.n	802048ae <print_debugfault+0x42>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:277
     printf("DFSR  = %08" PRIX32, dfsr);
80204884:	9901      	ldr	r1, [sp, #4]
80204886:	f645 5025 	movw	r0, #23845	@ 0x5d25
8020488a:	f2c8 0020 	movt	r0, #32800	@ 0x8020
8020488e:	f7fc f861 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:278
     print_fsrbits(dfsr, dfsr_bits);
80204892:	9801      	ldr	r0, [sp, #4]
80204894:	f645 115c 	movw	r1, #22876	@ 0x595c
80204898:	f2c8 0120 	movt	r1, #32800	@ 0x8020
8020489c:	f000 f82e 	bl	802048fc <print_fsrbits>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:279
     SCB->DFSR = dfsr;
802048a0:	9801      	ldr	r0, [sp, #4]
802048a2:	f64e 5130 	movw	r1, #60720	@ 0xed30
802048a6:	f2ce 0100 	movt	r1, #57344	@ 0xe000
802048aa:	6008      	str	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:280
}
802048ac:	e7ff      	b.n	802048ae <print_debugfault+0x42>
802048ae:	b002      	add	sp, #8
802048b0:	bd80      	pop	{r7, pc}
802048b2:	bf00      	nop

802048b4 <print_hardfault>:
print_hardfault():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:248
{
802048b4:	b580      	push	{r7, lr}
802048b6:	b082      	sub	sp, #8
802048b8:	f64e 502c 	movw	r0, #60716	@ 0xed2c
802048bc:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:249
     uint32_t hfsr = SCB->HFSR;
802048c0:	6800      	ldr	r0, [r0, #0]
802048c2:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:250
     if (hfsr == 0) {
802048c4:	9801      	ldr	r0, [sp, #4]
802048c6:	b908      	cbnz	r0, 802048cc <print_hardfault+0x18>
802048c8:	e7ff      	b.n	802048ca <print_hardfault+0x16>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:251
         return;
802048ca:	e014      	b.n	802048f6 <print_hardfault+0x42>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:253
     printf("HFSR  = %08" PRIX32, hfsr);
802048cc:	9901      	ldr	r1, [sp, #4]
802048ce:	f645 5032 	movw	r0, #23858	@ 0x5d32
802048d2:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802048d6:	f7fc f83d 	bl	80200954 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:254
     print_fsrbits(hfsr, hfsr_bits);
802048da:	9801      	ldr	r0, [sp, #4]
802048dc:	f645 1186 	movw	r1, #22918	@ 0x5986
802048e0:	f2c8 0120 	movt	r1, #32800	@ 0x8020
802048e4:	f000 f80a 	bl	802048fc <print_fsrbits>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:255
     SCB->HFSR = hfsr;
802048e8:	9801      	ldr	r0, [sp, #4]
802048ea:	f64e 512c 	movw	r1, #60716	@ 0xed2c
802048ee:	f2ce 0100 	movt	r1, #57344	@ 0xe000
802048f2:	6008      	str	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:256
}
802048f4:	e7ff      	b.n	802048f6 <print_hardfault+0x42>
802048f6:	b002      	add	sp, #8
802048f8:	bd80      	pop	{r7, pc}
802048fa:	bf00      	nop

802048fc <print_fsrbits>:
print_fsrbits():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:177
{
802048fc:	b580      	push	{r7, lr}
802048fe:	b086      	sub	sp, #24
80204900:	9005      	str	r0, [sp, #20]
80204902:	9104      	str	r1, [sp, #16]
80204904:	2001      	movs	r0, #1
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:178
     bool first = true;
80204906:	f88d 000f 	strb.w	r0, [sp, #15]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:180
     while (val != 0 && *bitnames != ' ') {
8020490a:	e7ff      	b.n	8020490c <print_fsrbits+0x10>
8020490c:	9905      	ldr	r1, [sp, #20]
8020490e:	2000      	movs	r0, #0
80204910:	9000      	str	r0, [sp, #0]
80204912:	b139      	cbz	r1, 80204924 <print_fsrbits+0x28>
80204914:	e7ff      	b.n	80204916 <print_fsrbits+0x1a>
80204916:	9804      	ldr	r0, [sp, #16]
80204918:	7800      	ldrb	r0, [r0, #0]
8020491a:	2820      	cmp	r0, #32
8020491c:	ea5f 900f 			@ <UNDEFINED> instruction: 0xea5f900f
80204920:	9000      	str	r0, [sp, #0]
80204922:	e7ff      	b.n	80204924 <print_fsrbits+0x28>
80204924:	9800      	ldr	r0, [sp, #0]
80204926:	07c0      	lsls	r0, r0, #31
80204928:	b3e0      	cbz	r0, 802049a4 <print_fsrbits+0xa8>
8020492a:	e7ff      	b.n	8020492c <print_fsrbits+0x30>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:181
         int bit = *bitnames++;
8020492c:	9804      	ldr	r0, [sp, #16]
8020492e:	1c41      	adds	r1, r0, #1
80204930:	9104      	str	r1, [sp, #16]
80204932:	7800      	ldrb	r0, [r0, #0]
80204934:	9002      	str	r0, [sp, #8]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:182
         const char *next_bitname = bitnames;
80204936:	9804      	ldr	r0, [sp, #16]
80204938:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:183
         while (*next_bitname > ' ') {
8020493a:	e7ff      	b.n	8020493c <print_fsrbits+0x40>
8020493c:	9801      	ldr	r0, [sp, #4]
8020493e:	7800      	ldrb	r0, [r0, #0]
80204940:	2821      	cmp	r0, #33	@ 0x21
80204942:	db04      	blt.n	8020494e <print_fsrbits+0x52>
80204944:	e7ff      	b.n	80204946 <print_fsrbits+0x4a>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:184
             next_bitname++;
80204946:	9801      	ldr	r0, [sp, #4]
80204948:	3001      	adds	r0, #1
8020494a:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:183
         while (*next_bitname > ' ') {
8020494c:	e7f6      	b.n	8020493c <print_fsrbits+0x40>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:186
         if (val & (1U << bit)) {
8020494e:	9805      	ldr	r0, [sp, #20]
80204950:	9902      	ldr	r1, [sp, #8]
80204952:	40c8      	lsrs	r0, r1
80204954:	07c0      	lsls	r0, r0, #31
80204956:	b310      	cbz	r0, 8020499e <print_fsrbits+0xa2>
80204958:	e7ff      	b.n	8020495a <print_fsrbits+0x5e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:187
             val &=~ (1U << bit);
8020495a:	9902      	ldr	r1, [sp, #8]
8020495c:	2001      	movs	r0, #1
8020495e:	fa00 f101 	lsl.w	r1, r0, r1
80204962:	9805      	ldr	r0, [sp, #20]
80204964:	4388      	bics	r0, r1
80204966:	9005      	str	r0, [sp, #20]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:188
             printf("%s%.*s", first ? " (" : ", ", next_bitname - bitnames, bitnames);
80204968:	f89d 000f 	ldrb.w	r0, [sp, #15]
8020496c:	07c2      	lsls	r2, r0, #31
8020496e:	f645 40dc 	movw	r0, #23772	@ 0x5cdc
80204972:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204976:	f645 41c4 	movw	r1, #23748	@ 0x5cc4
8020497a:	f2c8 0120 	movt	r1, #32800	@ 0x8020
8020497e:	2a00      	cmp	r2, #0
80204980:	bf18      	it	ne
80204982:	4601      	movne	r1, r0
80204984:	9801      	ldr	r0, [sp, #4]
80204986:	9b04      	ldr	r3, [sp, #16]
80204988:	1ac2      	subs	r2, r0, r3
8020498a:	f645 5080 	movw	r0, #23936	@ 0x5d80
8020498e:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204992:	f7fb ffdf 	bl	80200954 <printf>
80204996:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:189
             first = false;
80204998:	f88d 000f 	strb.w	r0, [sp, #15]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:190
         }
8020499c:	e7ff      	b.n	8020499e <print_fsrbits+0xa2>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:191
         bitnames = next_bitname;
8020499e:	9801      	ldr	r0, [sp, #4]
802049a0:	9004      	str	r0, [sp, #16]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:180
     while (val != 0 && *bitnames != ' ') {
802049a2:	e7b3      	b.n	8020490c <print_fsrbits+0x10>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:194
     puts(first ? "" : ")");
802049a4:	f89d 000f 	ldrb.w	r0, [sp, #15]
802049a8:	07c2      	lsls	r2, r0, #31
802049aa:	f645 51b0 	movw	r1, #23984	@ 0x5db0
802049ae:	f2c8 0120 	movt	r1, #32800	@ 0x8020
802049b2:	f645 40df 	movw	r0, #23775	@ 0x5cdf
802049b6:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802049ba:	2a00      	cmp	r2, #0
802049bc:	bf18      	it	ne
802049be:	4608      	movne	r0, r1
802049c0:	f7fc f808 	bl	802009d4 <puts>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:195
}
802049c4:	b006      	add	sp, #24
802049c6:	bd80      	pop	{r7, pc}

802049c8 <CommonAsmFaultHandler>:
CommonAsmFaultHandler():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:363
    __asm("LDR   R1, =regs+4*4\n\t"
802049c8:	490a      	ldr	r1, [pc, #40]	@ (802049f4 <CommonAsmFaultHandler+0x2c>)
802049ca:	e881 0ff0 	stmia.w	r1, {r4, r5, r6, r7, r8, r9, sl, fp}
802049ce:	f01e 0f04 	tst.w	lr, #4
802049d2:	bf07      	ittee	eq
802049d4:	4669      	moveq	r1, sp
802049d6:	f3ef 830a 	mrseq	r3, MSPLIM
802049da:	f3ef 8109 	mrsne	r1, PSP
802049de:	f3ef 830b 	mrsne	r3, PSPLIM
802049e2:	4672      	mov	r2, lr
802049e4:	f8df d010 	ldr.w	sp, [pc, #16]	@ 802049f8 <CommonAsmFaultHandler+0x30>
802049e8:	4c04      	ldr	r4, [pc, #16]	@ (802049fc <CommonAsmFaultHandler+0x34>)
802049ea:	f384 880a 	msr	MSPLIM, r4
802049ee:	f000 b807 	b.w	80204a00 <CommonFaultHandler>
802049f2:	0000      	movs	r0, r0
802049f4:	20000c80 	.word	0x20000c80
802049f8:	20001c98 	.word	0x20001c98
802049fc:	20000cb8 	.word	0x20000cb8

80204a00 <CommonFaultHandler>:
CommonFaultHandler():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:388
{
80204a00:	b580      	push	{r7, lr}
80204a02:	b088      	sub	sp, #32
80204a04:	9007      	str	r0, [sp, #28]
80204a06:	9106      	str	r1, [sp, #24]
80204a08:	9205      	str	r2, [sp, #20]
80204a0a:	9304      	str	r3, [sp, #16]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:389
    if (!fault_dump_enabled) {
80204a0c:	f640 4060 	movw	r0, #3168	@ 0xc60
80204a10:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204a14:	7800      	ldrb	r0, [r0, #0]
80204a16:	07c0      	lsls	r0, r0, #31
80204a18:	b918      	cbnz	r0, 80204a22 <CommonFaultHandler+0x22>
80204a1a:	e7ff      	b.n	80204a1c <CommonFaultHandler+0x1c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:390
        while (1) {
80204a1c:	e7ff      	b.n	80204a1e <CommonFaultHandler+0x1e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:391
            __WFE();
80204a1e:	bf20      	wfe
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:390
        while (1) {
80204a20:	e7fd      	b.n	80204a1e <CommonFaultHandler+0x1e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:396
    fault_dump_enabled = false;
80204a22:	f640 4160 	movw	r1, #3168	@ 0xc60
80204a26:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80204a2a:	2000      	movs	r0, #0
80204a2c:	7008      	strb	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:399
    fault_handler_active = true;
80204a2e:	f640 4161 	movw	r1, #3169	@ 0xc61
80204a32:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80204a36:	2001      	movs	r0, #1
80204a38:	7008      	strb	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:401
    exc_return = lr;
80204a3a:	9805      	ldr	r0, [sp, #20]
80204a3c:	f640 4168 	movw	r1, #3176	@ 0xc68
80204a40:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80204a44:	6008      	str	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:402
    fault_type = type;
80204a46:	9807      	ldr	r0, [sp, #28]
80204a48:	f640 416c 	movw	r1, #3180	@ 0xc6c
80204a4c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80204a50:	6008      	str	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:403
    uint32_t retpsr = sp[7];
80204a52:	9806      	ldr	r0, [sp, #24]
80204a54:	69c0      	ldr	r0, [r0, #28]
80204a56:	9003      	str	r0, [sp, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:406
    regs[0] = sp[0];
80204a58:	9806      	ldr	r0, [sp, #24]
80204a5a:	6800      	ldr	r0, [r0, #0]
80204a5c:	f640 4170 	movw	r1, #3184	@ 0xc70
80204a60:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80204a64:	6008      	str	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:407
    regs[1] = sp[1];
80204a66:	9806      	ldr	r0, [sp, #24]
80204a68:	6840      	ldr	r0, [r0, #4]
80204a6a:	6048      	str	r0, [r1, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:408
    regs[2] = sp[2];
80204a6c:	9806      	ldr	r0, [sp, #24]
80204a6e:	6880      	ldr	r0, [r0, #8]
80204a70:	6088      	str	r0, [r1, #8]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:409
    regs[3] = sp[3];
80204a72:	9806      	ldr	r0, [sp, #24]
80204a74:	68c0      	ldr	r0, [r0, #12]
80204a76:	60c8      	str	r0, [r1, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:410
    regs[12] = sp[4];
80204a78:	9806      	ldr	r0, [sp, #24]
80204a7a:	6900      	ldr	r0, [r0, #16]
80204a7c:	6308      	str	r0, [r1, #48]	@ 0x30
80204a7e:	f64e 502a 	movw	r0, #60714	@ 0xed2a
80204a82:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:413
    if((UFSR & 0x10) && sp == orig_splim) {
80204a86:	8800      	ldrh	r0, [r0, #0]
80204a88:	06c0      	lsls	r0, r0, #27
80204a8a:	2800      	cmp	r0, #0
80204a8c:	d50e      	bpl.n	80204aac <CommonFaultHandler+0xac>
80204a8e:	e7ff      	b.n	80204a90 <CommonFaultHandler+0x90>
80204a90:	9806      	ldr	r0, [sp, #24]
80204a92:	9904      	ldr	r1, [sp, #16]
80204a94:	4288      	cmp	r0, r1
80204a96:	d109      	bne.n	80204aac <CommonFaultHandler+0xac>
80204a98:	e7ff      	b.n	80204a9a <CommonFaultHandler+0x9a>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:414
        regs[13] = (uint32_t)sp;
80204a9a:	9806      	ldr	r0, [sp, #24]
80204a9c:	f640 4170 	movw	r1, #3184	@ 0xc70
80204aa0:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80204aa4:	6348      	str	r0, [r1, #52]	@ 0x34
80204aa6:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:415
        retpsr = 0;  // can't trust that stack frame contains sane values as this is stack overflow fault
80204aa8:	9003      	str	r0, [sp, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:416
    }
80204aaa:	e017      	b.n	80204adc <CommonFaultHandler+0xdc>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:418
        regs[13] = (uint32_t)sp + (exc_return & 0x10 ? 0x20 : 0x68) + (retpsr & 0x200 ? 4 : 0);
80204aac:	9806      	ldr	r0, [sp, #24]
80204aae:	f640 4168 	movw	r1, #3176	@ 0xc68
80204ab2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80204ab6:	6809      	ldr	r1, [r1, #0]
80204ab8:	06ca      	lsls	r2, r1, #27
80204aba:	2168      	movs	r1, #104	@ 0x68
80204abc:	2a00      	cmp	r2, #0
80204abe:	bf48      	it	mi
80204ac0:	2120      	movmi	r1, #32
80204ac2:	4408      	add	r0, r1
80204ac4:	9a03      	ldr	r2, [sp, #12]
80204ac6:	1d01      	adds	r1, r0, #4
80204ac8:	0592      	lsls	r2, r2, #22
80204aca:	2a00      	cmp	r2, #0
80204acc:	bf48      	it	mi
80204ace:	4608      	movmi	r0, r1
80204ad0:	f640 4170 	movw	r1, #3184	@ 0xc70
80204ad4:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80204ad8:	6348      	str	r0, [r1, #52]	@ 0x34
80204ada:	e7ff      	b.n	80204adc <CommonFaultHandler+0xdc>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:420
    regs[14] = sp[5];
80204adc:	9806      	ldr	r0, [sp, #24]
80204ade:	6940      	ldr	r0, [r0, #20]
80204ae0:	f640 4170 	movw	r1, #3184	@ 0xc70
80204ae4:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80204ae8:	6388      	str	r0, [r1, #56]	@ 0x38
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:421
    regs[15] = sp[6];
80204aea:	9806      	ldr	r0, [sp, #24]
80204aec:	6980      	ldr	r0, [r0, #24]
80204aee:	63c8      	str	r0, [r1, #60]	@ 0x3c
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:422
    regs[16] = sp[7];
80204af0:	9806      	ldr	r0, [sp, #24]
80204af2:	69c0      	ldr	r0, [r0, #28]
80204af4:	6408      	str	r0, [r1, #64]	@ 0x40
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:425
    fault_stack[FAULT_STACK_WORDS-1] = (1 << 24) | (retpsr & 0x1FF); // RETPSR, only set T32 state and exception state
80204af6:	9903      	ldr	r1, [sp, #12]
80204af8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
80204afc:	f360 215f 	bfi	r1, r0, #9, #23
80204b00:	f640 40b8 	movw	r0, #3256	@ 0xcb8
80204b04:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204b08:	f8c0 13fc 	str.w	r1, [r0, #1020]	@ 0x3fc
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:426
    fault_stack[FAULT_STACK_WORDS-2] = (uint32_t) FaultDump;  // Return Address, this is where EXC_RETURN will return to later on
80204b0c:	f244 3189 	movw	r1, #17289	@ 0x4389
80204b10:	f2c8 0120 	movt	r1, #32800	@ 0x8020
80204b14:	f8c0 13f8 	str.w	r1, [r0, #1016]	@ 0x3f8
80204b18:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
80204b1c:	f6ce 71ff 	movt	r1, #61439	@ 0xefff
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:427
    fault_stack[FAULT_STACK_WORDS-3] = 0xEFFFFFFE;  // LR, deliberately set to 'illegal' execution address as we're not expecting FaultDump to return
80204b20:	f8c0 13f4 	str.w	r1, [r0, #1012]	@ 0x3f4
80204b24:	2100      	movs	r1, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:428
    fault_stack[FAULT_STACK_WORDS-4] = 0;  // R12
80204b26:	f8c0 13f0 	str.w	r1, [r0, #1008]	@ 0x3f0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:429
    fault_stack[FAULT_STACK_WORDS-5] = 0;  // R3
80204b2a:	f8c0 13ec 	str.w	r1, [r0, #1004]	@ 0x3ec
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:430
    fault_stack[FAULT_STACK_WORDS-6] = 0;  // R2
80204b2e:	f8c0 13e8 	str.w	r1, [r0, #1000]	@ 0x3e8
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:431
    fault_stack[FAULT_STACK_WORDS-7] = 0;  // R1
80204b32:	f8c0 13e4 	str.w	r1, [r0, #996]	@ 0x3e4
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:432
    fault_stack[FAULT_STACK_WORDS-8] = 0;  // R0
80204b36:	f8c0 13e0 	str.w	r1, [r0, #992]	@ 0x3e0
80204b3a:	f500 7078 	add.w	r0, r0, #992	@ 0x3e0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:438
    uint32_t new_exc_return = exc_return | 0x10;
80204b3e:	f640 4168 	movw	r1, #3176	@ 0xc68
80204b42:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80204b46:	6809      	ldr	r1, [r1, #0]
80204b48:	f041 0110 	orr.w	r1, r1, #16
80204b4c:	9102      	str	r1, [sp, #8]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:439
    uint32_t* new_sp = fault_stack + FAULT_STACK_WORDS - 8;
80204b4e:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:441
    JumpToDump(new_exc_return, new_sp);
80204b50:	9802      	ldr	r0, [sp, #8]
80204b52:	9901      	ldr	r1, [sp, #4]
80204b54:	f7ff fdb4 	bl	802046c0 <JumpToDump>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/rtc_ac6/libs/common_app_utils/fault_handler/fault_handler.c:442
}
80204b58:	b008      	add	sp, #32
80204b5a:	bd80      	pop	{r7, pc}

80204b5c <sys_busy_loop_init>:
sys_busy_loop_init():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:86
  \fn          void sys_busy_loop_init(void)
  \brief       Initialize the S32K Counter Module to use as busy loop
  \return      none
*/
void sys_busy_loop_init(void)
{
80204b5c:	f04f 51d2 	mov.w	r1, #440401920	@ 0x1a400000
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:87
    S32K_CNTControl->CNTCR |= CNTCR_EN;
80204b60:	6808      	ldr	r0, [r1, #0]
80204b62:	f040 0001 	orr.w	r0, r0, #1
80204b66:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:88
}
80204b68:	4770      	bx	lr
	...

80204b6c <uart_disable_rx_irq>:
uart_disable_rx_irq():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:640
 * @note    none
 * @param   uart    : Pointer to uart register set structure
 * @retval  none
 */
static inline void uart_disable_rx_irq (UART_Type *uart)
{
80204b6c:	b081      	sub	sp, #4
80204b6e:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:644
    /* disable receiver interrupt */
    /* disable receive_data_available_interrupt bit in
     * ier interrupt enable register */
    uart->UART_IER &= ~UART_IER_ENABLE_RECEIVED_DATA_AVAILABLE;
80204b70:	9900      	ldr	r1, [sp, #0]
80204b72:	6848      	ldr	r0, [r1, #4]
80204b74:	f020 0001 	bic.w	r0, r0, #1
80204b78:	6048      	str	r0, [r1, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:647

    /* also disable receiver line status interrupt. */
    uart->UART_IER &= ~UART_IER_ENABLE_RECEIVER_LINE_STATUS;
80204b7a:	9900      	ldr	r1, [sp, #0]
80204b7c:	6848      	ldr	r0, [r1, #4]
80204b7e:	f020 0004 	bic.w	r0, r0, #4
80204b82:	6048      	str	r0, [r1, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:648
}
80204b84:	b001      	add	sp, #4
80204b86:	4770      	bx	lr

80204b88 <uart_disable_tx_irq>:
uart_disable_tx_irq():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:608
{
80204b88:	b081      	sub	sp, #4
80204b8a:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:611
    uart->UART_IER &= ~UART_IER_ENABLE_TRANSMIT_HOLD_REG_EMPTY;
80204b8c:	9900      	ldr	r1, [sp, #0]
80204b8e:	6848      	ldr	r0, [r1, #4]
80204b90:	f020 0002 	bic.w	r0, r0, #2
80204b94:	6048      	str	r0, [r1, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:612
}
80204b96:	b001      	add	sp, #4
80204b98:	4770      	bx	lr
	...

80204b9c <uart_get_rx_fifo_available_count>:
uart_get_rx_fifo_available_count():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:94
 * @note    useful in interrupt callback
 * @param   uart: Pointer to uart register set structure
 * @retval  available receive fifo count
 */
static inline int32_t uart_get_rx_fifo_available_count (UART_Type *uart)
{
80204b9c:	b081      	sub	sp, #4
80204b9e:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:96
    /* read rfl receive FIFO level register */
    return (uart->UART_RFL);
80204ba0:	9800      	ldr	r0, [sp, #0]
80204ba2:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
80204ba6:	b001      	add	sp, #4
80204ba8:	4770      	bx	lr
	...

80204bac <uart_get_tx_fifo_available_count>:
uart_get_tx_fifo_available_count():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:79
{
80204bac:	b081      	sub	sp, #4
80204bae:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:83
    return (UART_FIFO_DEPTH - uart->UART_TFL);
80204bb0:	9800      	ldr	r0, [sp, #0]
80204bb2:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
80204bb6:	f1c0 0020 	rsb	r0, r0, #32
80204bba:	b001      	add	sp, #4
80204bbc:	4770      	bx	lr
	...

80204bc0 <uart_irq_handler>:
uart_irq_handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:361
 * @param   uart     : Pointer to uart register set structure
 * @param   transfer : Pointer to uart transfer structure
 * @retval  none
 */
void uart_irq_handler (UART_Type *uart, UART_TRANSFER *transfer)
{
80204bc0:	b580      	push	{r7, lr}
80204bc2:	b08a      	sub	sp, #40	@ 0x28
80204bc4:	9009      	str	r0, [sp, #36]	@ 0x24
80204bc6:	9108      	str	r1, [sp, #32]
80204bc8:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:362
    uint32_t uart_int_status        = 0U;   /* uart interrupt status    */
80204bca:	9007      	str	r0, [sp, #28]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:363
    uint32_t rx_line_status         = 0U;   /* uart rx line status      */
80204bcc:	9006      	str	r0, [sp, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:364
    uint32_t tx_fifo_available_cnt  = 0U;   /* TX fifo Available count. */
80204bce:	9005      	str	r0, [sp, #20]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:365
    uint32_t rx_fifo_available_cnt  = 0U;   /* RX fifo Available count. */
80204bd0:	9004      	str	r0, [sp, #16]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:366
    uint32_t i = 0U;
80204bd2:	9003      	str	r0, [sp, #12]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:369

    /* get uart interrupt status from iir interrupt identity register */
    uart_int_status = (uart->UART_IIR) & UART_IIR_INTERRUPT_ID_MASK;
80204bd4:	9809      	ldr	r0, [sp, #36]	@ 0x24
80204bd6:	6880      	ldr	r0, [r0, #8]
80204bd8:	f000 000f 	and.w	r0, r0, #15
80204bdc:	9007      	str	r0, [sp, #28]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:371

    switch (uart_int_status)
80204bde:	9807      	ldr	r0, [sp, #28]
80204be0:	9002      	str	r0, [sp, #8]
80204be2:	280c      	cmp	r0, #12
80204be4:	f200 80ed 	bhi.w	80204dc2 <uart_irq_handler+0x202>
80204be8:	9902      	ldr	r1, [sp, #8]
80204bea:	e8df f001 	tbb	[pc, r1]
80204bee:	ea07      	.short	0xea07
80204bf0:	ea93ea48 	.word	0xea93ea48
80204bf4:	eaeaea0a 	.word	0xeaeaea0a
80204bf8:	0093eaea 	.word	0x0093eaea
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:374
    {
        case UART_IIR_MODEM_STATUS: /* modem status */
            (void)(uart->UART_MSR);
80204bfc:	9809      	ldr	r0, [sp, #36]	@ 0x24
80204bfe:	6980      	ldr	r0, [r0, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:376
            /* not yet implemented. */
            break;
80204c00:	e0e2      	b.n	80204dc8 <uart_irq_handler+0x208>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:379

        case UART_IIR_RECEIVER_LINE_STATUS: /* receiver line status */
            rx_line_status = uart->UART_LSR;
80204c02:	9809      	ldr	r0, [sp, #36]	@ 0x24
80204c04:	6940      	ldr	r0, [r0, #20]
80204c06:	9006      	str	r0, [sp, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:382

            /* check for any RX line status error. */
            if (rx_line_status & (UART_LSR_RECEIVER_FIFO_ERR | UART_LSR_OVERRUN_ERR) )
80204c08:	f89d 0018 	ldrb.w	r0, [sp, #24]
80204c0c:	f010 0f82 	tst.w	r0, #130	@ 0x82
80204c10:	d034      	beq.n	80204c7c <uart_irq_handler+0xbc>
80204c12:	e7ff      	b.n	80204c14 <uart_irq_handler+0x54>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:385
            {
                /* mark status as error. */
                transfer->status = UART_TRANSFER_STATUS_ERROR;
80204c14:	9908      	ldr	r1, [sp, #32]
80204c16:	2008      	movs	r0, #8
80204c18:	6188      	str	r0, [r1, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:390

                /* there can be multiple RX line status,
                 * break character implicitly generates framing error / parity error.
                 */
                if (rx_line_status & UART_LSR_BREAK_INTERRUPT)
80204c1a:	f89d 0018 	ldrb.w	r0, [sp, #24]
80204c1e:	06c0      	lsls	r0, r0, #27
80204c20:	2800      	cmp	r0, #0
80204c22:	d506      	bpl.n	80204c32 <uart_irq_handler+0x72>
80204c24:	e7ff      	b.n	80204c26 <uart_irq_handler+0x66>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:392
                {
                    transfer->status |= UART_TRANSFER_STATUS_ERROR_RX_BREAK;
80204c26:	9908      	ldr	r1, [sp, #32]
80204c28:	6988      	ldr	r0, [r1, #24]
80204c2a:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
80204c2e:	6188      	str	r0, [r1, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:393
                }
80204c30:	e7ff      	b.n	80204c32 <uart_irq_handler+0x72>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:395

                if (rx_line_status & UART_LSR_FRAME_ERR)
80204c32:	f89d 0018 	ldrb.w	r0, [sp, #24]
80204c36:	0700      	lsls	r0, r0, #28
80204c38:	2800      	cmp	r0, #0
80204c3a:	d506      	bpl.n	80204c4a <uart_irq_handler+0x8a>
80204c3c:	e7ff      	b.n	80204c3e <uart_irq_handler+0x7e>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:397
                {
                    transfer->status |= UART_TRANSFER_STATUS_ERROR_RX_FRAMING;
80204c3e:	9908      	ldr	r1, [sp, #32]
80204c40:	6988      	ldr	r0, [r1, #24]
80204c42:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
80204c46:	6188      	str	r0, [r1, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:398
                }
80204c48:	e7ff      	b.n	80204c4a <uart_irq_handler+0x8a>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:400

                if (rx_line_status & UART_LSR_PARITY_ERR)
80204c4a:	f89d 0018 	ldrb.w	r0, [sp, #24]
80204c4e:	0740      	lsls	r0, r0, #29
80204c50:	2800      	cmp	r0, #0
80204c52:	d506      	bpl.n	80204c62 <uart_irq_handler+0xa2>
80204c54:	e7ff      	b.n	80204c56 <uart_irq_handler+0x96>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:402
                {
                    transfer->status |= UART_TRANSFER_STATUS_ERROR_RX_PARITY;
80204c56:	9908      	ldr	r1, [sp, #32]
80204c58:	6988      	ldr	r0, [r1, #24]
80204c5a:	f040 0020 	orr.w	r0, r0, #32
80204c5e:	6188      	str	r0, [r1, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:403
                }
80204c60:	e7ff      	b.n	80204c62 <uart_irq_handler+0xa2>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:405

                if (rx_line_status & UART_LSR_OVERRUN_ERR)
80204c62:	f89d 0018 	ldrb.w	r0, [sp, #24]
80204c66:	0780      	lsls	r0, r0, #30
80204c68:	2800      	cmp	r0, #0
80204c6a:	d506      	bpl.n	80204c7a <uart_irq_handler+0xba>
80204c6c:	e7ff      	b.n	80204c6e <uart_irq_handler+0xae>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:407
                {
                    transfer->status |= UART_TRANSFER_STATUS_ERROR_RX_OVERRUN;
80204c6e:	9908      	ldr	r1, [sp, #32]
80204c70:	6988      	ldr	r0, [r1, #24]
80204c72:	f040 0010 	orr.w	r0, r0, #16
80204c76:	6188      	str	r0, [r1, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:408
                }
80204c78:	e7ff      	b.n	80204c7a <uart_irq_handler+0xba>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:409
            }
80204c7a:	e7ff      	b.n	80204c7c <uart_irq_handler+0xbc>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:410
            break;
80204c7c:	e0a4      	b.n	80204dc8 <uart_irq_handler+0x208>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:413

        case UART_IIR_TRANSMIT_HOLDING_REG_EMPTY: /* transmit holding register empty */
            do
80204c7e:	e7ff      	b.n	80204c80 <uart_irq_handler+0xc0>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:416
            {
                /* Query how many characters are available in TX fifo. */
                tx_fifo_available_cnt = uart_get_tx_fifo_available_count (uart);
80204c80:	9809      	ldr	r0, [sp, #36]	@ 0x24
80204c82:	f7ff ff93 	bl	80204bac <uart_get_tx_fifo_available_count>
80204c86:	9005      	str	r0, [sp, #20]
80204c88:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:419

                /* Write maximum number of characters to the TX fifo as per available space. */
                for(i=0; i<tx_fifo_available_cnt; i++)
80204c8a:	9003      	str	r0, [sp, #12]
80204c8c:	e7ff      	b.n	80204c8e <uart_irq_handler+0xce>
80204c8e:	9803      	ldr	r0, [sp, #12]
80204c90:	9905      	ldr	r1, [sp, #20]
80204c92:	4288      	cmp	r0, r1
80204c94:	d218      	bcs.n	80204cc8 <uart_irq_handler+0x108>
80204c96:	e7ff      	b.n	80204c98 <uart_irq_handler+0xd8>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:421
                {
                    if(transfer->tx_curr_cnt >= transfer->tx_total_num)
80204c98:	9808      	ldr	r0, [sp, #32]
80204c9a:	6880      	ldr	r0, [r0, #8]
80204c9c:	9908      	ldr	r1, [sp, #32]
80204c9e:	6849      	ldr	r1, [r1, #4]
80204ca0:	4288      	cmp	r0, r1
80204ca2:	d301      	bcc.n	80204ca8 <uart_irq_handler+0xe8>
80204ca4:	e7ff      	b.n	80204ca6 <uart_irq_handler+0xe6>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:424
                    {
                        /* Come out as it transmitted all the user data. */
                        break;
80204ca6:	e00f      	b.n	80204cc8 <uart_irq_handler+0x108>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:428
                    }

                    /* send character to thr register. */
                    uart_send_a_char_to_thr(uart, transfer->tx_buf[transfer->tx_curr_cnt]);
80204ca8:	9809      	ldr	r0, [sp, #36]	@ 0x24
80204caa:	9a08      	ldr	r2, [sp, #32]
80204cac:	6811      	ldr	r1, [r2, #0]
80204cae:	6892      	ldr	r2, [r2, #8]
80204cb0:	5c89      	ldrb	r1, [r1, r2]
80204cb2:	f000 f899 	bl	80204de8 <uart_send_a_char_to_thr>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:429
                    transfer->tx_curr_cnt++; /* increment the tx current count */
80204cb6:	9908      	ldr	r1, [sp, #32]
80204cb8:	6888      	ldr	r0, [r1, #8]
80204cba:	3001      	adds	r0, #1
80204cbc:	6088      	str	r0, [r1, #8]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:430
                }
80204cbe:	e7ff      	b.n	80204cc0 <uart_irq_handler+0x100>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:419
                for(i=0; i<tx_fifo_available_cnt; i++)
80204cc0:	9803      	ldr	r0, [sp, #12]
80204cc2:	3001      	adds	r0, #1
80204cc4:	9003      	str	r0, [sp, #12]
80204cc6:	e7e2      	b.n	80204c8e <uart_irq_handler+0xce>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:434

                /* write again to tx fifo if it is not full and
                 * still there is some user data which needs to be send. */
            } while( uart_tx_ready(uart) && (transfer->tx_curr_cnt < transfer->tx_total_num) );
80204cc8:	e7ff      	b.n	80204cca <uart_irq_handler+0x10a>
80204cca:	9809      	ldr	r0, [sp, #36]	@ 0x24
80204ccc:	f000 f896 	bl	80204dfc <uart_tx_ready>
80204cd0:	4601      	mov	r1, r0
80204cd2:	2000      	movs	r0, #0
80204cd4:	9001      	str	r0, [sp, #4]
80204cd6:	b149      	cbz	r1, 80204cec <uart_irq_handler+0x12c>
80204cd8:	e7ff      	b.n	80204cda <uart_irq_handler+0x11a>
80204cda:	9808      	ldr	r0, [sp, #32]
80204cdc:	6880      	ldr	r0, [r0, #8]
80204cde:	9908      	ldr	r1, [sp, #32]
80204ce0:	6849      	ldr	r1, [r1, #4]
80204ce2:	4288      	cmp	r0, r1
80204ce4:	ea5f 902f 			@ <UNDEFINED> instruction: 0xea5f902f
80204ce8:	9001      	str	r0, [sp, #4]
80204cea:	e7ff      	b.n	80204cec <uart_irq_handler+0x12c>
80204cec:	9801      	ldr	r0, [sp, #4]
80204cee:	07c0      	lsls	r0, r0, #31
80204cf0:	b108      	cbz	r0, 80204cf6 <uart_irq_handler+0x136>
80204cf2:	f02f c83b 	le	80204c80 <uart_irq_handler+0xc0>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:437

            /* check whether it transmitted all the bytes? */
            if (transfer->tx_curr_cnt >= transfer->tx_total_num)
80204cf6:	9808      	ldr	r0, [sp, #32]
80204cf8:	6880      	ldr	r0, [r0, #8]
80204cfa:	9908      	ldr	r1, [sp, #32]
80204cfc:	6849      	ldr	r1, [r1, #4]
80204cfe:	4288      	cmp	r0, r1
80204d00:	d307      	bcc.n	80204d12 <uart_irq_handler+0x152>
80204d02:	e7ff      	b.n	80204d04 <uart_irq_handler+0x144>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:440
            {
                /* yes then disable the transmitter interrupt */
                uart_disable_tx_irq(uart);
80204d04:	9809      	ldr	r0, [sp, #36]	@ 0x24
80204d06:	f7ff ff3f 	bl	80204b88 <uart_disable_tx_irq>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:443

                /* mark status as Send Complete */
                transfer->status = UART_TRANSFER_STATUS_SEND_COMPLETE;
80204d0a:	9908      	ldr	r1, [sp, #32]
80204d0c:	2001      	movs	r0, #1
80204d0e:	6188      	str	r0, [r1, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:444
            }
80204d10:	e7ff      	b.n	80204d12 <uart_irq_handler+0x152>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:445
            break;
80204d12:	e059      	b.n	80204dc8 <uart_irq_handler+0x208>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:449

        case UART_IIR_CHARACTER_TIMEOUT:        /* character timeout */
        case UART_IIR_RECEIVED_DATA_AVAILABLE:  /* received data available. */
            do
80204d14:	e7ff      	b.n	80204d16 <uart_irq_handler+0x156>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:452
            {
                /* Query how many characters are available in RX fifo. */
                rx_fifo_available_cnt = uart_get_rx_fifo_available_count (uart);
80204d16:	9809      	ldr	r0, [sp, #36]	@ 0x24
80204d18:	f7ff ff40 	bl	80204b9c <uart_get_rx_fifo_available_count>
80204d1c:	9004      	str	r0, [sp, #16]
80204d1e:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:455

                /* Read maximum number of characters available from the RX fifo or till rx total number. */
                for(i=0; i<rx_fifo_available_cnt; i++)
80204d20:	9003      	str	r0, [sp, #12]
80204d22:	e7ff      	b.n	80204d24 <uart_irq_handler+0x164>
80204d24:	9803      	ldr	r0, [sp, #12]
80204d26:	9904      	ldr	r1, [sp, #16]
80204d28:	4288      	cmp	r0, r1
80204d2a:	d218      	bcs.n	80204d5e <uart_irq_handler+0x19e>
80204d2c:	e7ff      	b.n	80204d2e <uart_irq_handler+0x16e>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:457
                {
                    if (transfer->rx_curr_cnt >= transfer->rx_total_num)
80204d2e:	9808      	ldr	r0, [sp, #32]
80204d30:	6940      	ldr	r0, [r0, #20]
80204d32:	9908      	ldr	r1, [sp, #32]
80204d34:	6909      	ldr	r1, [r1, #16]
80204d36:	4288      	cmp	r0, r1
80204d38:	d301      	bcc.n	80204d3e <uart_irq_handler+0x17e>
80204d3a:	e7ff      	b.n	80204d3c <uart_irq_handler+0x17c>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:460
                    {
                        /* Come out as it received all the user data. */
                        break;
80204d3c:	e00f      	b.n	80204d5e <uart_irq_handler+0x19e>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:464
                    }

                    /* read character from rbr receive buffer register. */
                    transfer->rx_buf[transfer->rx_curr_cnt] = uart_receive_a_char_from_rbr(uart);
80204d3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
80204d40:	f000 f844 	bl	80204dcc <uart_receive_a_char_from_rbr>
80204d44:	9a08      	ldr	r2, [sp, #32]
80204d46:	68d1      	ldr	r1, [r2, #12]
80204d48:	6952      	ldr	r2, [r2, #20]
80204d4a:	5488      	strb	r0, [r1, r2]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:465
                    transfer->rx_curr_cnt++;
80204d4c:	9908      	ldr	r1, [sp, #32]
80204d4e:	6948      	ldr	r0, [r1, #20]
80204d50:	3001      	adds	r0, #1
80204d52:	6148      	str	r0, [r1, #20]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:466
                }
80204d54:	e7ff      	b.n	80204d56 <uart_irq_handler+0x196>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:455
                for(i=0; i<rx_fifo_available_cnt; i++)
80204d56:	9803      	ldr	r0, [sp, #12]
80204d58:	3001      	adds	r0, #1
80204d5a:	9003      	str	r0, [sp, #12]
80204d5c:	e7e2      	b.n	80204d24 <uart_irq_handler+0x164>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:469

                /* read again from rx fifo if it is not empty and user data is still remaining to read. */
            } while( uart_rx_ready(uart) && (transfer->rx_curr_cnt < transfer->rx_total_num) );
80204d5e:	e7ff      	b.n	80204d60 <uart_irq_handler+0x1a0>
80204d60:	9809      	ldr	r0, [sp, #36]	@ 0x24
80204d62:	f000 f839 	bl	80204dd8 <uart_rx_ready>
80204d66:	4601      	mov	r1, r0
80204d68:	2000      	movs	r0, #0
80204d6a:	9000      	str	r0, [sp, #0]
80204d6c:	b149      	cbz	r1, 80204d82 <uart_irq_handler+0x1c2>
80204d6e:	e7ff      	b.n	80204d70 <uart_irq_handler+0x1b0>
80204d70:	9808      	ldr	r0, [sp, #32]
80204d72:	6940      	ldr	r0, [r0, #20]
80204d74:	9908      	ldr	r1, [sp, #32]
80204d76:	6909      	ldr	r1, [r1, #16]
80204d78:	4288      	cmp	r0, r1
80204d7a:	ea5f 902f 			@ <UNDEFINED> instruction: 0xea5f902f
80204d7e:	9000      	str	r0, [sp, #0]
80204d80:	e7ff      	b.n	80204d82 <uart_irq_handler+0x1c2>
80204d82:	9800      	ldr	r0, [sp, #0]
80204d84:	07c0      	lsls	r0, r0, #31
80204d86:	b108      	cbz	r0, 80204d8c <uart_irq_handler+0x1cc>
80204d88:	f02f c83b 	le	80204d16 <uart_irq_handler+0x156>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:472

            /* check whether it received all the bytes? */
            if (transfer->rx_curr_cnt >= transfer->rx_total_num)
80204d8c:	9808      	ldr	r0, [sp, #32]
80204d8e:	6940      	ldr	r0, [r0, #20]
80204d90:	9908      	ldr	r1, [sp, #32]
80204d92:	6909      	ldr	r1, [r1, #16]
80204d94:	4288      	cmp	r0, r1
80204d96:	d307      	bcc.n	80204da8 <uart_irq_handler+0x1e8>
80204d98:	e7ff      	b.n	80204d9a <uart_irq_handler+0x1da>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:475
            {
                /* yes than disable the receiver interrupt */
                uart_disable_rx_irq(uart);
80204d9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
80204d9c:	f7ff fee6 	bl	80204b6c <uart_disable_rx_irq>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:478

                /* mark status as Receive Complete */
                transfer->status = UART_TRANSFER_STATUS_RECEIVE_COMPLETE;
80204da0:	9908      	ldr	r1, [sp, #32]
80204da2:	2002      	movs	r0, #2
80204da4:	6188      	str	r0, [r1, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:479
            }
80204da6:	e003      	b.n	80204db0 <uart_irq_handler+0x1f0>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:500
                 * it is up to user to decide whether
                 * to wait for remaining bytes or call the abort rx.
                */

                /* mark status as RX Timeout */
                transfer->status = UART_TRANSFER_STATUS_RX_TIMEOUT;
80204da8:	9908      	ldr	r1, [sp, #32]
80204daa:	2004      	movs	r0, #4
80204dac:	6188      	str	r0, [r1, #24]
80204dae:	e7ff      	b.n	80204db0 <uart_irq_handler+0x1f0>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:504
            }

            /* got character Timeout? mark status as a RX Timeout. */
            if (uart_int_status == UART_IIR_CHARACTER_TIMEOUT)
80204db0:	9807      	ldr	r0, [sp, #28]
80204db2:	280c      	cmp	r0, #12
80204db4:	d104      	bne.n	80204dc0 <uart_irq_handler+0x200>
80204db6:	e7ff      	b.n	80204db8 <uart_irq_handler+0x1f8>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:512
                 * it is up to user to decide whether
                 * to wait for remaining bytes or call the abort rx.
                 */

                /* mark status as RX Timeout */
                transfer->status = UART_TRANSFER_STATUS_RX_TIMEOUT;
80204db8:	9908      	ldr	r1, [sp, #32]
80204dba:	2004      	movs	r0, #4
80204dbc:	6188      	str	r0, [r1, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:513
            }
80204dbe:	e7ff      	b.n	80204dc0 <uart_irq_handler+0x200>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:515

            break;
80204dc0:	e002      	b.n	80204dc8 <uart_irq_handler+0x208>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:519

        default:
            /* read the usr uart status register */
            (void)(uart->UART_USR);
80204dc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
80204dc4:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:520
            break;
80204dc6:	e7ff      	b.n	80204dc8 <uart_irq_handler+0x208>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:523
    }

    return;
80204dc8:	b00a      	add	sp, #40	@ 0x28
80204dca:	bd80      	pop	{r7, pc}

80204dcc <uart_receive_a_char_from_rbr>:
uart_receive_a_char_from_rbr():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:66
{
80204dcc:	b081      	sub	sp, #4
80204dce:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:68
    return uart->UART_RBR;
80204dd0:	9800      	ldr	r0, [sp, #0]
80204dd2:	6800      	ldr	r0, [r0, #0]
80204dd4:	b001      	add	sp, #4
80204dd6:	4770      	bx	lr

80204dd8 <uart_rx_ready>:
uart_rx_ready():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:37
{
80204dd8:	b081      	sub	sp, #4
80204dda:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:39
    return ((uart->UART_USR & UART_USR_RECEIVE_FIFO_NOT_EMPTY) ? 1 : 0);
80204ddc:	9800      	ldr	r0, [sp, #0]
80204dde:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
80204de0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
80204de4:	b001      	add	sp, #4
80204de6:	4770      	bx	lr

80204de8 <uart_send_a_char_to_thr>:
uart_send_a_char_to_thr():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:53
{
80204de8:	b082      	sub	sp, #8
80204dea:	9001      	str	r0, [sp, #4]
80204dec:	f88d 1003 	strb.w	r1, [sp, #3]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:55
    uart->UART_THR = chr;
80204df0:	f89d 0003 	ldrb.w	r0, [sp, #3]
80204df4:	9901      	ldr	r1, [sp, #4]
80204df6:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:56
}
80204df8:	b002      	add	sp, #8
80204dfa:	4770      	bx	lr

80204dfc <uart_tx_ready>:
uart_tx_ready():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:24
{
80204dfc:	b081      	sub	sp, #4
80204dfe:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:26
    return ((uart->UART_USR & UART_USR_TRANSMIT_FIFO_NOT_FULL) ? 1 : 0);
80204e00:	9800      	ldr	r0, [sp, #0]
80204e02:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
80204e04:	f3c0 0040 	ubfx	r0, r0, #1, #1
80204e08:	b001      	add	sp, #4
80204e0a:	4770      	bx	lr

80204e0c <_btod_d2e>:
_btod_d2e():
80204e0c:	ea5f 0c40 	movs.w	ip, r0, lsl #1
80204e10:	bf08      	it	eq
80204e12:	f091 0f00 	teqeq	r1, #0
80204e16:	ea4f 238c 	mov.w	r3, ip, lsl #10
80204e1a:	ea4f 22c1 	mov.w	r2, r1, lsl #11
80204e1e:	ea43 5151 	orr.w	r1, r3, r1, lsr #21
80204e22:	ea4f 501c 	mov.w	r0, ip, lsr #20
80204e26:	bf18      	it	ne
80204e28:	f500 40f0 	addne.w	r0, r0, #30720	@ 0x7800
80204e2c:	ea4f 0030 	mov.w	r0, r0, rrx
80204e30:	bf18      	it	ne
80204e32:	f041 4100 	orrne.w	r1, r1, #2147483648	@ 0x80000000
80204e36:	ea5f 5c6c 	movs.w	ip, ip, asr #21
80204e3a:	f000 8029 	beq.w	80204e90 <_d2e_norm_op1>
80204e3e:	f1bc 3fff 	cmp.w	ip, #4294967295	@ 0xffffffff
80204e42:	bf08      	it	eq
80204e44:	f040 4080 	orreq.w	r0, r0, #1073741824	@ 0x40000000
80204e48:	4770      	bx	lr

80204e4a <_d2e_denorm_low>:
_d2e_denorm_low():
80204e4a:	0c13      	lsrs	r3, r2, #16
80204e4c:	bf06      	itte	eq
80204e4e:	0412      	lsleq	r2, r2, #16
80204e50:	f04f 0c10 	moveq.w	ip, #16
80204e54:	f04f 0c00 	movne.w	ip, #0
80204e58:	0e13      	lsrs	r3, r2, #24
80204e5a:	bf04      	itt	eq
80204e5c:	0212      	lsleq	r2, r2, #8
80204e5e:	f10c 0c08 	addeq.w	ip, ip, #8
80204e62:	0f13      	lsrs	r3, r2, #28
80204e64:	bf04      	itt	eq
80204e66:	0112      	lsleq	r2, r2, #4
80204e68:	f10c 0c04 	addeq.w	ip, ip, #4
80204e6c:	0f93      	lsrs	r3, r2, #30
80204e6e:	bf04      	itt	eq
80204e70:	0092      	lsleq	r2, r2, #2
80204e72:	f10c 0c02 	addeq.w	ip, ip, #2
80204e76:	0fd3      	lsrs	r3, r2, #31
80204e78:	bf04      	itt	eq
80204e7a:	0052      	lsleq	r2, r2, #1
80204e7c:	f10c 0c01 	addeq.w	ip, ip, #1
80204e80:	4611      	mov	r1, r2
80204e82:	f04f 0200 	mov.w	r2, #0
80204e86:	f1a0 001f 	sub.w	r0, r0, #31
80204e8a:	eba0 000c 	sub.w	r0, r0, ip
80204e8e:	4770      	bx	lr

80204e90 <_d2e_norm_op1>:
_d2e_norm_op1():
80204e90:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
80204e94:	bf08      	it	eq
80204e96:	4770      	bxeq	lr
80204e98:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
80204e9c:	f43f afd5 	beq.w	80204e4a <_d2e_denorm_low>
80204ea0:	0c0b      	lsrs	r3, r1, #16
80204ea2:	bf06      	itte	eq
80204ea4:	0409      	lsleq	r1, r1, #16
80204ea6:	f04f 0c10 	moveq.w	ip, #16
80204eaa:	f04f 0c00 	movne.w	ip, #0
80204eae:	0e0b      	lsrs	r3, r1, #24
80204eb0:	bf04      	itt	eq
80204eb2:	0209      	lsleq	r1, r1, #8
80204eb4:	f10c 0c08 	addeq.w	ip, ip, #8
80204eb8:	0f0b      	lsrs	r3, r1, #28
80204eba:	bf04      	itt	eq
80204ebc:	0109      	lsleq	r1, r1, #4
80204ebe:	f10c 0c04 	addeq.w	ip, ip, #4
80204ec2:	0f8b      	lsrs	r3, r1, #30
80204ec4:	bf04      	itt	eq
80204ec6:	0089      	lsleq	r1, r1, #2
80204ec8:	f10c 0c02 	addeq.w	ip, ip, #2
80204ecc:	0fcb      	lsrs	r3, r1, #31
80204ece:	bf04      	itt	eq
80204ed0:	0049      	lsleq	r1, r1, #1
80204ed2:	f10c 0c01 	addeq.w	ip, ip, #1
80204ed6:	f1cc 0320 	rsb	r3, ip, #32
80204eda:	fa22 f303 	lsr.w	r3, r2, r3
80204ede:	ea41 0103 	orr.w	r1, r1, r3
80204ee2:	fa02 f20c 	lsl.w	r2, r2, ip
80204ee6:	eba0 000c 	sub.w	r0, r0, ip
80204eea:	f100 0001 	add.w	r0, r0, #1
80204eee:	4770      	bx	lr

80204ef0 <__btod_div_common>:
__btod_div_common():
80204ef0:	f023 477f 	bic.w	r7, r3, #4278190080	@ 0xff000000
80204ef4:	f020 4c7f 	bic.w	ip, r0, #4278190080	@ 0xff000000
80204ef8:	ea80 0003 	eor.w	r0, r0, r3
80204efc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
80204f00:	ebac 0307 	sub.w	r3, ip, r7
80204f04:	f503 537c 	add.w	r3, r3, #16128	@ 0x3f00
80204f08:	f103 03ff 	add.w	r3, r3, #255	@ 0xff
80204f0c:	e92d 4980 	stmdb	sp!, {r7, r8, fp, lr}
80204f10:	b409      	push	{r0, r3}
80204f12:	ea4f 4314 	mov.w	r3, r4, lsr #16
80204f16:	ea24 4803 	bic.w	r8, r4, r3, lsl #16
80204f1a:	ea4f 4b15 	mov.w	fp, r5, lsr #16
80204f1e:	ea25 4e0b 	bic.w	lr, r5, fp, lsl #16
80204f22:	f20f 2604 	addw	r6, pc, #516	@ 0x204
80204f26:	eb06 2713 	add.w	r7, r6, r3, lsr #8
80204f2a:	783e      	ldrb	r6, [r7, #0]
80204f2c:	fb03 6706 	mla	r7, r3, r6, r6
80204f30:	f5c7 0700 	rsb	r7, r7, #8388608	@ 0x800000
80204f34:	fb07 f606 	mul.w	r6, r7, r6
80204f38:	ea4f 46d6 	mov.w	r6, r6, lsr #19
80204f3c:	f106 0602 	add.w	r6, r6, #2
80204f40:	ea4f 3754 	mov.w	r7, r4, lsr #13
80204f44:	fb07 6c06 	mla	ip, r7, r6, r6
80204f48:	f1cc 5c00 	rsb	ip, ip, #536870912	@ 0x20000000
80204f4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
80204f50:	ea2c 4c07 	bic.w	ip, ip, r7, lsl #16
80204f54:	fb0c f506 	mul.w	r5, ip, r6
80204f58:	fb07 f406 	mul.w	r4, r7, r6
80204f5c:	eb04 4615 	add.w	r6, r4, r5, lsr #16
80204f60:	ea4f 1696 	mov.w	r6, r6, lsr #6
80204f64:	0849      	lsrs	r1, r1, #1
80204f66:	ea5f 0232 	movs.w	r2, r2, rrx
80204f6a:	bf34      	ite	cc
80204f6c:	2000      	movcc	r0, #0
80204f6e:	f04f 4000 	movcs.w	r0, #2147483648	@ 0x80000000
80204f72:	ea4f 37d1 	mov.w	r7, r1, lsr #15
80204f76:	fb06 fc07 	mul.w	ip, r6, r7
80204f7a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
80204f7e:	fb0c f70b 	mul.w	r7, ip, fp
80204f82:	1bd2      	subs	r2, r2, r7
80204f84:	fb03 f70c 	mul.w	r7, r3, ip
80204f88:	eb61 0107 	sbc.w	r1, r1, r7
80204f8c:	fb0c f70e 	mul.w	r7, ip, lr
80204f90:	ebb0 4007 	subs.w	r0, r0, r7, lsl #16
80204f94:	eb72 4217 	sbcs.w	r2, r2, r7, lsr #16
80204f98:	fb0c f708 	mul.w	r7, ip, r8
80204f9c:	bf34      	ite	cc
80204f9e:	eba2 4207 	subcc.w	r2, r2, r7, lsl #16
80204fa2:	ebb2 4207 	subscs.w	r2, r2, r7, lsl #16
80204fa6:	eb61 4117 	sbc.w	r1, r1, r7, lsr #16
80204faa:	ea4f 440c 	mov.w	r4, ip, lsl #16
80204fae:	ea4f 0791 	mov.w	r7, r1, lsr #2
80204fb2:	fb06 fc07 	mul.w	ip, r6, r7
80204fb6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
80204fba:	fb0c f70b 	mul.w	r7, ip, fp
80204fbe:	ebb0 40c7 	subs.w	r0, r0, r7, lsl #19
80204fc2:	eb72 3257 	sbcs.w	r2, r2, r7, lsr #13
80204fc6:	fb03 f70c 	mul.w	r7, r3, ip
80204fca:	bf34      	ite	cc
80204fcc:	eba2 42c7 	subcc.w	r2, r2, r7, lsl #19
80204fd0:	ebb2 42c7 	subscs.w	r2, r2, r7, lsl #19
80204fd4:	eb61 3157 	sbc.w	r1, r1, r7, lsr #13
80204fd8:	fb0c f70e 	mul.w	r7, ip, lr
80204fdc:	ebb0 00c7 	subs.w	r0, r0, r7, lsl #3
80204fe0:	eb72 7257 	sbcs.w	r2, r2, r7, lsr #29
80204fe4:	fb0c f708 	mul.w	r7, ip, r8
80204fe8:	bf34      	ite	cc
80204fea:	eba2 02c7 	subcc.w	r2, r2, r7, lsl #3
80204fee:	ebb2 02c7 	subscs.w	r2, r2, r7, lsl #3
80204ff2:	eb61 7157 	sbc.w	r1, r1, r7, lsr #29
80204ff6:	ea4f 6181 	mov.w	r1, r1, lsl #26
80204ffa:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
80204ffe:	ea4f 6282 	mov.w	r2, r2, lsl #26
80205002:	ea42 1290 	orr.w	r2, r2, r0, lsr #6
80205006:	ea4f 6080 	mov.w	r0, r0, lsl #26
8020500a:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
8020500e:	9f03      	ldr	r7, [sp, #12]
80205010:	ea4f 37d1 	mov.w	r7, r1, lsr #15
80205014:	fb06 fc07 	mul.w	ip, r6, r7
80205018:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
8020501c:	fb0c f70b 	mul.w	r7, ip, fp
80205020:	1bd2      	subs	r2, r2, r7
80205022:	fb03 f70c 	mul.w	r7, r3, ip
80205026:	eb61 0107 	sbc.w	r1, r1, r7
8020502a:	fb0c f70e 	mul.w	r7, ip, lr
8020502e:	ebb0 4007 	subs.w	r0, r0, r7, lsl #16
80205032:	eb72 4217 	sbcs.w	r2, r2, r7, lsr #16
80205036:	fb0c f708 	mul.w	r7, ip, r8
8020503a:	bf34      	ite	cc
8020503c:	eba2 4207 	subcc.w	r2, r2, r7, lsl #16
80205040:	ebb2 4207 	subscs.w	r2, r2, r7, lsl #16
80205044:	eb61 4117 	sbc.w	r1, r1, r7, lsr #16
80205048:	ea4f 558c 	mov.w	r5, ip, lsl #22
8020504c:	eb04 249c 	add.w	r4, r4, ip, lsr #10
80205050:	ea4f 0791 	mov.w	r7, r1, lsr #2
80205054:	fb06 fc07 	mul.w	ip, r6, r7
80205058:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
8020505c:	fb0c f70b 	mul.w	r7, ip, fp
80205060:	ebb0 40c7 	subs.w	r0, r0, r7, lsl #19
80205064:	eb72 3257 	sbcs.w	r2, r2, r7, lsr #13
80205068:	fb03 f70c 	mul.w	r7, r3, ip
8020506c:	bf34      	ite	cc
8020506e:	eba2 42c7 	subcc.w	r2, r2, r7, lsl #19
80205072:	ebb2 42c7 	subscs.w	r2, r2, r7, lsl #19
80205076:	eb61 3157 	sbc.w	r1, r1, r7, lsr #13
8020507a:	fb0c f70e 	mul.w	r7, ip, lr
8020507e:	ebb0 00c7 	subs.w	r0, r0, r7, lsl #3
80205082:	eb72 7257 	sbcs.w	r2, r2, r7, lsr #29
80205086:	fb0c f708 	mul.w	r7, ip, r8
8020508a:	bf34      	ite	cc
8020508c:	eba2 02c7 	subcc.w	r2, r2, r7, lsl #3
80205090:	ebb2 02c7 	subscs.w	r2, r2, r7, lsl #3
80205094:	eb61 7157 	sbc.w	r1, r1, r7, lsr #29
80205098:	ea4f 6181 	mov.w	r1, r1, lsl #26
8020509c:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
802050a0:	ea4f 6282 	mov.w	r2, r2, lsl #26
802050a4:	ea42 1290 	orr.w	r2, r2, r0, lsr #6
802050a8:	ea4f 6080 	mov.w	r0, r0, lsl #26
802050ac:	eb15 254c 	adds.w	r5, r5, ip, lsl #9
802050b0:	f144 0400 	adc.w	r4, r4, #0
802050b4:	ea4f 37d1 	mov.w	r7, r1, lsr #15
802050b8:	fb06 fc07 	mul.w	ip, r6, r7
802050bc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
802050c0:	fb0c f70b 	mul.w	r7, ip, fp
802050c4:	1bd2      	subs	r2, r2, r7
802050c6:	fb03 f70c 	mul.w	r7, r3, ip
802050ca:	eb61 0107 	sbc.w	r1, r1, r7
802050ce:	fb0c f70e 	mul.w	r7, ip, lr
802050d2:	ebb0 4007 	subs.w	r0, r0, r7, lsl #16
802050d6:	eb72 4217 	sbcs.w	r2, r2, r7, lsr #16
802050da:	fb0c f708 	mul.w	r7, ip, r8
802050de:	bf34      	ite	cc
802050e0:	eba2 4207 	subcc.w	r2, r2, r7, lsl #16
802050e4:	ebb2 4207 	subscs.w	r2, r2, r7, lsl #16
802050e8:	eb61 4117 	sbc.w	r1, r1, r7, lsr #16
802050ec:	ea4f 3181 	mov.w	r1, r1, lsl #14
802050f0:	ea41 4192 	orr.w	r1, r1, r2, lsr #18
802050f4:	ea4f 3282 	mov.w	r2, r2, lsl #14
802050f8:	ea42 4290 	orr.w	r2, r2, r0, lsr #18
802050fc:	ea4f 3080 	mov.w	r0, r0, lsl #14
80205100:	ea4f 760c 	mov.w	r6, ip, lsl #28
80205104:	eb15 151c 	adds.w	r5, r5, ip, lsr #4
80205108:	f144 0400 	adc.w	r4, r4, #0
8020510c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
80205110:	ea4e 480b 	orr.w	r8, lr, fp, lsl #16
80205114:	f04f 0e00 	mov.w	lr, #0
80205118:	ebb2 0c08 	subs.w	ip, r2, r8
8020511c:	eb71 0703 	sbcs.w	r7, r1, r3
80205120:	bf24      	itt	cs
80205122:	4662      	movcs	r2, ip
80205124:	4639      	movcs	r1, r7
80205126:	eb4e 0e0e 	adc.w	lr, lr, lr
8020512a:	f04f 0b00 	mov.w	fp, #0
8020512e:	1800      	adds	r0, r0, r0
80205130:	4152      	adcs	r2, r2
80205132:	4149      	adcs	r1, r1
80205134:	eb4b 0b0b 	adc.w	fp, fp, fp
80205138:	ebb2 0c08 	subs.w	ip, r2, r8
8020513c:	eb71 0703 	sbcs.w	r7, r1, r3
80205140:	f17b 0b00 	sbcs.w	fp, fp, #0
80205144:	bf24      	itt	cs
80205146:	4662      	movcs	r2, ip
80205148:	4639      	movcs	r1, r7
8020514a:	eb4e 0e0e 	adc.w	lr, lr, lr
8020514e:	f04f 0b00 	mov.w	fp, #0
80205152:	1800      	adds	r0, r0, r0
80205154:	4152      	adcs	r2, r2
80205156:	4149      	adcs	r1, r1
80205158:	eb4b 0b0b 	adc.w	fp, fp, fp
8020515c:	ebb2 0c08 	subs.w	ip, r2, r8
80205160:	eb71 0703 	sbcs.w	r7, r1, r3
80205164:	f17b 0b00 	sbcs.w	fp, fp, #0
80205168:	bf24      	itt	cs
8020516a:	4662      	movcs	r2, ip
8020516c:	4639      	movcs	r1, r7
8020516e:	eb4e 0e0e 	adc.w	lr, lr, lr
80205172:	ea51 0702 	orrs.w	r7, r1, r2
80205176:	bf18      	it	ne
80205178:	f046 0601 	orrne.w	r6, r6, #1
8020517c:	eb16 760e 	adds.w	r6, r6, lr, lsl #28
80205180:	f155 0200 	adcs.w	r2, r5, #0
80205184:	f154 0100 	adcs.w	r1, r4, #0
80205188:	d503      	bpl.n	80205192 <__btod_div_common+0x2a2>
8020518a:	e8bd 0189 	ldmia.w	sp!, {r0, r3, r7, r8}
8020518e:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
80205192:	e8bd 0189 	ldmia.w	sp!, {r0, r3, r7, r8}
80205196:	e8bd 4800 	ldmia.w	sp!, {fp, lr}
8020519a:	19b6      	adds	r6, r6, r6
8020519c:	4152      	adcs	r2, r2
8020519e:	eb41 0101 	adc.w	r1, r1, r1
802051a2:	f1a3 0301 	sub.w	r3, r3, #1
802051a6:	4770      	bx	lr
802051a8:	7e7f8080 	.word	0x7e7f8080
802051ac:	7a7b7c7d 	.word	0x7a7b7c7d
802051b0:	76777879 	.word	0x76777879
802051b4:	73747576 	.word	0x73747576
802051b8:	70717172 	.word	0x70717172
802051bc:	6d6e6e6f 	.word	0x6d6e6e6f
802051c0:	6a6b6c6c 	.word	0x6a6b6c6c
802051c4:	6868696a 	.word	0x6868696a
802051c8:	65666667 	.word	0x65666667
802051cc:	63636464 	.word	0x63636464
802051d0:	60616162 	.word	0x60616162
802051d4:	5e5f5f60 	.word	0x5e5f5f60
802051d8:	5c5d5d5e 	.word	0x5c5d5d5e
802051dc:	5a5b5b5c 	.word	0x5a5b5b5c
802051e0:	5859595a 	.word	0x5859595a
802051e4:	56575758 	.word	0x56575758
802051e8:	55555556 	.word	0x55555556
802051ec:	53535454 	.word	0x53535454
802051f0:	51525252 	.word	0x51525252
802051f4:	50505051 	.word	0x50505051
802051f8:	4e4f4f4f 	.word	0x4e4f4f4f
802051fc:	4d4d4d4e 	.word	0x4d4d4d4e
80205200:	4b4c4c4c 	.word	0x4b4c4c4c
80205204:	4a4a4b4b 	.word	0x4a4a4b4b
80205208:	4949494a 	.word	0x4949494a
8020520c:	47484848 	.word	0x47484848
80205210:	46474747 	.word	0x46474747
80205214:	45454646 	.word	0x45454646
80205218:	44444445 	.word	0x44444445
8020521c:	43434344 	.word	0x43434344
80205220:	42424243 	.word	0x42424243
80205224:	41414142 	.word	0x41414142

80205228 <_e2e>:
_e2e():
80205228:	469c      	mov	ip, r3
8020522a:	2b00      	cmp	r3, #0
8020522c:	d430      	bmi.n	80205290 <_e2e+0x68>
8020522e:	0077      	lsls	r7, r6, #1
80205230:	d02b      	beq.n	8020528a <_e2e+0x62>
80205232:	ea4f 0737 	mov.w	r7, r7, rrx
80205236:	b51c      	push	{r2, r3, r4, lr}
80205238:	b403      	push	{r0, r1}
8020523a:	f04f 0010 	mov.w	r0, #16
8020523e:	f04f 0110 	mov.w	r1, #16
80205242:	f1ba 0f00 	cmp.w	sl, #0
80205246:	d006      	beq.n	80205256 <_e2e+0x2e>
80205248:	f1bc 0f00 	cmp.w	ip, #0
8020524c:	bfdc      	itt	le
8020524e:	f040 0008 	orrle.w	r0, r0, #8
80205252:	f040 0108 	orrle.w	r1, r0, #8
80205256:	f04f 0000 	mov.w	r0, #0
8020525a:	bc0f      	pop	{r0, r1, r2, r3}
8020525c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
80205260:	f10b 0b01 	add.w	fp, fp, #1
80205264:	f1bb 0f01 	cmp.w	fp, #1
80205268:	bf08      	it	eq
8020526a:	ea5f 0717 	movseq.w	r7, r7, lsr #32
8020526e:	bf22      	ittt	cs
80205270:	f112 0201 	addscs.w	r2, r2, #1
80205274:	f111 0101 	addscs.w	r1, r1, #1
80205278:	f04f 4100 	movcs.w	r1, #2147483648	@ 0x80000000
8020527c:	f143 0300 	adc.w	r3, r3, #0
80205280:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
80205284:	ea43 0000 	orr.w	r0, r3, r0
80205288:	4770      	bx	lr
8020528a:	d3f9      	bcc.n	80205280 <_e2e+0x58>
8020528c:	0857      	lsrs	r7, r2, #1
8020528e:	e7d0      	b.n	80205232 <_e2e+0xa>
80205290:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
80205294:	ea4f 4616 	mov.w	r6, r6, lsr #16
80205298:	f113 0f40 	cmn.w	r3, #64	@ 0x40
8020529c:	dd1f      	ble.n	802052de <_e2e+0xb6>
8020529e:	f113 0f20 	cmn.w	r3, #32
802052a2:	bfdf      	itttt	le
802052a4:	4316      	orrle	r6, r2
802052a6:	460a      	movle	r2, r1
802052a8:	2100      	movle	r1, #0
802052aa:	3320      	addle	r3, #32
802052ac:	425b      	negs	r3, r3
802052ae:	d0be      	beq.n	8020522e <_e2e+0x6>
802052b0:	f1c3 0720 	rsb	r7, r3, #32
802052b4:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
802052b8:	ea4f 4616 	mov.w	r6, r6, lsr #16
802052bc:	fa02 f707 	lsl.w	r7, r2, r7
802052c0:	ea46 0607 	orr.w	r6, r6, r7
802052c4:	fa22 f203 	lsr.w	r2, r2, r3
802052c8:	f1c3 0720 	rsb	r7, r3, #32
802052cc:	fa01 f707 	lsl.w	r7, r1, r7
802052d0:	ea42 0207 	orr.w	r2, r2, r7
802052d4:	fa21 f103 	lsr.w	r1, r1, r3
802052d8:	f04f 0300 	mov.w	r3, #0
802052dc:	e7a7      	b.n	8020522e <_e2e+0x6>
802052de:	ea46 0602 	orr.w	r6, r6, r2
802052e2:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
802052e6:	ea4f 4616 	mov.w	r6, r6, lsr #16
802052ea:	ea46 0601 	orr.w	r6, r6, r1
802052ee:	bfbc      	itt	lt
802052f0:	ea46 4606 	orrlt.w	r6, r6, r6, lsl #16
802052f4:	0c36      	lsrlt	r6, r6, #16
802052f6:	f04f 0300 	mov.w	r3, #0
802052fa:	f04f 0200 	mov.w	r2, #0
802052fe:	f04f 0100 	mov.w	r1, #0
80205302:	e794      	b.n	8020522e <_e2e+0x6>

80205304 <_btod_ediv>:
_btod_ediv():
80205304:	e92d 4c80 	stmdb	sp!, {r7, sl, fp, lr}
80205308:	b470      	push	{r4, r5, r6}
8020530a:	469a      	mov	sl, r3
8020530c:	4693      	mov	fp, r2
8020530e:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
80205312:	c807      	ldmia	r0, {r0, r1, r2}
80205314:	ea31 0c40 	bics.w	ip, r1, r0, lsl #1
80205318:	bf48      	it	mi
8020531a:	ea34 0c43 	bicsmi.w	ip, r4, r3, lsl #1
8020531e:	d503      	bpl.n	80205328 <_btod_ediv+0x24>
80205320:	f7ff fde6 	bl	80204ef0 <__btod_div_common>
80205324:	f7ff ff80 	bl	80205228 <_e2e>
80205328:	bcf0      	pop	{r4, r5, r6, r7}
8020532a:	e8bd 8c00 	ldmia.w	sp!, {sl, fp, pc}

8020532e <_btod_emul>:
_btod_emul():
8020532e:	e92d 4c80 	stmdb	sp!, {r7, sl, fp, lr}
80205332:	b470      	push	{r4, r5, r6}
80205334:	469a      	mov	sl, r3
80205336:	4693      	mov	fp, r2
80205338:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
8020533c:	c807      	ldmia	r0, {r0, r1, r2}
8020533e:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
80205342:	bf08      	it	eq
80205344:	f013 4f80 	tsteq.w	r3, #1073741824	@ 0x40000000
80205348:	d103      	bne.n	80205352 <_btod_emul+0x24>
8020534a:	f000 f805 	bl	80205358 <__btod_mult_common>
8020534e:	f7ff ff6b 	bl	80205228 <_e2e>
80205352:	bcf0      	pop	{r4, r5, r6, r7}
80205354:	e8bd 8c00 	ldmia.w	sp!, {sl, fp, pc}

80205358 <__btod_mult_common>:
__btod_mult_common():
80205358:	f020 477f 	bic.w	r7, r0, #4278190080	@ 0xff000000
8020535c:	f023 4c7f 	bic.w	ip, r3, #4278190080	@ 0xff000000
80205360:	ea80 0003 	eor.w	r0, r0, r3
80205364:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
80205368:	eb07 030c 	add.w	r3, r7, ip
8020536c:	f5a3 537c 	sub.w	r3, r3, #16128	@ 0x3f00
80205370:	f1a3 03fe 	sub.w	r3, r3, #254	@ 0xfe
80205374:	f092 0f00 	teq	r2, #0
80205378:	f000 80b3 	beq.w	802054e2 <__btod_mult_common+0x18a>
8020537c:	f095 0f00 	teq	r5, #0
80205380:	f000 8077 	beq.w	80205472 <__btod_mult_common+0x11a>
80205384:	e92d 4901 	stmdb	sp!, {r0, r8, fp, lr}
80205388:	ea4f 4011 	mov.w	r0, r1, lsr #16
8020538c:	ea21 4800 	bic.w	r8, r1, r0, lsl #16
80205390:	ea4f 4614 	mov.w	r6, r4, lsr #16
80205394:	ea24 4706 	bic.w	r7, r4, r6, lsl #16
80205398:	fb00 fc06 	mul.w	ip, r0, r6
8020539c:	fb08 f606 	mul.w	r6, r8, r6
802053a0:	fb07 f808 	mul.w	r8, r7, r8
802053a4:	eb18 4806 	adds.w	r8, r8, r6, lsl #16
802053a8:	eb4c 4c16 	adc.w	ip, ip, r6, lsr #16
802053ac:	fb00 f707 	mul.w	r7, r0, r7
802053b0:	eb18 4807 	adds.w	r8, r8, r7, lsl #16
802053b4:	eb4c 4017 	adc.w	r0, ip, r7, lsr #16
802053b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
802053bc:	ea22 4e0b 	bic.w	lr, r2, fp, lsl #16
802053c0:	ea4f 4615 	mov.w	r6, r5, lsr #16
802053c4:	ea25 4706 	bic.w	r7, r5, r6, lsl #16
802053c8:	fb0b fc06 	mul.w	ip, fp, r6
802053cc:	fb0e f606 	mul.w	r6, lr, r6
802053d0:	fb07 fe0e 	mul.w	lr, r7, lr
802053d4:	eb1e 4e06 	adds.w	lr, lr, r6, lsl #16
802053d8:	eb4c 4c16 	adc.w	ip, ip, r6, lsr #16
802053dc:	fb0b f707 	mul.w	r7, fp, r7
802053e0:	eb1e 4e07 	adds.w	lr, lr, r7, lsl #16
802053e4:	eb4c 4b17 	adc.w	fp, ip, r7, lsr #16
802053e8:	eb18 080b 	adds.w	r8, r8, fp
802053ec:	f140 0000 	adc.w	r0, r0, #0
802053f0:	eb18 0b0e 	adds.w	fp, r8, lr
802053f4:	eb58 0800 	adcs.w	r8, r8, r0
802053f8:	f140 0000 	adc.w	r0, r0, #0
802053fc:	1a8f      	subs	r7, r1, r2
802053fe:	f04f 0100 	mov.w	r1, #0
80205402:	f04f 0600 	mov.w	r6, #0
80205406:	bf3c      	itt	cc
80205408:	43c9      	mvncc	r1, r1
8020540a:	1b66      	subcc	r6, r4, r5
8020540c:	bf14      	ite	ne
8020540e:	ebb5 0c04 	subsne.w	ip, r5, r4
80205412:	2100      	moveq	r1, #0
80205414:	bf3c      	itt	cc
80205416:	43c9      	mvncc	r1, r1
80205418:	1bf6      	subcc	r6, r6, r7
8020541a:	ea4f 4417 	mov.w	r4, r7, lsr #16
8020541e:	ea27 4504 	bic.w	r5, r7, r4, lsl #16
80205422:	ea4f 471c 	mov.w	r7, ip, lsr #16
80205426:	ea2c 4c07 	bic.w	ip, ip, r7, lsl #16
8020542a:	fb04 6207 	mla	r2, r4, r7, r6
8020542e:	fb05 f707 	mul.w	r7, r5, r7
80205432:	fb0c f605 	mul.w	r6, ip, r5
80205436:	eb16 4607 	adds.w	r6, r6, r7, lsl #16
8020543a:	eb42 4217 	adc.w	r2, r2, r7, lsr #16
8020543e:	fb04 fc0c 	mul.w	ip, r4, ip
80205442:	eb16 460c 	adds.w	r6, r6, ip, lsl #16
80205446:	eb42 421c 	adc.w	r2, r2, ip, lsr #16
8020544a:	eb1b 0606 	adds.w	r6, fp, r6
8020544e:	eb58 0202 	adcs.w	r2, r8, r2
80205452:	4141      	adcs	r1, r0
80205454:	ea4e 0e8e 	orr.w	lr, lr, lr, lsl #2
80205458:	ea46 069e 	orr.w	r6, r6, lr, lsr #2
8020545c:	d501      	bpl.n	80205462 <__btod_mult_common+0x10a>
8020545e:	e8bd 8901 	ldmia.w	sp!, {r0, r8, fp, pc}
80205462:	19b6      	adds	r6, r6, r6
80205464:	4152      	adcs	r2, r2
80205466:	eb41 0101 	adc.w	r1, r1, r1
8020546a:	f1a3 0301 	sub.w	r3, r3, #1
8020546e:	e8bd 8901 	ldmia.w	sp!, {r0, r8, fp, pc}
80205472:	ea4f 4514 	mov.w	r5, r4, lsr #16
80205476:	ea24 4605 	bic.w	r6, r4, r5, lsl #16
8020547a:	ea4f 4711 	mov.w	r7, r1, lsr #16
8020547e:	ea21 4c07 	bic.w	ip, r1, r7, lsl #16
80205482:	fb05 f407 	mul.w	r4, r5, r7
80205486:	fb06 f707 	mul.w	r7, r6, r7
8020548a:	fb0c f106 	mul.w	r1, ip, r6
8020548e:	eb11 4107 	adds.w	r1, r1, r7, lsl #16
80205492:	eb44 4417 	adc.w	r4, r4, r7, lsr #16
80205496:	fb05 fc0c 	mul.w	ip, r5, ip
8020549a:	eb11 410c 	adds.w	r1, r1, ip, lsl #16
8020549e:	eb44 441c 	adc.w	r4, r4, ip, lsr #16
802054a2:	ea4f 4712 	mov.w	r7, r2, lsr #16
802054a6:	ea22 4c07 	bic.w	ip, r2, r7, lsl #16
802054aa:	fb05 f207 	mul.w	r2, r5, r7
802054ae:	fb06 f707 	mul.w	r7, r6, r7
802054b2:	fb0c f606 	mul.w	r6, ip, r6
802054b6:	eb16 4607 	adds.w	r6, r6, r7, lsl #16
802054ba:	eb42 4217 	adc.w	r2, r2, r7, lsr #16
802054be:	fb05 fc0c 	mul.w	ip, r5, ip
802054c2:	eb16 460c 	adds.w	r6, r6, ip, lsl #16
802054c6:	eb42 451c 	adc.w	r5, r2, ip, lsr #16
802054ca:	186a      	adds	r2, r5, r1
802054cc:	f154 0100 	adcs.w	r1, r4, #0
802054d0:	bf48      	it	mi
802054d2:	4770      	bxmi	lr
802054d4:	19b6      	adds	r6, r6, r6
802054d6:	4152      	adcs	r2, r2
802054d8:	eb41 0101 	adc.w	r1, r1, r1
802054dc:	f1a3 0301 	sub.w	r3, r3, #1
802054e0:	4770      	bx	lr
802054e2:	f095 0f00 	teq	r5, #0
802054e6:	d037      	beq.n	80205558 <__btod_mult_common+0x200>
802054e8:	ea4f 4211 	mov.w	r2, r1, lsr #16
802054ec:	ea21 4602 	bic.w	r6, r1, r2, lsl #16
802054f0:	ea4f 4714 	mov.w	r7, r4, lsr #16
802054f4:	ea24 4c07 	bic.w	ip, r4, r7, lsl #16
802054f8:	fb02 f107 	mul.w	r1, r2, r7
802054fc:	fb06 f707 	mul.w	r7, r6, r7
80205500:	fb0c f406 	mul.w	r4, ip, r6
80205504:	eb14 4407 	adds.w	r4, r4, r7, lsl #16
80205508:	eb41 4117 	adc.w	r1, r1, r7, lsr #16
8020550c:	fb02 fc0c 	mul.w	ip, r2, ip
80205510:	eb14 440c 	adds.w	r4, r4, ip, lsl #16
80205514:	eb41 411c 	adc.w	r1, r1, ip, lsr #16
80205518:	ea4f 4715 	mov.w	r7, r5, lsr #16
8020551c:	ea25 4c07 	bic.w	ip, r5, r7, lsl #16
80205520:	fb02 f507 	mul.w	r5, r2, r7
80205524:	fb06 f707 	mul.w	r7, r6, r7
80205528:	fb0c f606 	mul.w	r6, ip, r6
8020552c:	eb16 4607 	adds.w	r6, r6, r7, lsl #16
80205530:	eb45 4517 	adc.w	r5, r5, r7, lsr #16
80205534:	fb02 fc0c 	mul.w	ip, r2, ip
80205538:	eb16 460c 	adds.w	r6, r6, ip, lsl #16
8020553c:	eb45 421c 	adc.w	r2, r5, ip, lsr #16
80205540:	1912      	adds	r2, r2, r4
80205542:	f151 0100 	adcs.w	r1, r1, #0
80205546:	bf48      	it	mi
80205548:	4770      	bxmi	lr
8020554a:	19b6      	adds	r6, r6, r6
8020554c:	4152      	adcs	r2, r2
8020554e:	eb41 0101 	adc.w	r1, r1, r1
80205552:	f1a3 0301 	sub.w	r3, r3, #1
80205556:	4770      	bx	lr
80205558:	ea4f 4514 	mov.w	r5, r4, lsr #16
8020555c:	ea24 4605 	bic.w	r6, r4, r5, lsl #16
80205560:	ea4f 4711 	mov.w	r7, r1, lsr #16
80205564:	ea21 4c07 	bic.w	ip, r1, r7, lsl #16
80205568:	fb05 f107 	mul.w	r1, r5, r7
8020556c:	fb06 f707 	mul.w	r7, r6, r7
80205570:	fb0c f206 	mul.w	r2, ip, r6
80205574:	eb12 4207 	adds.w	r2, r2, r7, lsl #16
80205578:	eb41 4117 	adc.w	r1, r1, r7, lsr #16
8020557c:	fb05 fc0c 	mul.w	ip, r5, ip
80205580:	eb12 420c 	adds.w	r2, r2, ip, lsl #16
80205584:	eb51 411c 	adcs.w	r1, r1, ip, lsr #16
80205588:	f04f 0600 	mov.w	r6, #0
8020558c:	bf48      	it	mi
8020558e:	4770      	bxmi	lr
80205590:	1892      	adds	r2, r2, r2
80205592:	eb41 0101 	adc.w	r1, r1, r1
80205596:	f1a3 0301 	sub.w	r3, r3, #1
8020559a:	4770      	bx	lr

8020559c <__ARM_fpclassify>:
__ARM_fpclassify():
8020559c:	b403      	push	{r0, r1}
8020559e:	9801      	ldr	r0, [sp, #4]
802055a0:	0041      	lsls	r1, r0, #1
802055a2:	9800      	ldr	r0, [sp, #0]
802055a4:	ea50 20c1 	orrs.w	r0, r0, r1, lsl #11
802055a8:	bf18      	it	ne
802055aa:	2004      	movne	r0, #4
802055ac:	0d4a      	lsrs	r2, r1, #21
802055ae:	bf18      	it	ne
802055b0:	f040 0001 	orrne.w	r0, r0, #1
802055b4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
802055b8:	ebb2 5f51 	cmp.w	r2, r1, lsr #21
802055bc:	bf08      	it	eq
802055be:	f040 0002 	orreq.w	r0, r0, #2
802055c2:	2801      	cmp	r0, #1
802055c4:	bf08      	it	eq
802055c6:	2005      	moveq	r0, #5
802055c8:	b002      	add	sp, #8
802055ca:	4770      	bx	lr

802055cc <_is_digit>:
_is_digit():
802055cc:	3830      	subs	r0, #48	@ 0x30
802055ce:	280a      	cmp	r0, #10
802055d0:	d201      	bcs.n	802055d6 <_is_digit+0xa>
802055d2:	2001      	movs	r0, #1
802055d4:	4770      	bx	lr
802055d6:	2000      	movs	r0, #0
802055d8:	4770      	bx	lr

802055da <fputc>:
fputc():
802055da:	688a      	ldr	r2, [r1, #8]
802055dc:	2a00      	cmp	r2, #0
802055de:	dc02      	bgt.n	802055e6 <fputc+0xc>
802055e0:	2200      	movs	r2, #0
802055e2:	f7fb bd5d 	b.w	802010a0 <__flsbuf>
802055e6:	1e52      	subs	r2, r2, #1
802055e8:	608a      	str	r2, [r1, #8]
802055ea:	684a      	ldr	r2, [r1, #4]
802055ec:	b2c0      	uxtb	r0, r0
802055ee:	1c53      	adds	r3, r2, #1
802055f0:	604b      	str	r3, [r1, #4]
802055f2:	7010      	strb	r0, [r2, #0]
802055f4:	4770      	bx	lr
	...

802055f8 <_get_lc_numeric>:
_get_lc_numeric():
802055f8:	b510      	push	{r4, lr}
802055fa:	2900      	cmp	r1, #0
802055fc:	d00a      	beq.n	80205614 <_get_lc_numeric+0x1c>
802055fe:	7808      	ldrb	r0, [r1, #0]
80205600:	2800      	cmp	r0, #0
80205602:	d007      	beq.n	80205614 <_get_lc_numeric+0x1c>
80205604:	4805      	ldr	r0, [pc, #20]	@ (8020561c <_get_lc_numeric+0x24>)
80205606:	4478      	add	r0, pc
80205608:	f7fb fa66 	bl	80200ad8 <strcmp>
8020560c:	2800      	cmp	r0, #0
8020560e:	d001      	beq.n	80205614 <_get_lc_numeric+0x1c>
80205610:	2000      	movs	r0, #0
80205612:	bd10      	pop	{r4, pc}
80205614:	4802      	ldr	r0, [pc, #8]	@ (80205620 <_get_lc_numeric+0x28>)
80205616:	4478      	add	r0, pc
80205618:	bd10      	pop	{r4, pc}
8020561a:	0000      	.short	0x0000
8020561c:	000007d6 	.word	0x000007d6
80205620:	000007ce 	.word	0x000007ce

80205624 <_get_lc_ctype>:
_get_lc_ctype():
80205624:	b510      	push	{r4, lr}
80205626:	2900      	cmp	r1, #0
80205628:	d00a      	beq.n	80205640 <_get_lc_ctype+0x1c>
8020562a:	7808      	ldrb	r0, [r1, #0]
8020562c:	2800      	cmp	r0, #0
8020562e:	d007      	beq.n	80205640 <_get_lc_ctype+0x1c>
80205630:	4805      	ldr	r0, [pc, #20]	@ (80205648 <_get_lc_ctype+0x24>)
80205632:	4478      	add	r0, pc
80205634:	f7fb fa50 	bl	80200ad8 <strcmp>
80205638:	2800      	cmp	r0, #0
8020563a:	d001      	beq.n	80205640 <_get_lc_ctype+0x1c>
8020563c:	2000      	movs	r0, #0
8020563e:	bd10      	pop	{r4, pc}
80205640:	4802      	ldr	r0, [pc, #8]	@ (8020564c <_get_lc_ctype+0x28>)
80205642:	4478      	add	r0, pc
80205644:	bd10      	pop	{r4, pc}
80205646:	0000      	.short	0x0000
80205648:	000007c6 	.word	0x000007c6
8020564c:	000007be 	.word	0x000007be

80205650 <_fp_init>:
_fp_init():
80205650:	eef1 0a10 	vmrs	r0, fpscr
80205654:	f64f 71ff 	movw	r1, #65535	@ 0xffff
80205658:	f2c0 31c0 	movt	r1, #960	@ 0x3c0
8020565c:	ea20 0001 	bic.w	r0, r0, r1
80205660:	f040 7040 	orr.w	r0, r0, #50331648	@ 0x3000000
80205664:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
80205668:	eee1 0a10 	vmsr	fpscr, r0

8020566c <__fplib_config_fpu_vfp>:
__fplib_config_fpu_vfp():
8020566c:	4770      	bx	lr

8020566e <_printf_fp_dec>:
_printf_fp_dec():
8020566e:	f7fc b9a3 	b.w	802019b8 <_printf_fp_dec_real>

80205672 <_printf_fp_hex>:
_printf_fp_hex():
80205672:	f7fc bad7 	b.w	80201c24 <_printf_fp_hex_real>

80205676 <__stdin_name>:
__I$use$fp():
80205676:	743a 0074                                   :tt.

8020567a <__stdout_name>:
8020567a:	743a 0074                                   :tt.

8020567e <__stderr_name>:
8020567e:	743a 0074 0000                              :tt...

80205684 <initial_mbstate>:
	...

8020568c <uc_hextab>:
8020568c:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
8020569c:	3040 0058                                   @0X.

802056a0 <lc_hextab>:
802056a0:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
802056b0:	3040 0078                                   @0x.

802056b4 <maptable>:
802056b4:	0004 0800 0000 0000 0000 0200 0100 0000     ................
802056c4:	                                             .

802056c5 <lc_hextab>:
802056c5:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
802056d5:	7078                                         xp.

802056d8 <uc_hextab>:
802056d8:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
802056e8:	5058 0000                                   XP..

802056ec <tenpwrs_x>:
802056ec:	4002 0000 0000 a000 0000 0000 4005 0000     .@...........@..
802056fc:	0000 c800 0000 0000 400c 0000 0000 9c40     .........@....@.
8020570c:	0000 0000 4019 0000 2000 bebc 0000 0000     .....@... ......
8020571c:	4034 0000 c9bf 8e1b 0000 0400               4@..........

80205728 <tenpwrs_i>:
80205728:	40b5 0000 4b50 d0cf 0766 cfe2 0001 0000     .@..PK..f.......
80205738:	416c 0000 823e aa51 eedf 34a7 0001 0000     lA..>.Q....4....
80205748:	42d9 0000 b5dc e2a0 303a 971f ffff ffff     .B......:0......
80205758:	45b4 0000 25fd c8a0 a3e9 4fc1 ffff ffff     .E...%.....O....
80205768:	3fff 0000 0000 8000 0000 0000 3fff 0000     .?...........?..
80205778:	0000 8000 0000 0000                         ........

80205780 <Driver_RTC0>:
80205780:	3539 8020 352d 8020 34bd 8020 351d 8020     95 .-5 ..4 ..5 .
80205790:	34ed 8020 34a1 8020 3505 8020 34d5 8020     .4 ..4 ..5 ..4 .

802057a0 <_DoInit._aInitStr>:
802057a0:	0000 0000 0000 5454 2052 4552 4747 5345     ......TTR REGGES
802057b0:	0000 0000                                   ....

802057b4 <ufsr_bits>:
802057b4:	4409 5649 5942 455a 4f52 5508 414e 494c     .DIVBYZERO.UNALI
802057c4:	4e47 4445 5304 4b54 464f 4e03 434f 0250     GNED.STKOF.NOCP.
802057d4:	4e49 5056 0143 4e49 5356 4154 4554 5500     INVPC.INVSTATE.U
802057e4:	444e 4645 4e49 5453 2052                     NDEFINSTR .

802057ef <mmfsr_bits>:
802057ef:	4d07 414d 5652 4c41 4449 4d05 534c 4550     .MMARVALID.MLSPE
802057ff:	5252 4d04 5453 454b 5252 4d03 4e55 5453     RR.MSTKERR.MUNST
8020580f:	454b 5252 4401 4341 5643 4f49 004c 4149     KERR.DACCVIOL.IA
8020581f:	4343 4956 4c4f 0020                         CCVIOL .

80205827 <bfsr_bits>:
80205827:	4207 4146 5652 4c41 4449 4c05 5053 5245     .BFARVALID.LSPER
80205837:	0452 5453 454b 5252 5503 534e 4b54 5245     R.STKERR.UNSTKER
80205847:	0252 4d49 5250 4345 5349 5245 0152 5250     R.IMPRECISERR.PR
80205857:	4345 5349 5245 0052 4249 5355 5245 2052     ECISERR.IBUSERR 
	...

80205868 <afsr_bits>:
80205868:	461e 4f50 5349 4e4f 461d 4754 1c55 4546     .FPOISON.FTGU.FE
80205878:	4343 4618 414d 4958 461b 414d 4958 5954     CC.FMAXI.FMAXITY
80205888:	4550 443d 4345 5245 1652 4446 4354 154d     PE=DECERR.FDTCM.
80205898:	4946 4354 134d 5050 494f 4f53 124e 5450     FITCM.PPOISON.PT
802058a8:	5547 5011 4345 0f43 4950 5050 0e42 4550     GU.PECC.PIPPB.PE
802058b8:	5050 0d42 4d50 5841 1049 4d50 5841 5449     PPB.PMAXI.PMAXIT
802058c8:	5059 3d45 4544 4543 5252 500c 4150 4248     YPE=DECERR.PPAHB
802058d8:	500b 5444 4d43 500a 5449 4d43 4909 4f50     .PDTCM.PITCM.IPO
802058e8:	5349 4e4f 4907 4345 0443 4549 5050 0342     ISON.IECC.IEPPB.
802058f8:	4d49 5841 0649 4d49 5841 5449 5059 3d45     IMAXI.IMAXITYPE=
80205908:	4544 4543 5252 4902 4150 4248 4901 5444     DECERR.IPAHB.IDT
80205918:	4d43 4900 5449 4d43 0020                    CM.IITCM .

80205922 <sfsr_bits>:
80205922:	4c07 4553 5252 5306 4146 5652 4c41 4449     .LSERR.SFARVALID
80205932:	4c05 5053 5245 0452 4e49 5456 4152 034e     .LSPERR.INVTRAN.
80205942:	5541 4956 4c4f 4902 564e 5245 4901 564e     AUVIOL.INVER.INV
80205952:	5349 4900 564e 5045 0020                    IS.INVEP .

8020595c <dfsr_bits>:
8020595c:	5005 554d 4504 5458 5245 414e 034c 4356     .PMU.EXTERNAL.VC
8020596c:	5441 4843 4402 5457 5254 5041 4201 504b     ATCH.DWTTRAP.BKP
8020597c:	0054 4148 544c 4445 0020                    T.HALTED .

80205986 <hfsr_bits>:
80205986:	441f 4245 4755 5645 1e54 4f46 4352 4445     .DEBUGEVT.FORCED
80205996:	5601 4345 4254 204c 0000                    .VECTBL ..

802059a0 <FaultNames>:
802059a0:	5d87 8020 5d61 8020 5da8 8020 5d91 8020     .] .a] ..] ..] .
802059b0:	5d9c 8020 5d73 8020                         .] .s] .

802059b8 <flag_names>:
802059b8:	5a4e 5643 4951 5449 3030 3042 4747 4747     NZCVQIIT00B0GGGG
	...

802059c9 <.L.str>:
802059c9:	0a0d 3e20 3e3e 5220 4354 6420 6d65 206f     .. >>> RTC demo 
802059d9:	6874 6572 6461 6920 2073 7473 7261 6974     thread is starti
802059e9:	676e 7520 2170 2121 3c20 3c3c 0d20 000a     ng up!!! <<< ...

802059f9 <.L.str.8>:
802059f9:	0a0d 5220 6365 6965 6576 2064 6c61 7261     .. Received alar
80205a09:	206d 0a0d                                    m ...

80205a0e <.L.str.6>:
80205a0e:	0a0d 5320 7465 6974 676e 6120 616c 6d72     .. Setting alarm
80205a1e:	6120 7466 7265 2520 2064 6f63 6e75 7374      after %d counts
80205a2e:	0d20 000a                                    ...

80205a32 <.L.str.1>:
80205a32:	0a0d 5220 4354 7620 7265 6973 6e6f 6120     .. RTC version a
80205a42:	6970 253a 2058 7264 7669 7265 253a 2e58     pi:%X driver:%X.
80205a52:	2e2e 0a0d                                    .....

80205a57 <.L.str.11>:
80205a57:	0a0d 5820 5858 5220 4354 6420 6d65 206f     .. XXX RTC demo 
80205a67:	6874 6572 6461 6920 2073 7865 7469 6e69     thread is exitin
80205a77:	2067 5858 2e58 2e2e 0a0d                     g XXX......

80205a82 <.L.str.9>:
80205a82:	0a0d 4520 7272 726f 203a 5452 2043 6f50     .. Error: RTC Po
80205a92:	6577 2072 464f 2046 6166 6c69 6465 0d2e     wer OFF failed..
80205aa2:	000a                                        ..

80205aa4 <.L.str.10>:
80205aa4:	0a0d 4520 7272 726f 203a 5452 2043 6e55     .. Error: RTC Un
80205ab4:	6e69 7469 6169 696c 657a 6620 6961 656c     initialize faile
80205ac4:	2e64 0a0d                                    d....

80205ac9 <.L.str.2>:
80205ac9:	0a0d 4520 7272 726f 203a 5452 2043 6c61     .. Error: RTC al
80205ad9:	7261 206d 6163 6170 6962 696c 7974 6920     arm capability i
80205ae9:	2073 6f6e 2074 7661 6961 616c 6c62 2e65     s not available.
80205af9:	000a                                        ..

80205afb <.L.str.5>:
80205afb:	0a0d 4520 7272 726f 203a 5452 2043 6572     .. Error: RTC re
80205b0b:	6461 6620 6961 656c 0a64                     ad failed..

80205b16 <.L.str.4>:
80205b16:	0a0d 4520 7272 726f 203a 5452 2043 6f50     .. Error: RTC Po
80205b26:	6577 2072 7075 6620 6961 656c 0a64           wer up failed..

80205b35 <.L.str.3>:
80205b35:	0a0d 4520 7272 726f 203a 5452 2043 6e69     .. Error: RTC in
80205b45:	7469 6620 6961 656c 0a64                     it failed..

80205b50 <.L.str.7>:
80205b50:	0a0d 4520 7272 726f 203a 5452 2043 6f43     .. Error: RTC Co
80205b60:	6c75 2064 6f6e 2074 6573 2074 6c61 7261     uld not set alar
80205b70:	                                             m

80205b71 <.L.str.31>:
80205b71:	000a                                        ..

80205b73 <.L.str.15>:
80205b73:	3d0a 3d3d 203d 7325 6520 6378 7065 6974     .==== %s excepti
80205b83:	6e6f 3d20 3d3d 0a3d 000a                    on ====...

80205b8d <.L.str.25>:
80205b8d:	3d0a 3d3d 203d 7453 6361 206b 7564 706d     .==== Stack dump
80205b9d:	3d20 3d3d 0a3d 000a                          ====...

80205ba5 <.L.str>:
80205ba5:	2121 2021 6e49 6520 6378 7065 6974 6e6f     !!! In exception
80205bb5:	2520 2064 2121 0a21                           %d !!!..

80205bbe <.L.str.16>:
80205bbe:	450a 4358 525f 5445 5255 204e 203d 3025     .EXC_RETURN = %0
80205bce:	5838 0a0a 6552 6967 7473 7265 6420 6d75     8X..Register dum
80205bde:	2070 7328 6f74 6572 2064 7461 2620 3025     p (stored at &%0
80205bee:	5838 2029 7369 0a3a                          8X) is:..

80205bf7 <.L.str.24>:
80205bf7:	7453 6361 206b 6f74 2070 7266 6d6f 5620     Stack top from V
80205c07:	4f54 3a52 2520 3830 0a58                     TOR: %08X..

80205c12 <.L.str.18>:
80205c12:	5053 2020 203d 3025 5838 4c20 2052 3d20     SP  = %08X LR  =
80205c22:	2520 3830 2058 4350 2020 203d 3025 5838      %08X PC  = %08X
80205c32:	000a                                        ..

80205c34 <.L.str.10>:
80205c34:	4642 5241 2020 203d 3025 5838 000a          BFAR  = %08X..

80205c42 <.L.str.8>:
80205c42:	4d4d 4146 2052 203d 3025 5838 000a          MMFAR = %08X..

80205c50 <.L.str.22>:
80205c50:	5350 2052 203d 3025 5838 000a               PSR = %08X..

80205c5c <.L.str.26>:
80205c5c:	6441 7264 7365 2073 3a20 2020 2020 3320     Address  :     3
80205c6c:	3220 3120 3020 2020 2020 3720 3620 3520      2 1 0     7 6 5
80205c7c:	3420 2020 2020 4220 4120 3920 3820 2020      4     B A 9 8  
80205c8c:	2020 4620 4520 4420 4320 2020 2020 2020        F E D C      
80205c9c:	4120 4353 4949 4420 7461 0a61                 ASCII Data..

80205ca9 <.L.str.23>:
80205ca9:	7845 6563 7470 6f69 206e 6425 000a          Exception %d..

80205cb7 <.L.str.29>:
80205cb7:	2020 2020 2020 2020                                 

80205cbf <.L.str.30>:
80205cbf:	2020 2020                                        .

80205cc4 <.L.str.4>:
80205cc4:	202c                                         , .

80205cc7 <.L.str.19>:
80205cc7:	6f4d 6564 2520 382d 6673 616c 7367 7320     Mode %-8sflags s
80205cd7:	7465 203a                                    et: .

80205cdc <.L.str.3>:
80205cdc:	2820                                          (.

80205cdf <.L.str.6>:
80205cdf:	0029                                        ).

80205ce1 <.L.str.27>:
80205ce1:	3025 5838 3a20                               %08X :.

80205ce8 <.L.str.9>:
80205ce8:	4642 5253 2020 203d 3025 5832                BFSR  = %02X.

80205cf5 <.L.str.7>:
80205cf5:	4d4d 5346 2052 203d 3025 5832                MMFSR = %02X.

80205d02 <.L.str.1>:
80205d02:	4655 5253 2020 203d 3025 5834                UFSR  = %04X.

80205d0f <.L.str.28>:
80205d0f:	2020 2020 3025 5838                              %08X.

80205d18 <.L.str.11>:
80205d18:	4641 5253 2020 203d 3025 5838                AFSR  = %08X.

80205d25 <.L.str.13>:
80205d25:	4644 5253 2020 203d 3025 5838                DFSR  = %08X.

80205d32 <.L.str.14>:
80205d32:	4648 5253 2020 203d 3025 5838                HFSR  = %08X.

80205d3f <.L.str.12>:
80205d3f:	4653 5253 2020 203d 3025 5838                SFSR  = %08X.

80205d4c <.L.str.17>:
80205d4c:	2552 332d 3d64 2520 3830 2558 0063          R%-3d= %08X%c.

80205d5a <.L.str.20>:
80205d5a:	6854 6572 6461 4d00 6d65 614d 616e 6567     Thread.MemManage
	...

80205d6b <.L.str.21>:
80205d6b:	6148 646e 656c 0072 6544 7562 4d67 6e6f     Handler.DebugMon
80205d7b:	7469 726f                                    itor.

80205d80 <.L.str.2>:
80205d80:	7325 2e25 732a 4800 7261 4664 7561 746c     %s%.*s.HardFault
80205d90:	5500 6173 6567 6146 6c75 0074 6553 7563     .UsageFault.Secu
80205da0:	6572 6146 6c75 0074 7542 4673 7561 746c     reFault.BusFault

80205db0 <.L.str.5>:
	...

80205db1 <.L.str>:
80205db1:	6554 6d72 6e69 6c61 0000                     Terminal...

80205dbc <Region$$Table$$Base>:
Region$$Table$$Base():
80205dbc:	80205f60 	.word	0x80205f60
80205dc0:	20000000 	.word	0x20000000
80205dc4:	00000648 	.word	0x00000648
80205dc8:	80200824 	.word	0x80200824
80205dcc:	802065a8 	.word	0x802065a8
80205dd0:	20000648 	.word	0x20000648
80205dd4:	00000a70 	.word	0x00000a70
80205dd8:	80200844 	.word	0x80200844

80205ddc <Region$$Table$$Limit>:
Region$$Table$$Limit():
80205ddc:	0000001c 	.word	0x0000001c

80205de0 <__lcnum_c_name>:
80205de0:	00000043 fffffff8                       C.......

80205de8 <__lcnum_c_start>:
80205de8:	0000000c 0000000e 0000000f              ............

80205df4 <__lcnum_c_point>:
80205df4:	                                         ..

80205df6 <__lcnum_c_thousands>:
	...

80205df7 <__lcnum_c_grouping>:
	...

80205df8 <__lcnum_c_end>:
80205df8:	00000110                                ....

80205dfc <__lcctype_c_name>:
80205dfc:	00000043 fffffff8                       C.......

80205e04 <__lcctype_c_start>:
	...

80205e05 <__ctype>:
80205e05:	40404040 40404040 41414140 40404141     @@@@@@@@@AAAAA@@
80205e15:	40404040 40404040 40404040 40404040     @@@@@@@@@@@@@@@@
80205e25:	02020205 02020202 02020202 02020202     ................
80205e35:	20202020 20202020 02022020 02020202               ......
80205e45:	90909002 10909090 10101010 10101010     ................
80205e55:	10101010 10101010 02101010 02020202     ................
80205e65:	88888802 08888888 08080808 08080808     ................
80205e75:	08080808 08080808 02080808 40020202     ...............@
	...

80205f08 <MPU_Load_Regions.mpu_table>:
80205f08:	02000002 023fffe1 08000002 0827ffe5     ......?.......'.
80205f18:	1a000003 1affffe3 58000012 5803ffe5     ...........X...X
80205f28:	58800012 5883ffe5 80000006 8057ffe7     ...X...X......W.
80205f38:	83000003 83ffffe3 a0000002 bfffffe5     ................
80205f48:	c0000006 dfffffe7                       ........

80205f50 <ns_regions>:
80205f50:	20004000 20003fff 00000001              .@. .?. ....
